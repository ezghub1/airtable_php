<?php
/**
 * GetWorkspaceCollaborators200Response
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ez128\Airtable\Model;

use \ArrayAccess;
use \Ez128\Airtable\ObjectSerializer;

/**
 * GetWorkspaceCollaborators200Response Class Doc Comment
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetWorkspaceCollaborators200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_workspace_collaborators_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'base_ids' => 'string[]',
        'collaborators' => '\Ez128\Airtable\Model\GetWorkspaceCollaborators200ResponseCollaborators',
        'created_time' => 'string',
        'group_collaborators' => '\Ez128\Airtable\Model\GetWorkspaceCollaborators200ResponseGroupCollaborators',
        'id' => 'string',
        'individual_collaborators' => '\Ez128\Airtable\Model\GetWorkspaceCollaborators200ResponseIndividualCollaborators',
        'invite_links' => '\Ez128\Airtable\Model\GetWorkspaceCollaborators200ResponseInviteLinks',
        'name' => 'string',
        'workspace_restrictions' => '\Ez128\Airtable\Model\GetWorkspaceCollaborators200ResponseWorkspaceRestrictions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'base_ids' => null,
        'collaborators' => null,
        'created_time' => null,
        'group_collaborators' => null,
        'id' => null,
        'individual_collaborators' => null,
        'invite_links' => null,
        'name' => null,
        'workspace_restrictions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'base_ids' => false,
        'collaborators' => false,
        'created_time' => true,
        'group_collaborators' => false,
        'id' => false,
        'individual_collaborators' => false,
        'invite_links' => false,
        'name' => false,
        'workspace_restrictions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_ids' => 'baseIds',
        'collaborators' => 'collaborators',
        'created_time' => 'createdTime',
        'group_collaborators' => 'groupCollaborators',
        'id' => 'id',
        'individual_collaborators' => 'individualCollaborators',
        'invite_links' => 'inviteLinks',
        'name' => 'name',
        'workspace_restrictions' => 'workspaceRestrictions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_ids' => 'setBaseIds',
        'collaborators' => 'setCollaborators',
        'created_time' => 'setCreatedTime',
        'group_collaborators' => 'setGroupCollaborators',
        'id' => 'setId',
        'individual_collaborators' => 'setIndividualCollaborators',
        'invite_links' => 'setInviteLinks',
        'name' => 'setName',
        'workspace_restrictions' => 'setWorkspaceRestrictions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_ids' => 'getBaseIds',
        'collaborators' => 'getCollaborators',
        'created_time' => 'getCreatedTime',
        'group_collaborators' => 'getGroupCollaborators',
        'id' => 'getId',
        'individual_collaborators' => 'getIndividualCollaborators',
        'invite_links' => 'getInviteLinks',
        'name' => 'getName',
        'workspace_restrictions' => 'getWorkspaceRestrictions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('base_ids', $data ?? [], null);
        $this->setIfExists('collaborators', $data ?? [], null);
        $this->setIfExists('created_time', $data ?? [], null);
        $this->setIfExists('group_collaborators', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('individual_collaborators', $data ?? [], null);
        $this->setIfExists('invite_links', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('workspace_restrictions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['base_ids'] === null) {
            $invalidProperties[] = "'base_ids' can't be null";
        }
        if ($this->container['created_time'] === null) {
            $invalidProperties[] = "'created_time' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['workspace_restrictions'] === null) {
            $invalidProperties[] = "'workspace_restrictions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_ids
     *
     * @return string[]
     */
    public function getBaseIds()
    {
        return $this->container['base_ids'];
    }

    /**
     * Sets base_ids
     *
     * @param string[] $base_ids base_ids
     *
     * @return self
     */
    public function setBaseIds($base_ids)
    {
        if (is_null($base_ids)) {
            throw new \InvalidArgumentException('non-nullable base_ids cannot be null');
        }
        $this->container['base_ids'] = $base_ids;

        return $this;
    }

    /**
     * Gets collaborators
     *
     * @return \Ez128\Airtable\Model\GetWorkspaceCollaborators200ResponseCollaborators|null
     * @deprecated
     */
    public function getCollaborators()
    {
        return $this->container['collaborators'];
    }

    /**
     * Sets collaborators
     *
     * @param \Ez128\Airtable\Model\GetWorkspaceCollaborators200ResponseCollaborators|null $collaborators collaborators
     *
     * @return self
     * @deprecated
     */
    public function setCollaborators($collaborators)
    {
        if (is_null($collaborators)) {
            throw new \InvalidArgumentException('non-nullable collaborators cannot be null');
        }
        $this->container['collaborators'] = $collaborators;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return string
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param string $created_time A date timestamp in the ISO format, eg:\"2018-01-01T00:00:00.000Z\"
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        if (is_null($created_time)) {
            array_push($this->openAPINullablesSetToNull, 'created_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets group_collaborators
     *
     * @return \Ez128\Airtable\Model\GetWorkspaceCollaborators200ResponseGroupCollaborators|null
     */
    public function getGroupCollaborators()
    {
        return $this->container['group_collaborators'];
    }

    /**
     * Sets group_collaborators
     *
     * @param \Ez128\Airtable\Model\GetWorkspaceCollaborators200ResponseGroupCollaborators|null $group_collaborators group_collaborators
     *
     * @return self
     */
    public function setGroupCollaborators($group_collaborators)
    {
        if (is_null($group_collaborators)) {
            throw new \InvalidArgumentException('non-nullable group_collaborators cannot be null');
        }
        $this->container['group_collaborators'] = $group_collaborators;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets individual_collaborators
     *
     * @return \Ez128\Airtable\Model\GetWorkspaceCollaborators200ResponseIndividualCollaborators|null
     */
    public function getIndividualCollaborators()
    {
        return $this->container['individual_collaborators'];
    }

    /**
     * Sets individual_collaborators
     *
     * @param \Ez128\Airtable\Model\GetWorkspaceCollaborators200ResponseIndividualCollaborators|null $individual_collaborators individual_collaborators
     *
     * @return self
     */
    public function setIndividualCollaborators($individual_collaborators)
    {
        if (is_null($individual_collaborators)) {
            throw new \InvalidArgumentException('non-nullable individual_collaborators cannot be null');
        }
        $this->container['individual_collaborators'] = $individual_collaborators;

        return $this;
    }

    /**
     * Gets invite_links
     *
     * @return \Ez128\Airtable\Model\GetWorkspaceCollaborators200ResponseInviteLinks|null
     */
    public function getInviteLinks()
    {
        return $this->container['invite_links'];
    }

    /**
     * Sets invite_links
     *
     * @param \Ez128\Airtable\Model\GetWorkspaceCollaborators200ResponseInviteLinks|null $invite_links invite_links
     *
     * @return self
     */
    public function setInviteLinks($invite_links)
    {
        if (is_null($invite_links)) {
            throw new \InvalidArgumentException('non-nullable invite_links cannot be null');
        }
        $this->container['invite_links'] = $invite_links;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets workspace_restrictions
     *
     * @return \Ez128\Airtable\Model\GetWorkspaceCollaborators200ResponseWorkspaceRestrictions
     */
    public function getWorkspaceRestrictions()
    {
        return $this->container['workspace_restrictions'];
    }

    /**
     * Sets workspace_restrictions
     *
     * @param \Ez128\Airtable\Model\GetWorkspaceCollaborators200ResponseWorkspaceRestrictions $workspace_restrictions workspace_restrictions
     *
     * @return self
     */
    public function setWorkspaceRestrictions($workspace_restrictions)
    {
        if (is_null($workspace_restrictions)) {
            throw new \InvalidArgumentException('non-nullable workspace_restrictions cannot be null');
        }
        $this->container['workspace_restrictions'] = $workspace_restrictions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


