<?php
/**
 * AuditLogEvents200ResponseEventsInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ez128\Airtable\Model;

use \ArrayAccess;
use \Ez128\Airtable\ObjectSerializer;

/**
 * AuditLogEvents200ResponseEventsInner Class Doc Comment
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuditLogEvents200ResponseEventsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'audit_log_events_200_response_events_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'action' => '\Ez128\Airtable\Model\AuditLogEventTypes',
        'actor' => '\Ez128\Airtable\Model\AuditLogActor',
        'context' => '\Ez128\Airtable\Model\AuditLogEvents200ResponseEventsInnerContext',
        'id' => 'string',
        'model_id' => 'string',
        'model_type' => 'string',
        'origin' => '\Ez128\Airtable\Model\AuditLogEvents200ResponseEventsInnerOrigin',
        'payload' => 'array<string,mixed>',
        'payload_version' => 'string',
        'timestamp' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'action' => null,
        'actor' => null,
        'context' => null,
        'id' => null,
        'model_id' => null,
        'model_type' => null,
        'origin' => null,
        'payload' => null,
        'payload_version' => null,
        'timestamp' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'action' => false,
        'actor' => false,
        'context' => false,
        'id' => false,
        'model_id' => false,
        'model_type' => false,
        'origin' => false,
        'payload' => false,
        'payload_version' => false,
        'timestamp' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'action',
        'actor' => 'actor',
        'context' => 'context',
        'id' => 'id',
        'model_id' => 'modelId',
        'model_type' => 'modelType',
        'origin' => 'origin',
        'payload' => 'payload',
        'payload_version' => 'payloadVersion',
        'timestamp' => 'timestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'actor' => 'setActor',
        'context' => 'setContext',
        'id' => 'setId',
        'model_id' => 'setModelId',
        'model_type' => 'setModelType',
        'origin' => 'setOrigin',
        'payload' => 'setPayload',
        'payload_version' => 'setPayloadVersion',
        'timestamp' => 'setTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'actor' => 'getActor',
        'context' => 'getContext',
        'id' => 'getId',
        'model_id' => 'getModelId',
        'model_type' => 'getModelType',
        'origin' => 'getOrigin',
        'payload' => 'getPayload',
        'payload_version' => 'getPayloadVersion',
        'timestamp' => 'getTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MODEL_TYPE_BASE = 'base';
    public const MODEL_TYPE_ATTACHMENT = 'attachment';
    public const MODEL_TYPE_EXTENSION_INSTALLATION = 'extension_installation';
    public const MODEL_TYPE__INTERFACE = 'interface';
    public const MODEL_TYPE_PAGE = 'page';
    public const MODEL_TYPE_PAGE_ELEMENT = 'page_element';
    public const MODEL_TYPE_RECORD = 'record';
    public const MODEL_TYPE_SHARE = 'share';
    public const MODEL_TYPE_INVITE = 'invite';
    public const MODEL_TYPE_TWO_FACTOR_STRATEGY = 'two_factor_strategy';
    public const MODEL_TYPE_USER = 'user';
    public const MODEL_TYPE_GROUP = 'group';
    public const MODEL_TYPE_VIEW = 'view';
    public const MODEL_TYPE_WORKSPACE = 'workspace';
    public const MODEL_TYPE_ENTERPRISE = 'enterprise';
    public const MODEL_TYPE_TABLE = 'table';
    public const MODEL_TYPE_OAUTH_ACCESS_TOKEN = 'oauth_access_token';
    public const MODEL_TYPE_PERSONAL_ACCESS_TOKEN = 'personal_access_token';
    public const MODEL_TYPE_FEATURE_KIT_INSTALLATION = 'feature_kit_installation';
    public const MODEL_TYPE_MANAGED_APP = 'managed_app';
    public const MODEL_TYPE_MANAGED_APP_RELEASE = 'managed_app_release';
    public const MODEL_TYPE_COMPONENT = 'component';
    public const MODEL_TYPE_COMPONENT_RELEASE = 'component_release';
    public const MODEL_TYPE_DATA_TABLE = 'data_table';
    public const MODEL_TYPE_DATA_TABLE_IMPORT = 'data_table_import';
    public const MODEL_TYPE_PUBLISHED_DATASET = 'published_dataset';
    public const MODEL_TYPE_ROLE = 'role';
    public const MODEL_TYPE_PORTAL = 'portal';
    public const PAYLOAD_VERSION__1_0 = '1.0';
    public const PAYLOAD_VERSION__1_1 = '1.1';
    public const PAYLOAD_VERSION__1_2 = '1.2';
    public const PAYLOAD_VERSION__1_3 = '1.3';
    public const PAYLOAD_VERSION__1_4 = '1.4';
    public const PAYLOAD_VERSION__1_5 = '1.5';
    public const PAYLOAD_VERSION__1_6 = '1.6';
    public const PAYLOAD_VERSION__1_7 = '1.7';
    public const PAYLOAD_VERSION__1_8 = '1.8';
    public const PAYLOAD_VERSION__1_9 = '1.9';
    public const PAYLOAD_VERSION__1_10 = '1.10';
    public const PAYLOAD_VERSION__2_0 = '2.0';
    public const PAYLOAD_VERSION__2_1 = '2.1';
    public const PAYLOAD_VERSION__2_2 = '2.2';
    public const PAYLOAD_VERSION__2_3 = '2.3';
    public const PAYLOAD_VERSION__2_4 = '2.4';
    public const PAYLOAD_VERSION__2_5 = '2.5';
    public const PAYLOAD_VERSION__2_6 = '2.6';
    public const PAYLOAD_VERSION__2_7 = '2.7';
    public const PAYLOAD_VERSION__2_8 = '2.8';
    public const PAYLOAD_VERSION__2_9 = '2.9';
    public const PAYLOAD_VERSION__2_10 = '2.10';
    public const PAYLOAD_VERSION__3_0 = '3.0';
    public const PAYLOAD_VERSION__3_1 = '3.1';
    public const PAYLOAD_VERSION__3_2 = '3.2';
    public const PAYLOAD_VERSION__3_3 = '3.3';
    public const PAYLOAD_VERSION__3_4 = '3.4';
    public const PAYLOAD_VERSION__3_5 = '3.5';
    public const PAYLOAD_VERSION__3_6 = '3.6';
    public const PAYLOAD_VERSION__3_7 = '3.7';
    public const PAYLOAD_VERSION__3_8 = '3.8';
    public const PAYLOAD_VERSION__3_9 = '3.9';
    public const PAYLOAD_VERSION__3_10 = '3.10';
    public const PAYLOAD_VERSION__4_0 = '4.0';
    public const PAYLOAD_VERSION__4_1 = '4.1';
    public const PAYLOAD_VERSION__4_2 = '4.2';
    public const PAYLOAD_VERSION__4_3 = '4.3';
    public const PAYLOAD_VERSION__4_4 = '4.4';
    public const PAYLOAD_VERSION__4_5 = '4.5';
    public const PAYLOAD_VERSION__4_6 = '4.6';
    public const PAYLOAD_VERSION__4_7 = '4.7';
    public const PAYLOAD_VERSION__4_8 = '4.8';
    public const PAYLOAD_VERSION__4_9 = '4.9';
    public const PAYLOAD_VERSION__4_10 = '4.10';
    public const PAYLOAD_VERSION__5_0 = '5.0';
    public const PAYLOAD_VERSION__5_1 = '5.1';
    public const PAYLOAD_VERSION__5_2 = '5.2';
    public const PAYLOAD_VERSION__5_3 = '5.3';
    public const PAYLOAD_VERSION__5_4 = '5.4';
    public const PAYLOAD_VERSION__5_5 = '5.5';
    public const PAYLOAD_VERSION__5_6 = '5.6';
    public const PAYLOAD_VERSION__5_7 = '5.7';
    public const PAYLOAD_VERSION__5_8 = '5.8';
    public const PAYLOAD_VERSION__5_9 = '5.9';
    public const PAYLOAD_VERSION__5_10 = '5.10';
    public const PAYLOAD_VERSION__6_0 = '6.0';
    public const PAYLOAD_VERSION__6_1 = '6.1';
    public const PAYLOAD_VERSION__6_2 = '6.2';
    public const PAYLOAD_VERSION__6_3 = '6.3';
    public const PAYLOAD_VERSION__6_4 = '6.4';
    public const PAYLOAD_VERSION__6_5 = '6.5';
    public const PAYLOAD_VERSION__6_6 = '6.6';
    public const PAYLOAD_VERSION__6_7 = '6.7';
    public const PAYLOAD_VERSION__6_8 = '6.8';
    public const PAYLOAD_VERSION__6_9 = '6.9';
    public const PAYLOAD_VERSION__6_10 = '6.10';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModelTypeAllowableValues()
    {
        return [
            self::MODEL_TYPE_BASE,
            self::MODEL_TYPE_ATTACHMENT,
            self::MODEL_TYPE_EXTENSION_INSTALLATION,
            self::MODEL_TYPE__INTERFACE,
            self::MODEL_TYPE_PAGE,
            self::MODEL_TYPE_PAGE_ELEMENT,
            self::MODEL_TYPE_RECORD,
            self::MODEL_TYPE_SHARE,
            self::MODEL_TYPE_INVITE,
            self::MODEL_TYPE_TWO_FACTOR_STRATEGY,
            self::MODEL_TYPE_USER,
            self::MODEL_TYPE_GROUP,
            self::MODEL_TYPE_VIEW,
            self::MODEL_TYPE_WORKSPACE,
            self::MODEL_TYPE_ENTERPRISE,
            self::MODEL_TYPE_TABLE,
            self::MODEL_TYPE_OAUTH_ACCESS_TOKEN,
            self::MODEL_TYPE_PERSONAL_ACCESS_TOKEN,
            self::MODEL_TYPE_FEATURE_KIT_INSTALLATION,
            self::MODEL_TYPE_MANAGED_APP,
            self::MODEL_TYPE_MANAGED_APP_RELEASE,
            self::MODEL_TYPE_COMPONENT,
            self::MODEL_TYPE_COMPONENT_RELEASE,
            self::MODEL_TYPE_DATA_TABLE,
            self::MODEL_TYPE_DATA_TABLE_IMPORT,
            self::MODEL_TYPE_PUBLISHED_DATASET,
            self::MODEL_TYPE_ROLE,
            self::MODEL_TYPE_PORTAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayloadVersionAllowableValues()
    {
        return [
            self::PAYLOAD_VERSION__1_0,
            self::PAYLOAD_VERSION__1_1,
            self::PAYLOAD_VERSION__1_2,
            self::PAYLOAD_VERSION__1_3,
            self::PAYLOAD_VERSION__1_4,
            self::PAYLOAD_VERSION__1_5,
            self::PAYLOAD_VERSION__1_6,
            self::PAYLOAD_VERSION__1_7,
            self::PAYLOAD_VERSION__1_8,
            self::PAYLOAD_VERSION__1_9,
            self::PAYLOAD_VERSION__1_10,
            self::PAYLOAD_VERSION__2_0,
            self::PAYLOAD_VERSION__2_1,
            self::PAYLOAD_VERSION__2_2,
            self::PAYLOAD_VERSION__2_3,
            self::PAYLOAD_VERSION__2_4,
            self::PAYLOAD_VERSION__2_5,
            self::PAYLOAD_VERSION__2_6,
            self::PAYLOAD_VERSION__2_7,
            self::PAYLOAD_VERSION__2_8,
            self::PAYLOAD_VERSION__2_9,
            self::PAYLOAD_VERSION__2_10,
            self::PAYLOAD_VERSION__3_0,
            self::PAYLOAD_VERSION__3_1,
            self::PAYLOAD_VERSION__3_2,
            self::PAYLOAD_VERSION__3_3,
            self::PAYLOAD_VERSION__3_4,
            self::PAYLOAD_VERSION__3_5,
            self::PAYLOAD_VERSION__3_6,
            self::PAYLOAD_VERSION__3_7,
            self::PAYLOAD_VERSION__3_8,
            self::PAYLOAD_VERSION__3_9,
            self::PAYLOAD_VERSION__3_10,
            self::PAYLOAD_VERSION__4_0,
            self::PAYLOAD_VERSION__4_1,
            self::PAYLOAD_VERSION__4_2,
            self::PAYLOAD_VERSION__4_3,
            self::PAYLOAD_VERSION__4_4,
            self::PAYLOAD_VERSION__4_5,
            self::PAYLOAD_VERSION__4_6,
            self::PAYLOAD_VERSION__4_7,
            self::PAYLOAD_VERSION__4_8,
            self::PAYLOAD_VERSION__4_9,
            self::PAYLOAD_VERSION__4_10,
            self::PAYLOAD_VERSION__5_0,
            self::PAYLOAD_VERSION__5_1,
            self::PAYLOAD_VERSION__5_2,
            self::PAYLOAD_VERSION__5_3,
            self::PAYLOAD_VERSION__5_4,
            self::PAYLOAD_VERSION__5_5,
            self::PAYLOAD_VERSION__5_6,
            self::PAYLOAD_VERSION__5_7,
            self::PAYLOAD_VERSION__5_8,
            self::PAYLOAD_VERSION__5_9,
            self::PAYLOAD_VERSION__5_10,
            self::PAYLOAD_VERSION__6_0,
            self::PAYLOAD_VERSION__6_1,
            self::PAYLOAD_VERSION__6_2,
            self::PAYLOAD_VERSION__6_3,
            self::PAYLOAD_VERSION__6_4,
            self::PAYLOAD_VERSION__6_5,
            self::PAYLOAD_VERSION__6_6,
            self::PAYLOAD_VERSION__6_7,
            self::PAYLOAD_VERSION__6_8,
            self::PAYLOAD_VERSION__6_9,
            self::PAYLOAD_VERSION__6_10,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('actor', $data ?? [], null);
        $this->setIfExists('context', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('model_id', $data ?? [], null);
        $this->setIfExists('model_type', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('payload', $data ?? [], null);
        $this->setIfExists('payload_version', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['actor'] === null) {
            $invalidProperties[] = "'actor' can't be null";
        }
        if ($this->container['context'] === null) {
            $invalidProperties[] = "'context' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['model_id'] === null) {
            $invalidProperties[] = "'model_id' can't be null";
        }
        if ($this->container['model_type'] === null) {
            $invalidProperties[] = "'model_type' can't be null";
        }
        $allowedValues = $this->getModelTypeAllowableValues();
        if (!is_null($this->container['model_type']) && !in_array($this->container['model_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'model_type', must be one of '%s'",
                $this->container['model_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        if ($this->container['payload'] === null) {
            $invalidProperties[] = "'payload' can't be null";
        }
        if ($this->container['payload_version'] === null) {
            $invalidProperties[] = "'payload_version' can't be null";
        }
        $allowedValues = $this->getPayloadVersionAllowableValues();
        if (!is_null($this->container['payload_version']) && !in_array($this->container['payload_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payload_version', must be one of '%s'",
                $this->container['payload_version'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return \Ez128\Airtable\Model\AuditLogEventTypes
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param \Ez128\Airtable\Model\AuditLogEventTypes $action action
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets actor
     *
     * @return \Ez128\Airtable\Model\AuditLogActor
     */
    public function getActor()
    {
        return $this->container['actor'];
    }

    /**
     * Sets actor
     *
     * @param \Ez128\Airtable\Model\AuditLogActor $actor actor
     *
     * @return self
     */
    public function setActor($actor)
    {
        if (is_null($actor)) {
            throw new \InvalidArgumentException('non-nullable actor cannot be null');
        }
        $this->container['actor'] = $actor;

        return $this;
    }

    /**
     * Gets context
     *
     * @return \Ez128\Airtable\Model\AuditLogEvents200ResponseEventsInnerContext
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param \Ez128\Airtable\Model\AuditLogEvents200ResponseEventsInnerContext $context context
     *
     * @return self
     */
    public function setContext($context)
    {
        if (is_null($context)) {
            throw new \InvalidArgumentException('non-nullable context cannot be null');
        }
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets model_id
     *
     * @return string
     */
    public function getModelId()
    {
        return $this->container['model_id'];
    }

    /**
     * Sets model_id
     *
     * @param string $model_id model_id
     *
     * @return self
     */
    public function setModelId($model_id)
    {
        if (is_null($model_id)) {
            throw new \InvalidArgumentException('non-nullable model_id cannot be null');
        }
        $this->container['model_id'] = $model_id;

        return $this;
    }

    /**
     * Gets model_type
     *
     * @return string
     */
    public function getModelType()
    {
        return $this->container['model_type'];
    }

    /**
     * Sets model_type
     *
     * @param string $model_type model_type
     *
     * @return self
     */
    public function setModelType($model_type)
    {
        if (is_null($model_type)) {
            throw new \InvalidArgumentException('non-nullable model_type cannot be null');
        }
        $allowedValues = $this->getModelTypeAllowableValues();
        if (!in_array($model_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'model_type', must be one of '%s'",
                    $model_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['model_type'] = $model_type;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return \Ez128\Airtable\Model\AuditLogEvents200ResponseEventsInnerOrigin
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \Ez128\Airtable\Model\AuditLogEvents200ResponseEventsInnerOrigin $origin origin
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets payload
     *
     * @return array<string,mixed>
     */
    public function getPayload()
    {
        return $this->container['payload'];
    }

    /**
     * Sets payload
     *
     * @param array<string,mixed> $payload payload
     *
     * @return self
     */
    public function setPayload($payload)
    {
        if (is_null($payload)) {
            throw new \InvalidArgumentException('non-nullable payload cannot be null');
        }
        $this->container['payload'] = $payload;

        return $this;
    }

    /**
     * Gets payload_version
     *
     * @return string
     */
    public function getPayloadVersion()
    {
        return $this->container['payload_version'];
    }

    /**
     * Sets payload_version
     *
     * @param string $payload_version payload_version
     *
     * @return self
     */
    public function setPayloadVersion($payload_version)
    {
        if (is_null($payload_version)) {
            throw new \InvalidArgumentException('non-nullable payload_version cannot be null');
        }
        $allowedValues = $this->getPayloadVersionAllowableValues();
        if (!in_array($payload_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payload_version', must be one of '%s'",
                    $payload_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payload_version'] = $payload_version;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp A date timestamp in the ISO format, eg:\"2018-01-01T00:00:00.000Z\"
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


