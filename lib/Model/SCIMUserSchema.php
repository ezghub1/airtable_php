<?php
/**
 * SCIMUserSchema
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ez128\Airtable\Model;

use \ArrayAccess;
use \Ez128\Airtable\ObjectSerializer;

/**
 * SCIMUserSchema Class Doc Comment
 *
 * @category Class
 * @description [SCIM User](https://datatracker.ietf.org/doc/html/rfc7643#section-4.1) objects with optional user metadata.  See [SCIM Field Types](/api/scim-overview#scim-user-objects) for more information about optional user metadata.
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SCIMUserSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SCIM-user-schema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'addresses' => '\Ez128\Airtable\Model\SCIMUserSchemaAddressesInner[]',
        'display_name' => 'string',
        'emails' => '\Ez128\Airtable\Model\SCIMUserSchemaEmailsInner[]',
        'entitlements' => 'mixed[]',
        'external_id' => 'string',
        'groups' => '\Ez128\Airtable\Model\SCIMUserSchemaGroupsInner[]',
        'id' => 'string',
        'ims' => '\Ez128\Airtable\Model\SCIMUserSchemaEmailsInner[]',
        'locale' => 'string',
        'meta' => 'mixed',
        'name' => '\Ez128\Airtable\Model\SCIMUserSchemaName',
        'nick_name' => 'string',
        'password' => 'string',
        'phone_numbers' => '\Ez128\Airtable\Model\SCIMUserSchemaEmailsInner[]',
        'photos' => '\Ez128\Airtable\Model\SCIMUserSchemaPhotosInner[]',
        'preferred_language' => 'string',
        'profile_url' => 'string',
        'roles' => 'mixed[]',
        'schemas' => 'string[]',
        'timezone' => 'string',
        'title' => 'string',
        'urn_ietf_params_scim_schemas_extension_enterprise_2_0_user' => '\Ez128\Airtable\Model\SCIMUserSchemaUrnIetfParamsScimSchemasExtensionEnterprise20User',
        'user_name' => 'string',
        'user_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'addresses' => null,
        'display_name' => null,
        'emails' => null,
        'entitlements' => null,
        'external_id' => null,
        'groups' => null,
        'id' => null,
        'ims' => null,
        'locale' => null,
        'meta' => null,
        'name' => null,
        'nick_name' => null,
        'password' => null,
        'phone_numbers' => null,
        'photos' => null,
        'preferred_language' => null,
        'profile_url' => null,
        'roles' => null,
        'schemas' => null,
        'timezone' => null,
        'title' => null,
        'urn_ietf_params_scim_schemas_extension_enterprise_2_0_user' => null,
        'user_name' => null,
        'user_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'active' => true,
        'addresses' => true,
        'display_name' => true,
        'emails' => true,
        'entitlements' => true,
        'external_id' => true,
        'groups' => true,
        'id' => false,
        'ims' => true,
        'locale' => true,
        'meta' => true,
        'name' => true,
        'nick_name' => true,
        'password' => true,
        'phone_numbers' => true,
        'photos' => true,
        'preferred_language' => true,
        'profile_url' => true,
        'roles' => true,
        'schemas' => false,
        'timezone' => true,
        'title' => true,
        'urn_ietf_params_scim_schemas_extension_enterprise_2_0_user' => true,
        'user_name' => false,
        'user_type' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'addresses' => 'addresses',
        'display_name' => 'displayName',
        'emails' => 'emails',
        'entitlements' => 'entitlements',
        'external_id' => 'externalId',
        'groups' => 'groups',
        'id' => 'id',
        'ims' => 'ims',
        'locale' => 'locale',
        'meta' => 'meta',
        'name' => 'name',
        'nick_name' => 'nickName',
        'password' => 'password',
        'phone_numbers' => 'phoneNumbers',
        'photos' => 'photos',
        'preferred_language' => 'preferredLanguage',
        'profile_url' => 'profileUrl',
        'roles' => 'roles',
        'schemas' => 'schemas',
        'timezone' => 'timezone',
        'title' => 'title',
        'urn_ietf_params_scim_schemas_extension_enterprise_2_0_user' => 'urn:ietf:params:scim:schemas:extension:enterprise:2.0:User',
        'user_name' => 'userName',
        'user_type' => 'userType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'addresses' => 'setAddresses',
        'display_name' => 'setDisplayName',
        'emails' => 'setEmails',
        'entitlements' => 'setEntitlements',
        'external_id' => 'setExternalId',
        'groups' => 'setGroups',
        'id' => 'setId',
        'ims' => 'setIms',
        'locale' => 'setLocale',
        'meta' => 'setMeta',
        'name' => 'setName',
        'nick_name' => 'setNickName',
        'password' => 'setPassword',
        'phone_numbers' => 'setPhoneNumbers',
        'photos' => 'setPhotos',
        'preferred_language' => 'setPreferredLanguage',
        'profile_url' => 'setProfileUrl',
        'roles' => 'setRoles',
        'schemas' => 'setSchemas',
        'timezone' => 'setTimezone',
        'title' => 'setTitle',
        'urn_ietf_params_scim_schemas_extension_enterprise_2_0_user' => 'setUrnIetfParamsScimSchemasExtensionEnterprise20User',
        'user_name' => 'setUserName',
        'user_type' => 'setUserType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'addresses' => 'getAddresses',
        'display_name' => 'getDisplayName',
        'emails' => 'getEmails',
        'entitlements' => 'getEntitlements',
        'external_id' => 'getExternalId',
        'groups' => 'getGroups',
        'id' => 'getId',
        'ims' => 'getIms',
        'locale' => 'getLocale',
        'meta' => 'getMeta',
        'name' => 'getName',
        'nick_name' => 'getNickName',
        'password' => 'getPassword',
        'phone_numbers' => 'getPhoneNumbers',
        'photos' => 'getPhotos',
        'preferred_language' => 'getPreferredLanguage',
        'profile_url' => 'getProfileUrl',
        'roles' => 'getRoles',
        'schemas' => 'getSchemas',
        'timezone' => 'getTimezone',
        'title' => 'getTitle',
        'urn_ietf_params_scim_schemas_extension_enterprise_2_0_user' => 'getUrnIetfParamsScimSchemasExtensionEnterprise20User',
        'user_name' => 'getUserName',
        'user_type' => 'getUserType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('emails', $data ?? [], null);
        $this->setIfExists('entitlements', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('ims', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('meta', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('nick_name', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('phone_numbers', $data ?? [], null);
        $this->setIfExists('photos', $data ?? [], null);
        $this->setIfExists('preferred_language', $data ?? [], null);
        $this->setIfExists('profile_url', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('schemas', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('urn_ietf_params_scim_schemas_extension_enterprise_2_0_user', $data ?? [], null);
        $this->setIfExists('user_name', $data ?? [], null);
        $this->setIfExists('user_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['schemas'] === null) {
            $invalidProperties[] = "'schemas' can't be null";
        }
        if ($this->container['user_name'] === null) {
            $invalidProperties[] = "'user_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Indicates if the user is active or deactivated.  Setting this is possible via the put and patch endpoints.
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            array_push($this->openAPINullablesSetToNull, 'active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Ez128\Airtable\Model\SCIMUserSchemaAddressesInner[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Ez128\Airtable\Model\SCIMUserSchemaAddressesInner[]|null $addresses addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            array_push($this->openAPINullablesSetToNull, 'addresses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addresses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            array_push($this->openAPINullablesSetToNull, 'display_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('display_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \Ez128\Airtable\Model\SCIMUserSchemaEmailsInner[]|null
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \Ez128\Airtable\Model\SCIMUserSchemaEmailsInner[]|null $emails emails
     *
     * @return self
     */
    public function setEmails($emails)
    {
        if (is_null($emails)) {
            array_push($this->openAPINullablesSetToNull, 'emails');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emails', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets entitlements
     *
     * @return mixed[]|null
     */
    public function getEntitlements()
    {
        return $this->container['entitlements'];
    }

    /**
     * Sets entitlements
     *
     * @param mixed[]|null $entitlements entitlements
     *
     * @return self
     */
    public function setEntitlements($entitlements)
    {
        if (is_null($entitlements)) {
            array_push($this->openAPINullablesSetToNull, 'entitlements');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('entitlements', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['entitlements'] = $entitlements;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Provisioning client defined identifier.
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \Ez128\Airtable\Model\SCIMUserSchemaGroupsInner[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \Ez128\Airtable\Model\SCIMUserSchemaGroupsInner[]|null $groups groups
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            array_push($this->openAPINullablesSetToNull, 'groups');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('groups', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Airtable's unique user ID for this user.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ims
     *
     * @return \Ez128\Airtable\Model\SCIMUserSchemaEmailsInner[]|null
     */
    public function getIms()
    {
        return $this->container['ims'];
    }

    /**
     * Sets ims
     *
     * @param \Ez128\Airtable\Model\SCIMUserSchemaEmailsInner[]|null $ims ims
     *
     * @return self
     */
    public function setIms($ims)
    {
        if (is_null($ims)) {
            array_push($this->openAPINullablesSetToNull, 'ims');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ims', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ims'] = $ims;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            array_push($this->openAPINullablesSetToNull, 'locale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return mixed|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param mixed|null $meta meta
     *
     * @return self
     */
    public function setMeta($meta)
    {
        if (is_null($meta)) {
            array_push($this->openAPINullablesSetToNull, 'meta');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meta', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Ez128\Airtable\Model\SCIMUserSchemaName|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Ez128\Airtable\Model\SCIMUserSchemaName|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nick_name
     *
     * @return string|null
     */
    public function getNickName()
    {
        return $this->container['nick_name'];
    }

    /**
     * Sets nick_name
     *
     * @param string|null $nick_name nick_name
     *
     * @return self
     */
    public function setNickName($nick_name)
    {
        if (is_null($nick_name)) {
            array_push($this->openAPINullablesSetToNull, 'nick_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nick_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nick_name'] = $nick_name;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            array_push($this->openAPINullablesSetToNull, 'password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets phone_numbers
     *
     * @return \Ez128\Airtable\Model\SCIMUserSchemaEmailsInner[]|null
     */
    public function getPhoneNumbers()
    {
        return $this->container['phone_numbers'];
    }

    /**
     * Sets phone_numbers
     *
     * @param \Ez128\Airtable\Model\SCIMUserSchemaEmailsInner[]|null $phone_numbers phone_numbers
     *
     * @return self
     */
    public function setPhoneNumbers($phone_numbers)
    {
        if (is_null($phone_numbers)) {
            array_push($this->openAPINullablesSetToNull, 'phone_numbers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_numbers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone_numbers'] = $phone_numbers;

        return $this;
    }

    /**
     * Gets photos
     *
     * @return \Ez128\Airtable\Model\SCIMUserSchemaPhotosInner[]|null
     */
    public function getPhotos()
    {
        return $this->container['photos'];
    }

    /**
     * Sets photos
     *
     * @param \Ez128\Airtable\Model\SCIMUserSchemaPhotosInner[]|null $photos photos
     *
     * @return self
     */
    public function setPhotos($photos)
    {
        if (is_null($photos)) {
            array_push($this->openAPINullablesSetToNull, 'photos');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('photos', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['photos'] = $photos;

        return $this;
    }

    /**
     * Gets preferred_language
     *
     * @return string|null
     */
    public function getPreferredLanguage()
    {
        return $this->container['preferred_language'];
    }

    /**
     * Sets preferred_language
     *
     * @param string|null $preferred_language preferred_language
     *
     * @return self
     */
    public function setPreferredLanguage($preferred_language)
    {
        if (is_null($preferred_language)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferred_language'] = $preferred_language;

        return $this;
    }

    /**
     * Gets profile_url
     *
     * @return string|null
     */
    public function getProfileUrl()
    {
        return $this->container['profile_url'];
    }

    /**
     * Sets profile_url
     *
     * @param string|null $profile_url profile_url
     *
     * @return self
     */
    public function setProfileUrl($profile_url)
    {
        if (is_null($profile_url)) {
            array_push($this->openAPINullablesSetToNull, 'profile_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profile_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profile_url'] = $profile_url;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return mixed[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param mixed[]|null $roles roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            array_push($this->openAPINullablesSetToNull, 'roles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roles', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets schemas
     *
     * @return string[]
     */
    public function getSchemas()
    {
        return $this->container['schemas'];
    }

    /**
     * Sets schemas
     *
     * @param string[] $schemas A list of schemas, including at least SCIM's core user schema URI.  You can add the [enterprise extension](https://datatracker.ietf.org/doc/html/rfc7643#section-4.3) schema URI if you want to send extra properties for reporting.  See the optional user metadata table for details.
     *
     * @return self
     */
    public function setSchemas($schemas)
    {
        if (is_null($schemas)) {
            throw new \InvalidArgumentException('non-nullable schemas cannot be null');
        }
        $this->container['schemas'] = $schemas;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            array_push($this->openAPINullablesSetToNull, 'timezone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timezone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets urn_ietf_params_scim_schemas_extension_enterprise_2_0_user
     *
     * @return \Ez128\Airtable\Model\SCIMUserSchemaUrnIetfParamsScimSchemasExtensionEnterprise20User|null
     */
    public function getUrnIetfParamsScimSchemasExtensionEnterprise20User()
    {
        return $this->container['urn_ietf_params_scim_schemas_extension_enterprise_2_0_user'];
    }

    /**
     * Sets urn_ietf_params_scim_schemas_extension_enterprise_2_0_user
     *
     * @param \Ez128\Airtable\Model\SCIMUserSchemaUrnIetfParamsScimSchemasExtensionEnterprise20User|null $urn_ietf_params_scim_schemas_extension_enterprise_2_0_user urn_ietf_params_scim_schemas_extension_enterprise_2_0_user
     *
     * @return self
     */
    public function setUrnIetfParamsScimSchemasExtensionEnterprise20User($urn_ietf_params_scim_schemas_extension_enterprise_2_0_user)
    {
        if (is_null($urn_ietf_params_scim_schemas_extension_enterprise_2_0_user)) {
            array_push($this->openAPINullablesSetToNull, 'urn_ietf_params_scim_schemas_extension_enterprise_2_0_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('urn_ietf_params_scim_schemas_extension_enterprise_2_0_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['urn_ietf_params_scim_schemas_extension_enterprise_2_0_user'] = $urn_ietf_params_scim_schemas_extension_enterprise_2_0_user;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name Becomes the \"email\" field in Airtable. It must not be in use already, and the email's domain must match the enterprise account.
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        if (is_null($user_name)) {
            throw new \InvalidArgumentException('non-nullable user_name cannot be null');
        }
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets user_type
     *
     * @return string|null
     */
    public function getUserType()
    {
        return $this->container['user_type'];
    }

    /**
     * Sets user_type
     *
     * @param string|null $user_type user_type
     *
     * @return self
     */
    public function setUserType($user_type)
    {
        if (is_null($user_type)) {
            array_push($this->openAPINullablesSetToNull, 'user_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_type'] = $user_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


