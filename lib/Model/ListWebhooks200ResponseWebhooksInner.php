<?php
/**
 * ListWebhooks200ResponseWebhooksInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ez128\Airtable\Model;

use \ArrayAccess;
use \Ez128\Airtable\ObjectSerializer;

/**
 * ListWebhooks200ResponseWebhooksInner Class Doc Comment
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListWebhooks200ResponseWebhooksInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'list_webhooks_200_response_webhooks_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'are_notifications_enabled' => 'bool',
        'cursor_for_next_payload' => 'float',
        'expiration_time' => 'string',
        'id' => 'string',
        'is_hook_enabled' => 'bool',
        'last_notification_result' => '\Ez128\Airtable\Model\WebhooksNotification',
        'last_successful_notification_time' => 'string',
        'notification_url' => 'string',
        'specification' => '\Ez128\Airtable\Model\ListWebhooks200ResponseWebhooksInnerSpecification'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'are_notifications_enabled' => null,
        'cursor_for_next_payload' => null,
        'expiration_time' => null,
        'id' => null,
        'is_hook_enabled' => null,
        'last_notification_result' => null,
        'last_successful_notification_time' => null,
        'notification_url' => null,
        'specification' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'are_notifications_enabled' => false,
        'cursor_for_next_payload' => false,
        'expiration_time' => false,
        'id' => false,
        'is_hook_enabled' => false,
        'last_notification_result' => true,
        'last_successful_notification_time' => true,
        'notification_url' => true,
        'specification' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'are_notifications_enabled' => 'areNotificationsEnabled',
        'cursor_for_next_payload' => 'cursorForNextPayload',
        'expiration_time' => 'expirationTime',
        'id' => 'id',
        'is_hook_enabled' => 'isHookEnabled',
        'last_notification_result' => 'lastNotificationResult',
        'last_successful_notification_time' => 'lastSuccessfulNotificationTime',
        'notification_url' => 'notificationUrl',
        'specification' => 'specification'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'are_notifications_enabled' => 'setAreNotificationsEnabled',
        'cursor_for_next_payload' => 'setCursorForNextPayload',
        'expiration_time' => 'setExpirationTime',
        'id' => 'setId',
        'is_hook_enabled' => 'setIsHookEnabled',
        'last_notification_result' => 'setLastNotificationResult',
        'last_successful_notification_time' => 'setLastSuccessfulNotificationTime',
        'notification_url' => 'setNotificationUrl',
        'specification' => 'setSpecification'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'are_notifications_enabled' => 'getAreNotificationsEnabled',
        'cursor_for_next_payload' => 'getCursorForNextPayload',
        'expiration_time' => 'getExpirationTime',
        'id' => 'getId',
        'is_hook_enabled' => 'getIsHookEnabled',
        'last_notification_result' => 'getLastNotificationResult',
        'last_successful_notification_time' => 'getLastSuccessfulNotificationTime',
        'notification_url' => 'getNotificationUrl',
        'specification' => 'getSpecification'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('are_notifications_enabled', $data ?? [], null);
        $this->setIfExists('cursor_for_next_payload', $data ?? [], null);
        $this->setIfExists('expiration_time', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_hook_enabled', $data ?? [], null);
        $this->setIfExists('last_notification_result', $data ?? [], null);
        $this->setIfExists('last_successful_notification_time', $data ?? [], null);
        $this->setIfExists('notification_url', $data ?? [], null);
        $this->setIfExists('specification', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['are_notifications_enabled'] === null) {
            $invalidProperties[] = "'are_notifications_enabled' can't be null";
        }
        if ($this->container['cursor_for_next_payload'] === null) {
            $invalidProperties[] = "'cursor_for_next_payload' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['is_hook_enabled'] === null) {
            $invalidProperties[] = "'is_hook_enabled' can't be null";
        }
        if ($this->container['last_notification_result'] === null) {
            $invalidProperties[] = "'last_notification_result' can't be null";
        }
        if ($this->container['last_successful_notification_time'] === null) {
            $invalidProperties[] = "'last_successful_notification_time' can't be null";
        }
        if ($this->container['notification_url'] === null) {
            $invalidProperties[] = "'notification_url' can't be null";
        }
        if ($this->container['specification'] === null) {
            $invalidProperties[] = "'specification' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets are_notifications_enabled
     *
     * @return bool
     */
    public function getAreNotificationsEnabled()
    {
        return $this->container['are_notifications_enabled'];
    }

    /**
     * Sets are_notifications_enabled
     *
     * @param bool $are_notifications_enabled Whether or not notifications are enabled for the webhook.
     *
     * @return self
     */
    public function setAreNotificationsEnabled($are_notifications_enabled)
    {
        if (is_null($are_notifications_enabled)) {
            throw new \InvalidArgumentException('non-nullable are_notifications_enabled cannot be null');
        }
        $this->container['are_notifications_enabled'] = $are_notifications_enabled;

        return $this;
    }

    /**
     * Gets cursor_for_next_payload
     *
     * @return float
     */
    public function getCursorForNextPayload()
    {
        return $this->container['cursor_for_next_payload'];
    }

    /**
     * Sets cursor_for_next_payload
     *
     * @param float $cursor_for_next_payload The cursor associated with the next payload that will be generated. This cursor will increase every time a new payload is generated for this webhook.
     *
     * @return self
     */
    public function setCursorForNextPayload($cursor_for_next_payload)
    {
        if (is_null($cursor_for_next_payload)) {
            throw new \InvalidArgumentException('non-nullable cursor_for_next_payload cannot be null');
        }
        $this->container['cursor_for_next_payload'] = $cursor_for_next_payload;

        return $this;
    }

    /**
     * Gets expiration_time
     *
     * @return string|null
     */
    public function getExpirationTime()
    {
        return $this->container['expiration_time'];
    }

    /**
     * Sets expiration_time
     *
     * @param string|null $expiration_time The time when the webhook expires and is disabled in the ISO format. The webhook will not expire if this is null (in the case User API keys are used)
     *
     * @return self
     */
    public function setExpirationTime($expiration_time)
    {
        if (is_null($expiration_time)) {
            throw new \InvalidArgumentException('non-nullable expiration_time cannot be null');
        }
        $this->container['expiration_time'] = $expiration_time;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id An identifier for the webhook (WebhookId).
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_hook_enabled
     *
     * @return bool
     */
    public function getIsHookEnabled()
    {
        return $this->container['is_hook_enabled'];
    }

    /**
     * Sets is_hook_enabled
     *
     * @param bool $is_hook_enabled Whether or not the webhook is enabled. Webhooks may be turned off automatically such as when the specification becomes invalid. [See error codes](/api/model/webhooks-payload).
     *
     * @return self
     */
    public function setIsHookEnabled($is_hook_enabled)
    {
        if (is_null($is_hook_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_hook_enabled cannot be null');
        }
        $this->container['is_hook_enabled'] = $is_hook_enabled;

        return $this;
    }

    /**
     * Gets last_notification_result
     *
     * @return \Ez128\Airtable\Model\WebhooksNotification
     */
    public function getLastNotificationResult()
    {
        return $this->container['last_notification_result'];
    }

    /**
     * Sets last_notification_result
     *
     * @param \Ez128\Airtable\Model\WebhooksNotification $last_notification_result last_notification_result
     *
     * @return self
     */
    public function setLastNotificationResult($last_notification_result)
    {
        if (is_null($last_notification_result)) {
            array_push($this->openAPINullablesSetToNull, 'last_notification_result');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_notification_result', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_notification_result'] = $last_notification_result;

        return $this;
    }

    /**
     * Gets last_successful_notification_time
     *
     * @return string
     */
    public function getLastSuccessfulNotificationTime()
    {
        return $this->container['last_successful_notification_time'];
    }

    /**
     * Sets last_successful_notification_time
     *
     * @param string $last_successful_notification_time An identifier for the created webhook.
     *
     * @return self
     */
    public function setLastSuccessfulNotificationTime($last_successful_notification_time)
    {
        if (is_null($last_successful_notification_time)) {
            array_push($this->openAPINullablesSetToNull, 'last_successful_notification_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_successful_notification_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_successful_notification_time'] = $last_successful_notification_time;

        return $this;
    }

    /**
     * Gets notification_url
     *
     * @return string
     */
    public function getNotificationUrl()
    {
        return $this->container['notification_url'];
    }

    /**
     * Sets notification_url
     *
     * @param string $notification_url The url registered with the webhook. May be null if none was given.
     *
     * @return self
     */
    public function setNotificationUrl($notification_url)
    {
        if (is_null($notification_url)) {
            array_push($this->openAPINullablesSetToNull, 'notification_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notification_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notification_url'] = $notification_url;

        return $this;
    }

    /**
     * Gets specification
     *
     * @return \Ez128\Airtable\Model\ListWebhooks200ResponseWebhooksInnerSpecification
     */
    public function getSpecification()
    {
        return $this->container['specification'];
    }

    /**
     * Sets specification
     *
     * @param \Ez128\Airtable\Model\ListWebhooks200ResponseWebhooksInnerSpecification $specification specification
     *
     * @return self
     */
    public function setSpecification($specification)
    {
        if (is_null($specification)) {
            throw new \InvalidArgumentException('non-nullable specification cannot be null');
        }
        $this->container['specification'] = $specification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


