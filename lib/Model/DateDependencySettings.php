<?php
/**
 * DateDependencySettings
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ez128\Airtable\Model;

use \ArrayAccess;
use \Ez128\Airtable\ObjectSerializer;

/**
 * DateDependencySettings Class Doc Comment
 *
 * @category Class
 * @description Configuration for a table&#39;s date dependency settings.
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DateDependencySettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Date-Dependency-Settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'duration_field_id' => 'string',
        'end_date_field_id' => 'string',
        'holidays' => 'string[]',
        'is_enabled' => 'bool',
        'predecessor_field_id' => 'string',
        'rescheduling_mode' => 'string',
        'should_skip_weekends_and_holidays' => 'bool',
        'start_date_field_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'duration_field_id' => null,
        'end_date_field_id' => null,
        'holidays' => null,
        'is_enabled' => null,
        'predecessor_field_id' => null,
        'rescheduling_mode' => null,
        'should_skip_weekends_and_holidays' => null,
        'start_date_field_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'duration_field_id' => false,
        'end_date_field_id' => false,
        'holidays' => false,
        'is_enabled' => false,
        'predecessor_field_id' => true,
        'rescheduling_mode' => false,
        'should_skip_weekends_and_holidays' => false,
        'start_date_field_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'duration_field_id' => 'durationFieldId',
        'end_date_field_id' => 'endDateFieldId',
        'holidays' => 'holidays',
        'is_enabled' => 'isEnabled',
        'predecessor_field_id' => 'predecessorFieldId',
        'rescheduling_mode' => 'reschedulingMode',
        'should_skip_weekends_and_holidays' => 'shouldSkipWeekendsAndHolidays',
        'start_date_field_id' => 'startDateFieldId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'duration_field_id' => 'setDurationFieldId',
        'end_date_field_id' => 'setEndDateFieldId',
        'holidays' => 'setHolidays',
        'is_enabled' => 'setIsEnabled',
        'predecessor_field_id' => 'setPredecessorFieldId',
        'rescheduling_mode' => 'setReschedulingMode',
        'should_skip_weekends_and_holidays' => 'setShouldSkipWeekendsAndHolidays',
        'start_date_field_id' => 'setStartDateFieldId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'duration_field_id' => 'getDurationFieldId',
        'end_date_field_id' => 'getEndDateFieldId',
        'holidays' => 'getHolidays',
        'is_enabled' => 'getIsEnabled',
        'predecessor_field_id' => 'getPredecessorFieldId',
        'rescheduling_mode' => 'getReschedulingMode',
        'should_skip_weekends_and_holidays' => 'getShouldSkipWeekendsAndHolidays',
        'start_date_field_id' => 'getStartDateFieldId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RESCHEDULING_MODE_FLEXIBLE = 'flexible';
    public const RESCHEDULING_MODE_FIXED = 'fixed';
    public const RESCHEDULING_MODE_NONE = 'none';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReschedulingModeAllowableValues()
    {
        return [
            self::RESCHEDULING_MODE_FLEXIBLE,
            self::RESCHEDULING_MODE_FIXED,
            self::RESCHEDULING_MODE_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('duration_field_id', $data ?? [], null);
        $this->setIfExists('end_date_field_id', $data ?? [], null);
        $this->setIfExists('holidays', $data ?? [], null);
        $this->setIfExists('is_enabled', $data ?? [], null);
        $this->setIfExists('predecessor_field_id', $data ?? [], null);
        $this->setIfExists('rescheduling_mode', $data ?? [], null);
        $this->setIfExists('should_skip_weekends_and_holidays', $data ?? [], null);
        $this->setIfExists('start_date_field_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['duration_field_id'] === null) {
            $invalidProperties[] = "'duration_field_id' can't be null";
        }
        if ($this->container['end_date_field_id'] === null) {
            $invalidProperties[] = "'end_date_field_id' can't be null";
        }
        if ($this->container['holidays'] === null) {
            $invalidProperties[] = "'holidays' can't be null";
        }
        if ($this->container['is_enabled'] === null) {
            $invalidProperties[] = "'is_enabled' can't be null";
        }
        if ($this->container['predecessor_field_id'] === null) {
            $invalidProperties[] = "'predecessor_field_id' can't be null";
        }
        if ($this->container['rescheduling_mode'] === null) {
            $invalidProperties[] = "'rescheduling_mode' can't be null";
        }
        $allowedValues = $this->getReschedulingModeAllowableValues();
        if (!is_null($this->container['rescheduling_mode']) && !in_array($this->container['rescheduling_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rescheduling_mode', must be one of '%s'",
                $this->container['rescheduling_mode'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['should_skip_weekends_and_holidays'] === null) {
            $invalidProperties[] = "'should_skip_weekends_and_holidays' can't be null";
        }
        if ($this->container['start_date_field_id'] === null) {
            $invalidProperties[] = "'start_date_field_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets duration_field_id
     *
     * @return string
     */
    public function getDurationFieldId()
    {
        return $this->container['duration_field_id'];
    }

    /**
     * Sets duration_field_id
     *
     * @param string $duration_field_id Must be an editable number field with unit in days.
     *
     * @return self
     */
    public function setDurationFieldId($duration_field_id)
    {
        if (is_null($duration_field_id)) {
            throw new \InvalidArgumentException('non-nullable duration_field_id cannot be null');
        }
        $this->container['duration_field_id'] = $duration_field_id;

        return $this;
    }

    /**
     * Gets end_date_field_id
     *
     * @return string
     */
    public function getEndDateFieldId()
    {
        return $this->container['end_date_field_id'];
    }

    /**
     * Sets end_date_field_id
     *
     * @param string $end_date_field_id Must be an editable Date field.
     *
     * @return self
     */
    public function setEndDateFieldId($end_date_field_id)
    {
        if (is_null($end_date_field_id)) {
            throw new \InvalidArgumentException('non-nullable end_date_field_id cannot be null');
        }
        $this->container['end_date_field_id'] = $end_date_field_id;

        return $this;
    }

    /**
     * Gets holidays
     *
     * @return string[]
     */
    public function getHolidays()
    {
        return $this->container['holidays'];
    }

    /**
     * Sets holidays
     *
     * @param string[] $holidays Set of holidays dates to skip when recalculating. Each date should be ISO-formatted. Has no effect if shouldSkipWeekendsAndHolidays is false.
     *
     * @return self
     */
    public function setHolidays($holidays)
    {
        if (is_null($holidays)) {
            throw new \InvalidArgumentException('non-nullable holidays cannot be null');
        }
        $this->container['holidays'] = $holidays;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool $is_enabled Whether the date dependency settings are enabled.
     *
     * @return self
     */
    public function setIsEnabled($is_enabled)
    {
        if (is_null($is_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_enabled cannot be null');
        }
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets predecessor_field_id
     *
     * @return string
     */
    public function getPredecessorFieldId()
    {
        return $this->container['predecessor_field_id'];
    }

    /**
     * Sets predecessor_field_id
     *
     * @param string $predecessor_field_id predecessor_field_id
     *
     * @return self
     */
    public function setPredecessorFieldId($predecessor_field_id)
    {
        if (is_null($predecessor_field_id)) {
            array_push($this->openAPINullablesSetToNull, 'predecessor_field_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('predecessor_field_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['predecessor_field_id'] = $predecessor_field_id;

        return $this;
    }

    /**
     * Gets rescheduling_mode
     *
     * @return string
     */
    public function getReschedulingMode()
    {
        return $this->container['rescheduling_mode'];
    }

    /**
     * Sets rescheduling_mode
     *
     * @param string $rescheduling_mode Determines how tasks are rescheduled relative to their predecessors. [See support article](https://support.airtable.com/docs/date-dependencies-in-airtable#supported-date-dependency-behavior-in-airtable) for more.
     *
     * @return self
     */
    public function setReschedulingMode($rescheduling_mode)
    {
        if (is_null($rescheduling_mode)) {
            throw new \InvalidArgumentException('non-nullable rescheduling_mode cannot be null');
        }
        $allowedValues = $this->getReschedulingModeAllowableValues();
        if (!in_array($rescheduling_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rescheduling_mode', must be one of '%s'",
                    $rescheduling_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rescheduling_mode'] = $rescheduling_mode;

        return $this;
    }

    /**
     * Gets should_skip_weekends_and_holidays
     *
     * @return bool
     */
    public function getShouldSkipWeekendsAndHolidays()
    {
        return $this->container['should_skip_weekends_and_holidays'];
    }

    /**
     * Sets should_skip_weekends_and_holidays
     *
     * @param bool $should_skip_weekends_and_holidays Whether to skip weekends and holidays when recalculating.
     *
     * @return self
     */
    public function setShouldSkipWeekendsAndHolidays($should_skip_weekends_and_holidays)
    {
        if (is_null($should_skip_weekends_and_holidays)) {
            throw new \InvalidArgumentException('non-nullable should_skip_weekends_and_holidays cannot be null');
        }
        $this->container['should_skip_weekends_and_holidays'] = $should_skip_weekends_and_holidays;

        return $this;
    }

    /**
     * Gets start_date_field_id
     *
     * @return string
     */
    public function getStartDateFieldId()
    {
        return $this->container['start_date_field_id'];
    }

    /**
     * Sets start_date_field_id
     *
     * @param string $start_date_field_id Must be an editable Date field.
     *
     * @return self
     */
    public function setStartDateFieldId($start_date_field_id)
    {
        if (is_null($start_date_field_id)) {
            throw new \InvalidArgumentException('non-nullable start_date_field_id cannot be null');
        }
        $this->container['start_date_field_id'] = $start_date_field_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


