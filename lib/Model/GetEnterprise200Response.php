<?php
/**
 * GetEnterprise200Response
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ez128\Airtable\Model;

use \ArrayAccess;
use \Ez128\Airtable\ObjectSerializer;

/**
 * GetEnterprise200Response Class Doc Comment
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetEnterprise200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_enterprise_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'aggregated' => '\Ez128\Airtable\Model\GetEnterprise200ResponseAggregated',
        'created_time' => 'string',
        'descendant_enterprise_account_ids' => 'string[]',
        'descendants' => 'array<string,\Ez128\Airtable\Model\GetEnterprise200ResponseDescendantsValue>',
        'email_domains' => '\Ez128\Airtable\Model\GetEnterprise200ResponseEmailDomainsInner[]',
        'group_ids' => 'string[]',
        'id' => 'string',
        'root_enterprise_account_id' => 'string',
        'user_ids' => 'string[]',
        'workspace_ids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'aggregated' => null,
        'created_time' => null,
        'descendant_enterprise_account_ids' => null,
        'descendants' => null,
        'email_domains' => null,
        'group_ids' => null,
        'id' => null,
        'root_enterprise_account_id' => null,
        'user_ids' => null,
        'workspace_ids' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'aggregated' => false,
        'created_time' => true,
        'descendant_enterprise_account_ids' => false,
        'descendants' => false,
        'email_domains' => false,
        'group_ids' => false,
        'id' => false,
        'root_enterprise_account_id' => false,
        'user_ids' => false,
        'workspace_ids' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aggregated' => 'aggregated',
        'created_time' => 'createdTime',
        'descendant_enterprise_account_ids' => 'descendantEnterpriseAccountIds',
        'descendants' => 'descendants',
        'email_domains' => 'emailDomains',
        'group_ids' => 'groupIds',
        'id' => 'id',
        'root_enterprise_account_id' => 'rootEnterpriseAccountId',
        'user_ids' => 'userIds',
        'workspace_ids' => 'workspaceIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aggregated' => 'setAggregated',
        'created_time' => 'setCreatedTime',
        'descendant_enterprise_account_ids' => 'setDescendantEnterpriseAccountIds',
        'descendants' => 'setDescendants',
        'email_domains' => 'setEmailDomains',
        'group_ids' => 'setGroupIds',
        'id' => 'setId',
        'root_enterprise_account_id' => 'setRootEnterpriseAccountId',
        'user_ids' => 'setUserIds',
        'workspace_ids' => 'setWorkspaceIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aggregated' => 'getAggregated',
        'created_time' => 'getCreatedTime',
        'descendant_enterprise_account_ids' => 'getDescendantEnterpriseAccountIds',
        'descendants' => 'getDescendants',
        'email_domains' => 'getEmailDomains',
        'group_ids' => 'getGroupIds',
        'id' => 'getId',
        'root_enterprise_account_id' => 'getRootEnterpriseAccountId',
        'user_ids' => 'getUserIds',
        'workspace_ids' => 'getWorkspaceIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('aggregated', $data ?? [], null);
        $this->setIfExists('created_time', $data ?? [], null);
        $this->setIfExists('descendant_enterprise_account_ids', $data ?? [], null);
        $this->setIfExists('descendants', $data ?? [], null);
        $this->setIfExists('email_domains', $data ?? [], null);
        $this->setIfExists('group_ids', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('root_enterprise_account_id', $data ?? [], null);
        $this->setIfExists('user_ids', $data ?? [], null);
        $this->setIfExists('workspace_ids', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['created_time'] === null) {
            $invalidProperties[] = "'created_time' can't be null";
        }
        if ($this->container['descendant_enterprise_account_ids'] === null) {
            $invalidProperties[] = "'descendant_enterprise_account_ids' can't be null";
        }
        if ($this->container['email_domains'] === null) {
            $invalidProperties[] = "'email_domains' can't be null";
        }
        if ($this->container['group_ids'] === null) {
            $invalidProperties[] = "'group_ids' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['root_enterprise_account_id'] === null) {
            $invalidProperties[] = "'root_enterprise_account_id' can't be null";
        }
        if ($this->container['user_ids'] === null) {
            $invalidProperties[] = "'user_ids' can't be null";
        }
        if ($this->container['workspace_ids'] === null) {
            $invalidProperties[] = "'workspace_ids' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aggregated
     *
     * @return \Ez128\Airtable\Model\GetEnterprise200ResponseAggregated|null
     */
    public function getAggregated()
    {
        return $this->container['aggregated'];
    }

    /**
     * Sets aggregated
     *
     * @param \Ez128\Airtable\Model\GetEnterprise200ResponseAggregated|null $aggregated aggregated
     *
     * @return self
     */
    public function setAggregated($aggregated)
    {
        if (is_null($aggregated)) {
            throw new \InvalidArgumentException('non-nullable aggregated cannot be null');
        }
        $this->container['aggregated'] = $aggregated;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return string
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param string $created_time A date timestamp in the ISO format, eg:\"2018-01-01T00:00:00.000Z\"
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        if (is_null($created_time)) {
            array_push($this->openAPINullablesSetToNull, 'created_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets descendant_enterprise_account_ids
     *
     * @return string[]
     */
    public function getDescendantEnterpriseAccountIds()
    {
        return $this->container['descendant_enterprise_account_ids'];
    }

    /**
     * Sets descendant_enterprise_account_ids
     *
     * @param string[] $descendant_enterprise_account_ids A list of descendant org unit's belonging to the enterprise account.
     *
     * @return self
     */
    public function setDescendantEnterpriseAccountIds($descendant_enterprise_account_ids)
    {
        if (is_null($descendant_enterprise_account_ids)) {
            throw new \InvalidArgumentException('non-nullable descendant_enterprise_account_ids cannot be null');
        }
        $this->container['descendant_enterprise_account_ids'] = $descendant_enterprise_account_ids;

        return $this;
    }

    /**
     * Gets descendants
     *
     * @return array<string,\Ez128\Airtable\Model\GetEnterprise200ResponseDescendantsValue>|null
     */
    public function getDescendants()
    {
        return $this->container['descendants'];
    }

    /**
     * Sets descendants
     *
     * @param array<string,\Ez128\Airtable\Model\GetEnterprise200ResponseDescendantsValue>|null $descendants The enterprise account values per descendant enterprise account. Only returned when the enterprise account has the Enterprise Hub feature enabled.
     *
     * @return self
     */
    public function setDescendants($descendants)
    {
        if (is_null($descendants)) {
            throw new \InvalidArgumentException('non-nullable descendants cannot be null');
        }
        $this->container['descendants'] = $descendants;

        return $this;
    }

    /**
     * Gets email_domains
     *
     * @return \Ez128\Airtable\Model\GetEnterprise200ResponseEmailDomainsInner[]
     */
    public function getEmailDomains()
    {
        return $this->container['email_domains'];
    }

    /**
     * Sets email_domains
     *
     * @param \Ez128\Airtable\Model\GetEnterprise200ResponseEmailDomainsInner[] $email_domains A list of email domains associated to the enterprise account.
     *
     * @return self
     */
    public function setEmailDomains($email_domains)
    {
        if (is_null($email_domains)) {
            throw new \InvalidArgumentException('non-nullable email_domains cannot be null');
        }
        $this->container['email_domains'] = $email_domains;

        return $this;
    }

    /**
     * Gets group_ids
     *
     * @return string[]
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     *
     * @param string[] $group_ids A list of groups that belong to the enterprise account.
     *
     * @return self
     */
    public function setGroupIds($group_ids)
    {
        if (is_null($group_ids)) {
            throw new \InvalidArgumentException('non-nullable group_ids cannot be null');
        }
        $this->container['group_ids'] = $group_ids;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets root_enterprise_account_id
     *
     * @return string
     */
    public function getRootEnterpriseAccountId()
    {
        return $this->container['root_enterprise_account_id'];
    }

    /**
     * Sets root_enterprise_account_id
     *
     * @param string $root_enterprise_account_id The ID of this account's root enterprise account. For accounts that are not part of an Enterprise Hub, this is the same as the account's own ID.
     *
     * @return self
     */
    public function setRootEnterpriseAccountId($root_enterprise_account_id)
    {
        if (is_null($root_enterprise_account_id)) {
            throw new \InvalidArgumentException('non-nullable root_enterprise_account_id cannot be null');
        }
        $this->container['root_enterprise_account_id'] = $root_enterprise_account_id;

        return $this;
    }

    /**
     * Gets user_ids
     *
     * @return string[]
     */
    public function getUserIds()
    {
        return $this->container['user_ids'];
    }

    /**
     * Sets user_ids
     *
     * @param string[] $user_ids A list of users including all the collaborators of all of the enterprise account's workspaces, bases, and interfaces.
     *
     * @return self
     */
    public function setUserIds($user_ids)
    {
        if (is_null($user_ids)) {
            throw new \InvalidArgumentException('non-nullable user_ids cannot be null');
        }
        $this->container['user_ids'] = $user_ids;

        return $this;
    }

    /**
     * Gets workspace_ids
     *
     * @return string[]
     */
    public function getWorkspaceIds()
    {
        return $this->container['workspace_ids'];
    }

    /**
     * Sets workspace_ids
     *
     * @param string[] $workspace_ids A list of workspaces that are managed by the enterprise account.
     *
     * @return self
     */
    public function setWorkspaceIds($workspace_ids)
    {
        if (is_null($workspace_ids)) {
            throw new \InvalidArgumentException('non-nullable workspace_ids cannot be null');
        }
        $this->container['workspace_ids'] = $workspace_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


