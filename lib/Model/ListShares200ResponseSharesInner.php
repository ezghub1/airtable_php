<?php
/**
 * ListShares200ResponseSharesInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ez128\Airtable\Model;

use \ArrayAccess;
use \Ez128\Airtable\ObjectSerializer;

/**
 * ListShares200ResponseSharesInner Class Doc Comment
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListShares200ResponseSharesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'list_shares_200_response_shares_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'block_installation_id' => 'string',
        'can_be_synced' => 'bool',
        'created_by_user_id' => 'string',
        'created_time' => 'string',
        'effective_email_domain_allow_list' => 'string[]',
        'is_password_protected' => 'bool',
        'restricted_to_email_domains' => 'string[]',
        'restricted_to_enterprise_members' => 'bool',
        'share_id' => 'string',
        'share_token_prefix' => 'string',
        'state' => 'string',
        'type' => 'string',
        'view_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'block_installation_id' => null,
        'can_be_synced' => null,
        'created_by_user_id' => null,
        'created_time' => null,
        'effective_email_domain_allow_list' => null,
        'is_password_protected' => null,
        'restricted_to_email_domains' => null,
        'restricted_to_enterprise_members' => null,
        'share_id' => null,
        'share_token_prefix' => null,
        'state' => null,
        'type' => null,
        'view_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'block_installation_id' => false,
        'can_be_synced' => false,
        'created_by_user_id' => true,
        'created_time' => true,
        'effective_email_domain_allow_list' => false,
        'is_password_protected' => false,
        'restricted_to_email_domains' => false,
        'restricted_to_enterprise_members' => false,
        'share_id' => false,
        'share_token_prefix' => false,
        'state' => false,
        'type' => false,
        'view_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'block_installation_id' => 'blockInstallationId',
        'can_be_synced' => 'canBeSynced',
        'created_by_user_id' => 'createdByUserId',
        'created_time' => 'createdTime',
        'effective_email_domain_allow_list' => 'effectiveEmailDomainAllowList',
        'is_password_protected' => 'isPasswordProtected',
        'restricted_to_email_domains' => 'restrictedToEmailDomains',
        'restricted_to_enterprise_members' => 'restrictedToEnterpriseMembers',
        'share_id' => 'shareId',
        'share_token_prefix' => 'shareTokenPrefix',
        'state' => 'state',
        'type' => 'type',
        'view_id' => 'viewId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'block_installation_id' => 'setBlockInstallationId',
        'can_be_synced' => 'setCanBeSynced',
        'created_by_user_id' => 'setCreatedByUserId',
        'created_time' => 'setCreatedTime',
        'effective_email_domain_allow_list' => 'setEffectiveEmailDomainAllowList',
        'is_password_protected' => 'setIsPasswordProtected',
        'restricted_to_email_domains' => 'setRestrictedToEmailDomains',
        'restricted_to_enterprise_members' => 'setRestrictedToEnterpriseMembers',
        'share_id' => 'setShareId',
        'share_token_prefix' => 'setShareTokenPrefix',
        'state' => 'setState',
        'type' => 'setType',
        'view_id' => 'setViewId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'block_installation_id' => 'getBlockInstallationId',
        'can_be_synced' => 'getCanBeSynced',
        'created_by_user_id' => 'getCreatedByUserId',
        'created_time' => 'getCreatedTime',
        'effective_email_domain_allow_list' => 'getEffectiveEmailDomainAllowList',
        'is_password_protected' => 'getIsPasswordProtected',
        'restricted_to_email_domains' => 'getRestrictedToEmailDomains',
        'restricted_to_enterprise_members' => 'getRestrictedToEnterpriseMembers',
        'share_id' => 'getShareId',
        'share_token_prefix' => 'getShareTokenPrefix',
        'state' => 'getState',
        'type' => 'getType',
        'view_id' => 'getViewId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_ENABLED = 'enabled';
    public const STATE_DISABLED = 'disabled';
    public const TYPE_BASE = 'base';
    public const TYPE_VIEW = 'view';
    public const TYPE_BLOCK_INSTALLATION = 'blockInstallation';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ENABLED,
            self::STATE_DISABLED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BASE,
            self::TYPE_VIEW,
            self::TYPE_BLOCK_INSTALLATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('block_installation_id', $data ?? [], null);
        $this->setIfExists('can_be_synced', $data ?? [], null);
        $this->setIfExists('created_by_user_id', $data ?? [], null);
        $this->setIfExists('created_time', $data ?? [], null);
        $this->setIfExists('effective_email_domain_allow_list', $data ?? [], null);
        $this->setIfExists('is_password_protected', $data ?? [], null);
        $this->setIfExists('restricted_to_email_domains', $data ?? [], null);
        $this->setIfExists('restricted_to_enterprise_members', $data ?? [], null);
        $this->setIfExists('share_id', $data ?? [], null);
        $this->setIfExists('share_token_prefix', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('view_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['created_by_user_id'] === null) {
            $invalidProperties[] = "'created_by_user_id' can't be null";
        }
        if ($this->container['created_time'] === null) {
            $invalidProperties[] = "'created_time' can't be null";
        }
        if ($this->container['is_password_protected'] === null) {
            $invalidProperties[] = "'is_password_protected' can't be null";
        }
        if ($this->container['restricted_to_email_domains'] === null) {
            $invalidProperties[] = "'restricted_to_email_domains' can't be null";
        }
        if ($this->container['restricted_to_enterprise_members'] === null) {
            $invalidProperties[] = "'restricted_to_enterprise_members' can't be null";
        }
        if ($this->container['share_id'] === null) {
            $invalidProperties[] = "'share_id' can't be null";
        }
        if ($this->container['share_token_prefix'] === null) {
            $invalidProperties[] = "'share_token_prefix' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets block_installation_id
     *
     * @return string|null
     */
    public function getBlockInstallationId()
    {
        return $this->container['block_installation_id'];
    }

    /**
     * Sets block_installation_id
     *
     * @param string|null $block_installation_id block_installation_id
     *
     * @return self
     */
    public function setBlockInstallationId($block_installation_id)
    {
        if (is_null($block_installation_id)) {
            throw new \InvalidArgumentException('non-nullable block_installation_id cannot be null');
        }
        $this->container['block_installation_id'] = $block_installation_id;

        return $this;
    }

    /**
     * Gets can_be_synced
     *
     * @return bool|null
     */
    public function getCanBeSynced()
    {
        return $this->container['can_be_synced'];
    }

    /**
     * Sets can_be_synced
     *
     * @param bool|null $can_be_synced Denotes if the shared view can be synced. View and enterprise specific sync restrictions may also apply.
     *
     * @return self
     */
    public function setCanBeSynced($can_be_synced)
    {
        if (is_null($can_be_synced)) {
            throw new \InvalidArgumentException('non-nullable can_be_synced cannot be null');
        }
        $this->container['can_be_synced'] = $can_be_synced;

        return $this;
    }

    /**
     * Gets created_by_user_id
     *
     * @return string
     */
    public function getCreatedByUserId()
    {
        return $this->container['created_by_user_id'];
    }

    /**
     * Sets created_by_user_id
     *
     * @param string $created_by_user_id A user ID
     *
     * @return self
     */
    public function setCreatedByUserId($created_by_user_id)
    {
        if (is_null($created_by_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'created_by_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_by_user_id'] = $created_by_user_id;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return string
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param string $created_time A date timestamp in the ISO format, eg:\"2018-01-01T00:00:00.000Z\"
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        if (is_null($created_time)) {
            array_push($this->openAPINullablesSetToNull, 'created_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets effective_email_domain_allow_list
     *
     * @return string[]|null
     */
    public function getEffectiveEmailDomainAllowList()
    {
        return $this->container['effective_email_domain_allow_list'];
    }

    /**
     * Sets effective_email_domain_allow_list
     *
     * @param string[]|null $effective_email_domain_allow_list The effective email domain allow list factoring all restrictions, including the share's email domain restrictions and all restrictions above the share (e.g. enterprise sharing restrictions). If this field is omitted, there are no email domain restrictions on the share. Otherwise, a viewer must have an account associated with an email domain included in the allow list. If this list is empty, no viewer can see the share (e.g. no member of restrictedToEmailDomains is allowed by enterprise-wise sharing restrictions).
     *
     * @return self
     */
    public function setEffectiveEmailDomainAllowList($effective_email_domain_allow_list)
    {
        if (is_null($effective_email_domain_allow_list)) {
            throw new \InvalidArgumentException('non-nullable effective_email_domain_allow_list cannot be null');
        }
        $this->container['effective_email_domain_allow_list'] = $effective_email_domain_allow_list;

        return $this;
    }

    /**
     * Gets is_password_protected
     *
     * @return bool
     */
    public function getIsPasswordProtected()
    {
        return $this->container['is_password_protected'];
    }

    /**
     * Sets is_password_protected
     *
     * @param bool $is_password_protected is_password_protected
     *
     * @return self
     */
    public function setIsPasswordProtected($is_password_protected)
    {
        if (is_null($is_password_protected)) {
            throw new \InvalidArgumentException('non-nullable is_password_protected cannot be null');
        }
        $this->container['is_password_protected'] = $is_password_protected;

        return $this;
    }

    /**
     * Gets restricted_to_email_domains
     *
     * @return string[]
     */
    public function getRestrictedToEmailDomains()
    {
        return $this->container['restricted_to_email_domains'];
    }

    /**
     * Sets restricted_to_email_domains
     *
     * @param string[] $restricted_to_email_domains If non-empty, the email domain restrictions assigned to the share. If empty, no domain restrictions are assigned to the share, but higher level ones may still affect it. We recommend using effectiveEmailDomainAllowList to understand share accessibility.
     *
     * @return self
     */
    public function setRestrictedToEmailDomains($restricted_to_email_domains)
    {
        if (is_null($restricted_to_email_domains)) {
            throw new \InvalidArgumentException('non-nullable restricted_to_email_domains cannot be null');
        }
        $this->container['restricted_to_email_domains'] = $restricted_to_email_domains;

        return $this;
    }

    /**
     * Gets restricted_to_enterprise_members
     *
     * @return bool
     */
    public function getRestrictedToEnterpriseMembers()
    {
        return $this->container['restricted_to_enterprise_members'];
    }

    /**
     * Sets restricted_to_enterprise_members
     *
     * @param bool $restricted_to_enterprise_members If true, this share is only accessible by members of the enterprise account. This works in conjunction with `effectiveEmailDomainAllowList`.
     *
     * @return self
     */
    public function setRestrictedToEnterpriseMembers($restricted_to_enterprise_members)
    {
        if (is_null($restricted_to_enterprise_members)) {
            throw new \InvalidArgumentException('non-nullable restricted_to_enterprise_members cannot be null');
        }
        $this->container['restricted_to_enterprise_members'] = $restricted_to_enterprise_members;

        return $this;
    }

    /**
     * Gets share_id
     *
     * @return string
     */
    public function getShareId()
    {
        return $this->container['share_id'];
    }

    /**
     * Sets share_id
     *
     * @param string $share_id The full ShareId (unique identifier for the share).
     *
     * @return self
     */
    public function setShareId($share_id)
    {
        if (is_null($share_id)) {
            throw new \InvalidArgumentException('non-nullable share_id cannot be null');
        }
        $this->container['share_id'] = $share_id;

        return $this;
    }

    /**
     * Gets share_token_prefix
     *
     * @return string
     * @deprecated
     */
    public function getShareTokenPrefix()
    {
        return $this->container['share_token_prefix'];
    }

    /**
     * Sets share_token_prefix
     *
     * @param string $share_token_prefix Only the first 8 characters of the shareId.  Please use `shareId` instead.
     *
     * @return self
     * @deprecated
     */
    public function setShareTokenPrefix($share_token_prefix)
    {
        if (is_null($share_token_prefix)) {
            throw new \InvalidArgumentException('non-nullable share_token_prefix cannot be null');
        }
        $this->container['share_token_prefix'] = $share_token_prefix;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets view_id
     *
     * @return string|null
     */
    public function getViewId()
    {
        return $this->container['view_id'];
    }

    /**
     * Sets view_id
     *
     * @param string|null $view_id view_id
     *
     * @return self
     */
    public function setViewId($view_id)
    {
        if (is_null($view_id)) {
            throw new \InvalidArgumentException('non-nullable view_id cannot be null');
        }
        $this->container['view_id'] = $view_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


