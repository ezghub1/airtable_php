<?php
/**
 * WebhooksTableChanged
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ez128\Airtable\Model;

use \ArrayAccess;
use \Ez128\Airtable\ObjectSerializer;

/**
 * WebhooksTableChanged Class Doc Comment
 *
 * @category Class
 * @description The presence of each __created*__, __destroyed*__, __changed*__ field is determined by the specification filters and the actual change itself.  Previous and unchanged values are only a part of the payload if the [specification](/api/model/webhooks-specification) contains them in the includes object.  &#x60;&#x60;&#x60; {  \&quot;changedMetadata\&quot;: {      \&quot;current\&quot;: {          \&quot;name\&quot;: \&quot;table name\&quot;,          \&quot;description\&quot;: \&quot;table description\&quot;      },      \&quot;previous\&quot;: {          \&quot;name\&quot;: \&quot;previous name\&quot;,          \&quot;description\&quot;: \&quot;previous name\&quot;      }  },  \&quot;createdFieldsById\&quot;: {      \&quot;fld10000000000000\&quot;: {          \&quot;name\&quot;: \&quot;new name\&quot;,          \&quot;type\&quot;: \&quot;number\&quot;      }  },  \&quot;changedFieldsById\&quot;: {      \&quot;fld10000000000001\&quot;: {          \&quot;current\&quot;: {              \&quot;name\&quot;: \&quot;new name\&quot;          },          \&quot;previous\&quot;: {              \&quot;name\&quot;: \&quot;previous name\&quot;          }      },      \&quot;fld10000000000002\&quot;: {          \&quot;current\&quot;: {              \&quot;type\&quot;: \&quot;number\&quot;          },          \&quot;previous\&quot;: {              \&quot;type\&quot;: \&quot;rating\&quot;          }      }  },  \&quot;destroyedFieldIds\&quot;: [      \&quot;fld10000000000003\&quot;  ],  \&quot;createdRecordsById\&quot;: {      \&quot;rec00000000000000\&quot;: {          \&quot;cellValuesByFieldId\&quot;: {              \&quot;fld0000000000000\&quot;: 0          },          \&quot;createdTime\&quot;: \&quot;2022-02-01T21:25:05.663Z\&quot;      }  },  \&quot;changedRecordsById\&quot;: {      \&quot;rec00000000000001\&quot;: {          \&quot;current\&quot;: {              \&quot;cellValuesByFieldId\&quot;: {                  \&quot;fld00000000000001\&quot;: \&quot;hello world\&quot;              }          },          \&quot;previous\&quot;: {              \&quot;cellValuesByFieldId\&quot;: {                  \&quot;fld0000000000001\&quot;: \&quot;hello\&quot;              }          },          \&quot;unchanged\&quot;: {              \&quot;cellValuesByFieldId\&quot;: {                  \&quot;fld0000000000000\&quot;: 1              }          }      }  },  \&quot;destroyedRecordIds\&quot;: [      \&quot;rec00000000000002\&quot;  ],  \&quot;changedViewsById\&quot;: {      \&quot;viw00000000000000\&quot;: {          \&quot;createdRecordsById\&quot;: {              \&quot;rec00000000000000\&quot;: {                  \&quot;cellValuesByFieldId\&quot;: {                      \&quot;fld00000000000000\&quot;: 0                  },                  \&quot;createdTime\&quot;: \&quot;2022-02-01T21:25:05.663Z\&quot;              }          },          \&quot;changedRecordsById\&quot;: {              \&quot;rec00000000000001\&quot;: {                  \&quot;current\&quot;: {                      \&quot;cellValuesByFieldId\&quot;: {                          \&quot;fld00000000000001\&quot;: \&quot;hello world\&quot;                      }                  },                  \&quot;previous\&quot;: {                      \&quot;cellValuesByFieldId\&quot;: {                          \&quot;fld0000000000001\&quot;: \&quot;hello\&quot;                      }                  },                  \&quot;unchanged\&quot;: {                      \&quot;cellValuesByFieldId\&quot;: {                          \&quot;fld0000000000000\&quot;: 1                      }                  }              }          },          \&quot;destroyedRecordIds\&quot;: [              \&quot;rec00000000000002\&quot;          ]      }  } &#x60;&#x60;&#x60;
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebhooksTableChanged implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Webhooks-table-changed';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'changed_fields_by_id' => 'array<string,\Ez128\Airtable\Model\WebhooksTableChangedChangedFieldsByIdValue>',
        'changed_metadata' => '\Ez128\Airtable\Model\WebhooksTableChangedChangedMetadata',
        'changed_records_by_id' => 'array<string,\Ez128\Airtable\Model\WebhooksChangedRecordValue>',
        'changed_views_by_id' => 'array<string,\Ez128\Airtable\Model\WebhooksTableChangedChangedViewsByIdValue>',
        'created_fields_by_id' => 'array<string,\Ez128\Airtable\Model\WebhooksTableChangedCreatedFieldsByIdValue>',
        'created_records_by_id' => 'array<string,\Ez128\Airtable\Model\WebhooksCreatedRecordValue>',
        'destroyed_field_ids' => 'string[]',
        'destroyed_record_ids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'changed_fields_by_id' => null,
        'changed_metadata' => null,
        'changed_records_by_id' => null,
        'changed_views_by_id' => null,
        'created_fields_by_id' => null,
        'created_records_by_id' => null,
        'destroyed_field_ids' => null,
        'destroyed_record_ids' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'changed_fields_by_id' => false,
        'changed_metadata' => false,
        'changed_records_by_id' => false,
        'changed_views_by_id' => false,
        'created_fields_by_id' => false,
        'created_records_by_id' => false,
        'destroyed_field_ids' => false,
        'destroyed_record_ids' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'changed_fields_by_id' => 'changedFieldsById',
        'changed_metadata' => 'changedMetadata',
        'changed_records_by_id' => 'changedRecordsById',
        'changed_views_by_id' => 'changedViewsById',
        'created_fields_by_id' => 'createdFieldsById',
        'created_records_by_id' => 'createdRecordsById',
        'destroyed_field_ids' => 'destroyedFieldIds',
        'destroyed_record_ids' => 'destroyedRecordIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'changed_fields_by_id' => 'setChangedFieldsById',
        'changed_metadata' => 'setChangedMetadata',
        'changed_records_by_id' => 'setChangedRecordsById',
        'changed_views_by_id' => 'setChangedViewsById',
        'created_fields_by_id' => 'setCreatedFieldsById',
        'created_records_by_id' => 'setCreatedRecordsById',
        'destroyed_field_ids' => 'setDestroyedFieldIds',
        'destroyed_record_ids' => 'setDestroyedRecordIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'changed_fields_by_id' => 'getChangedFieldsById',
        'changed_metadata' => 'getChangedMetadata',
        'changed_records_by_id' => 'getChangedRecordsById',
        'changed_views_by_id' => 'getChangedViewsById',
        'created_fields_by_id' => 'getCreatedFieldsById',
        'created_records_by_id' => 'getCreatedRecordsById',
        'destroyed_field_ids' => 'getDestroyedFieldIds',
        'destroyed_record_ids' => 'getDestroyedRecordIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('changed_fields_by_id', $data ?? [], null);
        $this->setIfExists('changed_metadata', $data ?? [], null);
        $this->setIfExists('changed_records_by_id', $data ?? [], null);
        $this->setIfExists('changed_views_by_id', $data ?? [], null);
        $this->setIfExists('created_fields_by_id', $data ?? [], null);
        $this->setIfExists('created_records_by_id', $data ?? [], null);
        $this->setIfExists('destroyed_field_ids', $data ?? [], null);
        $this->setIfExists('destroyed_record_ids', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets changed_fields_by_id
     *
     * @return array<string,\Ez128\Airtable\Model\WebhooksTableChangedChangedFieldsByIdValue>|null
     */
    public function getChangedFieldsById()
    {
        return $this->container['changed_fields_by_id'];
    }

    /**
     * Sets changed_fields_by_id
     *
     * @param array<string,\Ez128\Airtable\Model\WebhooksTableChangedChangedFieldsByIdValue>|null $changed_fields_by_id changed_fields_by_id
     *
     * @return self
     */
    public function setChangedFieldsById($changed_fields_by_id)
    {
        if (is_null($changed_fields_by_id)) {
            throw new \InvalidArgumentException('non-nullable changed_fields_by_id cannot be null');
        }
        $this->container['changed_fields_by_id'] = $changed_fields_by_id;

        return $this;
    }

    /**
     * Gets changed_metadata
     *
     * @return \Ez128\Airtable\Model\WebhooksTableChangedChangedMetadata|null
     */
    public function getChangedMetadata()
    {
        return $this->container['changed_metadata'];
    }

    /**
     * Sets changed_metadata
     *
     * @param \Ez128\Airtable\Model\WebhooksTableChangedChangedMetadata|null $changed_metadata changed_metadata
     *
     * @return self
     */
    public function setChangedMetadata($changed_metadata)
    {
        if (is_null($changed_metadata)) {
            throw new \InvalidArgumentException('non-nullable changed_metadata cannot be null');
        }
        $this->container['changed_metadata'] = $changed_metadata;

        return $this;
    }

    /**
     * Gets changed_records_by_id
     *
     * @return array<string,\Ez128\Airtable\Model\WebhooksChangedRecordValue>|null
     */
    public function getChangedRecordsById()
    {
        return $this->container['changed_records_by_id'];
    }

    /**
     * Sets changed_records_by_id
     *
     * @param array<string,\Ez128\Airtable\Model\WebhooksChangedRecordValue>|null $changed_records_by_id One or multiple records being **changed** and reported upon via webhooks.
     *
     * @return self
     */
    public function setChangedRecordsById($changed_records_by_id)
    {
        if (is_null($changed_records_by_id)) {
            throw new \InvalidArgumentException('non-nullable changed_records_by_id cannot be null');
        }
        $this->container['changed_records_by_id'] = $changed_records_by_id;

        return $this;
    }

    /**
     * Gets changed_views_by_id
     *
     * @return array<string,\Ez128\Airtable\Model\WebhooksTableChangedChangedViewsByIdValue>|null
     */
    public function getChangedViewsById()
    {
        return $this->container['changed_views_by_id'];
    }

    /**
     * Sets changed_views_by_id
     *
     * @param array<string,\Ez128\Airtable\Model\WebhooksTableChangedChangedViewsByIdValue>|null $changed_views_by_id This is only included when `recordChangeScope` is a view id.
     *
     * @return self
     */
    public function setChangedViewsById($changed_views_by_id)
    {
        if (is_null($changed_views_by_id)) {
            throw new \InvalidArgumentException('non-nullable changed_views_by_id cannot be null');
        }
        $this->container['changed_views_by_id'] = $changed_views_by_id;

        return $this;
    }

    /**
     * Gets created_fields_by_id
     *
     * @return array<string,\Ez128\Airtable\Model\WebhooksTableChangedCreatedFieldsByIdValue>|null
     */
    public function getCreatedFieldsById()
    {
        return $this->container['created_fields_by_id'];
    }

    /**
     * Sets created_fields_by_id
     *
     * @param array<string,\Ez128\Airtable\Model\WebhooksTableChangedCreatedFieldsByIdValue>|null $created_fields_by_id created_fields_by_id
     *
     * @return self
     */
    public function setCreatedFieldsById($created_fields_by_id)
    {
        if (is_null($created_fields_by_id)) {
            throw new \InvalidArgumentException('non-nullable created_fields_by_id cannot be null');
        }
        $this->container['created_fields_by_id'] = $created_fields_by_id;

        return $this;
    }

    /**
     * Gets created_records_by_id
     *
     * @return array<string,\Ez128\Airtable\Model\WebhooksCreatedRecordValue>|null
     */
    public function getCreatedRecordsById()
    {
        return $this->container['created_records_by_id'];
    }

    /**
     * Sets created_records_by_id
     *
     * @param array<string,\Ez128\Airtable\Model\WebhooksCreatedRecordValue>|null $created_records_by_id One or multiple records being **created** and reported upon via webhooks.
     *
     * @return self
     */
    public function setCreatedRecordsById($created_records_by_id)
    {
        if (is_null($created_records_by_id)) {
            throw new \InvalidArgumentException('non-nullable created_records_by_id cannot be null');
        }
        $this->container['created_records_by_id'] = $created_records_by_id;

        return $this;
    }

    /**
     * Gets destroyed_field_ids
     *
     * @return string[]|null
     */
    public function getDestroyedFieldIds()
    {
        return $this->container['destroyed_field_ids'];
    }

    /**
     * Sets destroyed_field_ids
     *
     * @param string[]|null $destroyed_field_ids destroyed_field_ids
     *
     * @return self
     */
    public function setDestroyedFieldIds($destroyed_field_ids)
    {
        if (is_null($destroyed_field_ids)) {
            throw new \InvalidArgumentException('non-nullable destroyed_field_ids cannot be null');
        }
        $this->container['destroyed_field_ids'] = $destroyed_field_ids;

        return $this;
    }

    /**
     * Gets destroyed_record_ids
     *
     * @return string[]|null
     */
    public function getDestroyedRecordIds()
    {
        return $this->container['destroyed_record_ids'];
    }

    /**
     * Sets destroyed_record_ids
     *
     * @param string[]|null $destroyed_record_ids destroyed_record_ids
     *
     * @return self
     */
    public function setDestroyedRecordIds($destroyed_record_ids)
    {
        if (is_null($destroyed_record_ids)) {
            throw new \InvalidArgumentException('non-nullable destroyed_record_ids cannot be null');
        }
        $this->container['destroyed_record_ids'] = $destroyed_record_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


