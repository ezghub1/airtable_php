<?php
/**
 * WebhooksNotification
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ez128\Airtable\Model;

use \ArrayAccess;
use \Ez128\Airtable\ObjectSerializer;

/**
 * WebhooksNotification Class Doc Comment
 *
 * @category Class
 * @description An object containing metadata about the most recent ping and whether or not it was successful.
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebhooksNotification implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Webhooks-notification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'completion_timestamp' => 'string',
        'duration_ms' => 'float',
        'error' => '\Ez128\Airtable\Model\WebhooksNotificationAnyOfError',
        'retry_number' => 'float',
        'success' => 'bool',
        'will_be_retried' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'completion_timestamp' => null,
        'duration_ms' => null,
        'error' => null,
        'retry_number' => null,
        'success' => null,
        'will_be_retried' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'completion_timestamp' => false,
        'duration_ms' => false,
        'error' => false,
        'retry_number' => false,
        'success' => false,
        'will_be_retried' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'completion_timestamp' => 'completionTimestamp',
        'duration_ms' => 'durationMs',
        'error' => 'error',
        'retry_number' => 'retryNumber',
        'success' => 'success',
        'will_be_retried' => 'willBeRetried'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'completion_timestamp' => 'setCompletionTimestamp',
        'duration_ms' => 'setDurationMs',
        'error' => 'setError',
        'retry_number' => 'setRetryNumber',
        'success' => 'setSuccess',
        'will_be_retried' => 'setWillBeRetried'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'completion_timestamp' => 'getCompletionTimestamp',
        'duration_ms' => 'getDurationMs',
        'error' => 'getError',
        'retry_number' => 'getRetryNumber',
        'success' => 'getSuccess',
        'will_be_retried' => 'getWillBeRetried'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SUCCESS_TRUE = 'true';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSuccessAllowableValues()
    {
        return [
            self::SUCCESS_TRUE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('completion_timestamp', $data ?? [], null);
        $this->setIfExists('duration_ms', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('retry_number', $data ?? [], null);
        $this->setIfExists('success', $data ?? [], null);
        $this->setIfExists('will_be_retried', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['completion_timestamp'] === null) {
            $invalidProperties[] = "'completion_timestamp' can't be null";
        }
        if ($this->container['duration_ms'] === null) {
            $invalidProperties[] = "'duration_ms' can't be null";
        }
        if ($this->container['error'] === null) {
            $invalidProperties[] = "'error' can't be null";
        }
        if ($this->container['retry_number'] === null) {
            $invalidProperties[] = "'retry_number' can't be null";
        }
        if ($this->container['success'] === null) {
            $invalidProperties[] = "'success' can't be null";
        }
        $allowedValues = $this->getSuccessAllowableValues();
        if (!is_null($this->container['success']) && !in_array($this->container['success'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'success', must be one of '%s'",
                $this->container['success'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['will_be_retried'] === null) {
            $invalidProperties[] = "'will_be_retried' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets completion_timestamp
     *
     * @return string
     */
    public function getCompletionTimestamp()
    {
        return $this->container['completion_timestamp'];
    }

    /**
     * Sets completion_timestamp
     *
     * @param string $completion_timestamp The time of the most recent notification.
     *
     * @return self
     */
    public function setCompletionTimestamp($completion_timestamp)
    {
        if (is_null($completion_timestamp)) {
            throw new \InvalidArgumentException('non-nullable completion_timestamp cannot be null');
        }
        $this->container['completion_timestamp'] = $completion_timestamp;

        return $this;
    }

    /**
     * Gets duration_ms
     *
     * @return float
     */
    public function getDurationMs()
    {
        return $this->container['duration_ms'];
    }

    /**
     * Sets duration_ms
     *
     * @param float $duration_ms The roundtrip duration of the network call.
     *
     * @return self
     */
    public function setDurationMs($duration_ms)
    {
        if (is_null($duration_ms)) {
            throw new \InvalidArgumentException('non-nullable duration_ms cannot be null');
        }
        $this->container['duration_ms'] = $duration_ms;

        return $this;
    }

    /**
     * Gets error
     *
     * @return \Ez128\Airtable\Model\WebhooksNotificationAnyOfError
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \Ez128\Airtable\Model\WebhooksNotificationAnyOfError $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            throw new \InvalidArgumentException('non-nullable error cannot be null');
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets retry_number
     *
     * @return float
     */
    public function getRetryNumber()
    {
        return $this->container['retry_number'];
    }

    /**
     * Sets retry_number
     *
     * @param float $retry_number The number of times the notification was retried. (0 = first try)
     *
     * @return self
     */
    public function setRetryNumber($retry_number)
    {
        if (is_null($retry_number)) {
            throw new \InvalidArgumentException('non-nullable retry_number cannot be null');
        }
        $this->container['retry_number'] = $retry_number;

        return $this;
    }

    /**
     * Gets success
     *
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool $success success
     *
     * @return self
     */
    public function setSuccess($success)
    {
        if (is_null($success)) {
            throw new \InvalidArgumentException('non-nullable success cannot be null');
        }
        $allowedValues = $this->getSuccessAllowableValues();
        if (!in_array($success, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'success', must be one of '%s'",
                    $success,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets will_be_retried
     *
     * @return bool
     */
    public function getWillBeRetried()
    {
        return $this->container['will_be_retried'];
    }

    /**
     * Sets will_be_retried
     *
     * @param bool $will_be_retried Whether or not Airtable will attempt to deliver a notification again.
     *
     * @return self
     */
    public function setWillBeRetried($will_be_retried)
    {
        if (is_null($will_be_retried)) {
            throw new \InvalidArgumentException('non-nullable will_be_retried cannot be null');
        }
        $this->container['will_be_retried'] = $will_be_retried;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


