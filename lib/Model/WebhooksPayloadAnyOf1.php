<?php
/**
 * WebhooksPayloadAnyOf1
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ez128\Airtable\Model;

use \ArrayAccess;
use \Ez128\Airtable\ObjectSerializer;

/**
 * WebhooksPayloadAnyOf1 Class Doc Comment
 *
 * @category Class
 * @description **Error response**  If a specification becomes invalid due to a change in the base (e.g. deletion of a table or view specified in &#x60;recordChangeScope&#x60;, deletion of a field explicitly listed in &#x60;watchDataInFieldIds&#x60; or &#x60;watchSchemasOfFieldIds&#x60;), the specification generates an error payload and goes into an error state. The error payload may contain the change that invalidated the specification. It will not reactivate automatically if the specified field/view/table is reintroduced. The caller must re-create a new webhook. If any of the fields in &#x60;includeCellValuesInFieldIds&#x60; are deleted, the webhook behaves as if they were not specified (no error is generated and the webhook continues to generate data).  &#x60;&#x60;&#x60; {  \&quot;payloads\&quot;: [    {      \&quot;timestamp\&quot;: \&quot;2022-02-01T21:25:05.663Z\&quot;,      \&quot;baseTransactionNumber\&quot;: 4,      \&quot;actionMetadata\&quot;: {        \&quot;source\&quot;: \&quot;client\&quot;,        \&quot;sourceMetadata\&quot;: {          \&quot;user\&quot;: {            \&quot;id\&quot;: \&quot;usr00000000000000\&quot;,            \&quot;email\&quot;: \&quot;foo@bar.com\&quot;,            \&quot;permissionLevel\&quot;: \&quot;create\&quot;          }        }      },      \&quot;destroyedTableIds\&quot;: [        \&quot;tbl20000000000000\&quot;,        \&quot;tbl20000000000001\&quot;      ],      \&quot;error\&quot;: true,      \&quot;code\&quot;: \&quot;INVALID_HOOK\&quot;,      \&quot;payloadFormat\&quot;: \&quot;v0\&quot;    }  ],  \&quot;cursor\&quot;: 5,  \&quot;mightHaveMore\&quot;: false } &#x60;&#x60;&#x60; Note that for error responses &#x60;error&#x60; and &#x60;code&#x60; are the only fields that are typed differently from the success response.
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebhooksPayloadAnyOf1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Webhooks_payload_anyOf_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'action_metadata' => '\Ez128\Airtable\Model\WebhooksAction',
        'base_transaction_number' => 'float',
        'changed_tables_by_id' => 'array<string,\Ez128\Airtable\Model\WebhooksTableChanged>',
        'code' => 'string',
        'created_tables_by_id' => 'array<string,\Ez128\Airtable\Model\WebhooksTableCreated>',
        'destroyed_table_ids' => 'string[]',
        'error' => 'bool',
        'payload_format' => 'string',
        'timestamp' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'action_metadata' => null,
        'base_transaction_number' => null,
        'changed_tables_by_id' => null,
        'code' => null,
        'created_tables_by_id' => null,
        'destroyed_table_ids' => null,
        'error' => null,
        'payload_format' => null,
        'timestamp' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'action_metadata' => false,
        'base_transaction_number' => false,
        'changed_tables_by_id' => false,
        'code' => false,
        'created_tables_by_id' => false,
        'destroyed_table_ids' => false,
        'error' => false,
        'payload_format' => false,
        'timestamp' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action_metadata' => 'actionMetadata',
        'base_transaction_number' => 'baseTransactionNumber',
        'changed_tables_by_id' => 'changedTablesById',
        'code' => 'code',
        'created_tables_by_id' => 'createdTablesById',
        'destroyed_table_ids' => 'destroyedTableIds',
        'error' => 'error',
        'payload_format' => 'payloadFormat',
        'timestamp' => 'timestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action_metadata' => 'setActionMetadata',
        'base_transaction_number' => 'setBaseTransactionNumber',
        'changed_tables_by_id' => 'setChangedTablesById',
        'code' => 'setCode',
        'created_tables_by_id' => 'setCreatedTablesById',
        'destroyed_table_ids' => 'setDestroyedTableIds',
        'error' => 'setError',
        'payload_format' => 'setPayloadFormat',
        'timestamp' => 'setTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action_metadata' => 'getActionMetadata',
        'base_transaction_number' => 'getBaseTransactionNumber',
        'changed_tables_by_id' => 'getChangedTablesById',
        'code' => 'getCode',
        'created_tables_by_id' => 'getCreatedTablesById',
        'destroyed_table_ids' => 'getDestroyedTableIds',
        'error' => 'getError',
        'payload_format' => 'getPayloadFormat',
        'timestamp' => 'getTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CODE_INVALID_FILTERS = 'INVALID_FILTERS';
    public const CODE_INVALID_HOOK = 'INVALID_HOOK';
    public const ERROR_TRUE = 'true';
    public const PAYLOAD_FORMAT_V0 = 'v0';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_INVALID_FILTERS,
            self::CODE_INVALID_HOOK,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getErrorAllowableValues()
    {
        return [
            self::ERROR_TRUE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayloadFormatAllowableValues()
    {
        return [
            self::PAYLOAD_FORMAT_V0,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('action_metadata', $data ?? [], null);
        $this->setIfExists('base_transaction_number', $data ?? [], null);
        $this->setIfExists('changed_tables_by_id', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('created_tables_by_id', $data ?? [], null);
        $this->setIfExists('destroyed_table_ids', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('payload_format', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['action_metadata'] === null) {
            $invalidProperties[] = "'action_metadata' can't be null";
        }
        if ($this->container['base_transaction_number'] === null) {
            $invalidProperties[] = "'base_transaction_number' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'code', must be one of '%s'",
                $this->container['code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['error'] === null) {
            $invalidProperties[] = "'error' can't be null";
        }
        $allowedValues = $this->getErrorAllowableValues();
        if (!is_null($this->container['error']) && !in_array($this->container['error'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'error', must be one of '%s'",
                $this->container['error'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['payload_format'] === null) {
            $invalidProperties[] = "'payload_format' can't be null";
        }
        $allowedValues = $this->getPayloadFormatAllowableValues();
        if (!is_null($this->container['payload_format']) && !in_array($this->container['payload_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payload_format', must be one of '%s'",
                $this->container['payload_format'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action_metadata
     *
     * @return \Ez128\Airtable\Model\WebhooksAction
     */
    public function getActionMetadata()
    {
        return $this->container['action_metadata'];
    }

    /**
     * Sets action_metadata
     *
     * @param \Ez128\Airtable\Model\WebhooksAction $action_metadata The action responsible for the change. We may add additional sources or source metadata in the future and this will not be considered a breaking change. API consumers are expected to handle unknown sources gracefully.
     *
     * @return self
     */
    public function setActionMetadata($action_metadata)
    {
        if (is_null($action_metadata)) {
            throw new \InvalidArgumentException('non-nullable action_metadata cannot be null');
        }
        $this->container['action_metadata'] = $action_metadata;

        return $this;
    }

    /**
     * Gets base_transaction_number
     *
     * @return float
     */
    public function getBaseTransactionNumber()
    {
        return $this->container['base_transaction_number'];
    }

    /**
     * Sets base_transaction_number
     *
     * @param float $base_transaction_number A number which can be used to determine all changes within a transaction.
     *
     * @return self
     */
    public function setBaseTransactionNumber($base_transaction_number)
    {
        if (is_null($base_transaction_number)) {
            throw new \InvalidArgumentException('non-nullable base_transaction_number cannot be null');
        }
        $this->container['base_transaction_number'] = $base_transaction_number;

        return $this;
    }

    /**
     * Gets changed_tables_by_id
     *
     * @return array<string,\Ez128\Airtable\Model\WebhooksTableChanged>|null
     */
    public function getChangedTablesById()
    {
        return $this->container['changed_tables_by_id'];
    }

    /**
     * Sets changed_tables_by_id
     *
     * @param array<string,\Ez128\Airtable\Model\WebhooksTableChanged>|null $changed_tables_by_id changed_tables_by_id
     *
     * @return self
     */
    public function setChangedTablesById($changed_tables_by_id)
    {
        if (is_null($changed_tables_by_id)) {
            throw new \InvalidArgumentException('non-nullable changed_tables_by_id cannot be null');
        }
        $this->container['changed_tables_by_id'] = $changed_tables_by_id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Additional error codes may be introduced, and will not be considered a breaking change.  In addition `INTERNAL_ERROR` can be returned if an internal error is encountered
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $allowedValues = $this->getCodeAllowableValues();
        if (!in_array($code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'code', must be one of '%s'",
                    $code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets created_tables_by_id
     *
     * @return array<string,\Ez128\Airtable\Model\WebhooksTableCreated>|null
     */
    public function getCreatedTablesById()
    {
        return $this->container['created_tables_by_id'];
    }

    /**
     * Sets created_tables_by_id
     *
     * @param array<string,\Ez128\Airtable\Model\WebhooksTableCreated>|null $created_tables_by_id created_tables_by_id
     *
     * @return self
     */
    public function setCreatedTablesById($created_tables_by_id)
    {
        if (is_null($created_tables_by_id)) {
            throw new \InvalidArgumentException('non-nullable created_tables_by_id cannot be null');
        }
        $this->container['created_tables_by_id'] = $created_tables_by_id;

        return $this;
    }

    /**
     * Gets destroyed_table_ids
     *
     * @return string[]|null
     */
    public function getDestroyedTableIds()
    {
        return $this->container['destroyed_table_ids'];
    }

    /**
     * Sets destroyed_table_ids
     *
     * @param string[]|null $destroyed_table_ids destroyed_table_ids
     *
     * @return self
     */
    public function setDestroyedTableIds($destroyed_table_ids)
    {
        if (is_null($destroyed_table_ids)) {
            throw new \InvalidArgumentException('non-nullable destroyed_table_ids cannot be null');
        }
        $this->container['destroyed_table_ids'] = $destroyed_table_ids;

        return $this;
    }

    /**
     * Gets error
     *
     * @return bool
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param bool $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            throw new \InvalidArgumentException('non-nullable error cannot be null');
        }
        $allowedValues = $this->getErrorAllowableValues();
        if (!in_array($error, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'error', must be one of '%s'",
                    $error,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets payload_format
     *
     * @return string
     */
    public function getPayloadFormat()
    {
        return $this->container['payload_format'];
    }

    /**
     * Sets payload_format
     *
     * @param string $payload_format The payload format's version number. This is currently just v0, but it may be increased in the future for breaking payload changes.
     *
     * @return self
     */
    public function setPayloadFormat($payload_format)
    {
        if (is_null($payload_format)) {
            throw new \InvalidArgumentException('non-nullable payload_format cannot be null');
        }
        $allowedValues = $this->getPayloadFormatAllowableValues();
        if (!in_array($payload_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payload_format', must be one of '%s'",
                    $payload_format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payload_format'] = $payload_format;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp The time the action occurred.
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


