<?php
/**
 * GetUserById200Response
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ez128\Airtable\Model;

use \ArrayAccess;
use \Ez128\Airtable\ObjectSerializer;

/**
 * GetUserById200Response Class Doc Comment
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetUserById200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_user_by_id_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'aggregated' => '\Ez128\Airtable\Model\GetUsersByIdOrEmail200ResponseUsersInnerAggregated',
        'collaborations' => '\Ez128\Airtable\Model\Collaborations',
        'created_time' => 'string',
        'descendants' => 'array<string,\Ez128\Airtable\Model\GetUsersByIdOrEmail200ResponseUsersInnerDescendantsValue>',
        'email' => 'string',
        'enterprise_user_type' => 'string',
        'groups' => '\Ez128\Airtable\Model\AddBaseCollaboratorRequestCollaboratorsInnerAnyOf1Group[]',
        'id' => 'string',
        'invited_to_airtable_by_user_id' => 'string',
        'is_admin' => 'bool',
        'is_managed' => 'bool',
        'is_service_account' => 'bool',
        'is_sso_required' => 'bool',
        'is_super_admin' => 'bool',
        'is_two_factor_auth_enabled' => 'bool',
        'last_activity_time' => 'string',
        'name' => 'string',
        'state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'aggregated' => null,
        'collaborations' => null,
        'created_time' => null,
        'descendants' => null,
        'email' => null,
        'enterprise_user_type' => null,
        'groups' => null,
        'id' => null,
        'invited_to_airtable_by_user_id' => null,
        'is_admin' => null,
        'is_managed' => null,
        'is_service_account' => null,
        'is_sso_required' => null,
        'is_super_admin' => null,
        'is_two_factor_auth_enabled' => null,
        'last_activity_time' => null,
        'name' => null,
        'state' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'aggregated' => false,
        'collaborations' => false,
        'created_time' => false,
        'descendants' => false,
        'email' => false,
        'enterprise_user_type' => false,
        'groups' => false,
        'id' => false,
        'invited_to_airtable_by_user_id' => true,
        'is_admin' => false,
        'is_managed' => false,
        'is_service_account' => false,
        'is_sso_required' => false,
        'is_super_admin' => false,
        'is_two_factor_auth_enabled' => false,
        'last_activity_time' => true,
        'name' => false,
        'state' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aggregated' => 'aggregated',
        'collaborations' => 'collaborations',
        'created_time' => 'createdTime',
        'descendants' => 'descendants',
        'email' => 'email',
        'enterprise_user_type' => 'enterpriseUserType',
        'groups' => 'groups',
        'id' => 'id',
        'invited_to_airtable_by_user_id' => 'invitedToAirtableByUserId',
        'is_admin' => 'isAdmin',
        'is_managed' => 'isManaged',
        'is_service_account' => 'isServiceAccount',
        'is_sso_required' => 'isSsoRequired',
        'is_super_admin' => 'isSuperAdmin',
        'is_two_factor_auth_enabled' => 'isTwoFactorAuthEnabled',
        'last_activity_time' => 'lastActivityTime',
        'name' => 'name',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aggregated' => 'setAggregated',
        'collaborations' => 'setCollaborations',
        'created_time' => 'setCreatedTime',
        'descendants' => 'setDescendants',
        'email' => 'setEmail',
        'enterprise_user_type' => 'setEnterpriseUserType',
        'groups' => 'setGroups',
        'id' => 'setId',
        'invited_to_airtable_by_user_id' => 'setInvitedToAirtableByUserId',
        'is_admin' => 'setIsAdmin',
        'is_managed' => 'setIsManaged',
        'is_service_account' => 'setIsServiceAccount',
        'is_sso_required' => 'setIsSsoRequired',
        'is_super_admin' => 'setIsSuperAdmin',
        'is_two_factor_auth_enabled' => 'setIsTwoFactorAuthEnabled',
        'last_activity_time' => 'setLastActivityTime',
        'name' => 'setName',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aggregated' => 'getAggregated',
        'collaborations' => 'getCollaborations',
        'created_time' => 'getCreatedTime',
        'descendants' => 'getDescendants',
        'email' => 'getEmail',
        'enterprise_user_type' => 'getEnterpriseUserType',
        'groups' => 'getGroups',
        'id' => 'getId',
        'invited_to_airtable_by_user_id' => 'getInvitedToAirtableByUserId',
        'is_admin' => 'getIsAdmin',
        'is_managed' => 'getIsManaged',
        'is_service_account' => 'getIsServiceAccount',
        'is_sso_required' => 'getIsSsoRequired',
        'is_super_admin' => 'getIsSuperAdmin',
        'is_two_factor_auth_enabled' => 'getIsTwoFactorAuthEnabled',
        'last_activity_time' => 'getLastActivityTime',
        'name' => 'getName',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ENTERPRISE_USER_TYPE_ACCESS_READ_ONLY_SHARE_LINKS = 'accessReadOnlyShareLinks';
    public const ENTERPRISE_USER_TYPE_FULL = 'full';
    public const STATE_PROVISIONED = 'provisioned';
    public const STATE_DEACTIVATED = 'deactivated';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnterpriseUserTypeAllowableValues()
    {
        return [
            self::ENTERPRISE_USER_TYPE_ACCESS_READ_ONLY_SHARE_LINKS,
            self::ENTERPRISE_USER_TYPE_FULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_PROVISIONED,
            self::STATE_DEACTIVATED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('aggregated', $data ?? [], null);
        $this->setIfExists('collaborations', $data ?? [], null);
        $this->setIfExists('created_time', $data ?? [], null);
        $this->setIfExists('descendants', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('enterprise_user_type', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('invited_to_airtable_by_user_id', $data ?? [], null);
        $this->setIfExists('is_admin', $data ?? [], null);
        $this->setIfExists('is_managed', $data ?? [], null);
        $this->setIfExists('is_service_account', $data ?? [], null);
        $this->setIfExists('is_sso_required', $data ?? [], null);
        $this->setIfExists('is_super_admin', $data ?? [], null);
        $this->setIfExists('is_two_factor_auth_enabled', $data ?? [], null);
        $this->setIfExists('last_activity_time', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        $allowedValues = $this->getEnterpriseUserTypeAllowableValues();
        if (!is_null($this->container['enterprise_user_type']) && !in_array($this->container['enterprise_user_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'enterprise_user_type', must be one of '%s'",
                $this->container['enterprise_user_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['is_service_account'] === null) {
            $invalidProperties[] = "'is_service_account' can't be null";
        }
        if ($this->container['is_sso_required'] === null) {
            $invalidProperties[] = "'is_sso_required' can't be null";
        }
        if ($this->container['is_two_factor_auth_enabled'] === null) {
            $invalidProperties[] = "'is_two_factor_auth_enabled' can't be null";
        }
        if ($this->container['last_activity_time'] === null) {
            $invalidProperties[] = "'last_activity_time' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aggregated
     *
     * @return \Ez128\Airtable\Model\GetUsersByIdOrEmail200ResponseUsersInnerAggregated|null
     */
    public function getAggregated()
    {
        return $this->container['aggregated'];
    }

    /**
     * Sets aggregated
     *
     * @param \Ez128\Airtable\Model\GetUsersByIdOrEmail200ResponseUsersInnerAggregated|null $aggregated aggregated
     *
     * @return self
     */
    public function setAggregated($aggregated)
    {
        if (is_null($aggregated)) {
            throw new \InvalidArgumentException('non-nullable aggregated cannot be null');
        }
        $this->container['aggregated'] = $aggregated;

        return $this;
    }

    /**
     * Gets collaborations
     *
     * @return \Ez128\Airtable\Model\Collaborations|null
     */
    public function getCollaborations()
    {
        return $this->container['collaborations'];
    }

    /**
     * Sets collaborations
     *
     * @param \Ez128\Airtable\Model\Collaborations|null $collaborations The user's direct collaborations on workspaces, bases and interfaces associated with this enterprise account. Excludes collaborations from groups.
     *
     * @return self
     */
    public function setCollaborations($collaborations)
    {
        if (is_null($collaborations)) {
            throw new \InvalidArgumentException('non-nullable collaborations cannot be null');
        }
        $this->container['collaborations'] = $collaborations;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return string|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param string|null $created_time When user was created.  This field is only returned when user is internal.
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        if (is_null($created_time)) {
            throw new \InvalidArgumentException('non-nullable created_time cannot be null');
        }
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets descendants
     *
     * @return array<string,\Ez128\Airtable\Model\GetUsersByIdOrEmail200ResponseUsersInnerDescendantsValue>|null
     */
    public function getDescendants()
    {
        return $this->container['descendants'];
    }

    /**
     * Sets descendants
     *
     * @param array<string,\Ez128\Airtable\Model\GetUsersByIdOrEmail200ResponseUsersInnerDescendantsValue>|null $descendants The user's values per descendant enterprise account. Only returned when the user is on a claimed domain and the enterprise account has the Enterprise Hub feature enabled.
     *
     * @return self
     */
    public function setDescendants($descendants)
    {
        if (is_null($descendants)) {
            throw new \InvalidArgumentException('non-nullable descendants cannot be null');
        }
        $this->container['descendants'] = $descendants;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets enterprise_user_type
     *
     * @return string|null
     */
    public function getEnterpriseUserType()
    {
        return $this->container['enterprise_user_type'];
    }

    /**
     * Sets enterprise_user_type
     *
     * @param string|null $enterprise_user_type The type of user. Only returned if the enterprise has group mappings active and only if user is internal.
     *
     * @return self
     */
    public function setEnterpriseUserType($enterprise_user_type)
    {
        if (is_null($enterprise_user_type)) {
            throw new \InvalidArgumentException('non-nullable enterprise_user_type cannot be null');
        }
        $allowedValues = $this->getEnterpriseUserTypeAllowableValues();
        if (!in_array($enterprise_user_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'enterprise_user_type', must be one of '%s'",
                    $enterprise_user_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['enterprise_user_type'] = $enterprise_user_type;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \Ez128\Airtable\Model\AddBaseCollaboratorRequestCollaboratorsInnerAnyOf1Group[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \Ez128\Airtable\Model\AddBaseCollaboratorRequestCollaboratorsInnerAnyOf1Group[]|null $groups This field specifies the groups associated with this enterprise account that the user belongs to. This field is only returned when the user is internal.
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id A user ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invited_to_airtable_by_user_id
     *
     * @return string|null
     */
    public function getInvitedToAirtableByUserId()
    {
        return $this->container['invited_to_airtable_by_user_id'];
    }

    /**
     * Sets invited_to_airtable_by_user_id
     *
     * @param string|null $invited_to_airtable_by_user_id A user ID
     *
     * @return self
     */
    public function setInvitedToAirtableByUserId($invited_to_airtable_by_user_id)
    {
        if (is_null($invited_to_airtable_by_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'invited_to_airtable_by_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invited_to_airtable_by_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invited_to_airtable_by_user_id'] = $invited_to_airtable_by_user_id;

        return $this;
    }

    /**
     * Gets is_admin
     *
     * @return bool|null
     */
    public function getIsAdmin()
    {
        return $this->container['is_admin'];
    }

    /**
     * Sets is_admin
     *
     * @param bool|null $is_admin Whether the user has directly assigned admin rights over this enterprise account. Only returned when the user is on a claimed domain. Note: if a user is a super admin but is not directly assigned admin rights over this enterprise account, this field is `false`.
     *
     * @return self
     */
    public function setIsAdmin($is_admin)
    {
        if (is_null($is_admin)) {
            throw new \InvalidArgumentException('non-nullable is_admin cannot be null');
        }
        $this->container['is_admin'] = $is_admin;

        return $this;
    }

    /**
     * Gets is_managed
     *
     * @return bool|null
     */
    public function getIsManaged()
    {
        return $this->container['is_managed'];
    }

    /**
     * Sets is_managed
     *
     * @param bool|null $is_managed Whether the user is managed by this enterprise account. Only returned when the user is on a claimed domain.
     *
     * @return self
     */
    public function setIsManaged($is_managed)
    {
        if (is_null($is_managed)) {
            throw new \InvalidArgumentException('non-nullable is_managed cannot be null');
        }
        $this->container['is_managed'] = $is_managed;

        return $this;
    }

    /**
     * Gets is_service_account
     *
     * @return bool
     */
    public function getIsServiceAccount()
    {
        return $this->container['is_service_account'];
    }

    /**
     * Sets is_service_account
     *
     * @param bool $is_service_account Whether the user is a [service account](https://support.airtable.com/docs/en/service-accounts-overview).
     *
     * @return self
     */
    public function setIsServiceAccount($is_service_account)
    {
        if (is_null($is_service_account)) {
            throw new \InvalidArgumentException('non-nullable is_service_account cannot be null');
        }
        $this->container['is_service_account'] = $is_service_account;

        return $this;
    }

    /**
     * Gets is_sso_required
     *
     * @return bool
     */
    public function getIsSsoRequired()
    {
        return $this->container['is_sso_required'];
    }

    /**
     * Sets is_sso_required
     *
     * @param bool $is_sso_required Whether the user is required to authenticate through their administrating enterprise's identity provider to login. False if user is not on an enterprise.
     *
     * @return self
     */
    public function setIsSsoRequired($is_sso_required)
    {
        if (is_null($is_sso_required)) {
            throw new \InvalidArgumentException('non-nullable is_sso_required cannot be null');
        }
        $this->container['is_sso_required'] = $is_sso_required;

        return $this;
    }

    /**
     * Gets is_super_admin
     *
     * @return bool|null
     */
    public function getIsSuperAdmin()
    {
        return $this->container['is_super_admin'];
    }

    /**
     * Sets is_super_admin
     *
     * @param bool|null $is_super_admin Whether the user has super admin rights over this enterprise account. Only returned when the user is on a claimed domain and the enterprise account has the Enterprise Hub feature enabled.
     *
     * @return self
     */
    public function setIsSuperAdmin($is_super_admin)
    {
        if (is_null($is_super_admin)) {
            throw new \InvalidArgumentException('non-nullable is_super_admin cannot be null');
        }
        $this->container['is_super_admin'] = $is_super_admin;

        return $this;
    }

    /**
     * Gets is_two_factor_auth_enabled
     *
     * @return bool
     */
    public function getIsTwoFactorAuthEnabled()
    {
        return $this->container['is_two_factor_auth_enabled'];
    }

    /**
     * Sets is_two_factor_auth_enabled
     *
     * @param bool $is_two_factor_auth_enabled Whether the user configured a second authentication method when logging in to Airtable through username/password auth.
     *
     * @return self
     */
    public function setIsTwoFactorAuthEnabled($is_two_factor_auth_enabled)
    {
        if (is_null($is_two_factor_auth_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_two_factor_auth_enabled cannot be null');
        }
        $this->container['is_two_factor_auth_enabled'] = $is_two_factor_auth_enabled;

        return $this;
    }

    /**
     * Gets last_activity_time
     *
     * @return string
     */
    public function getLastActivityTime()
    {
        return $this->container['last_activity_time'];
    }

    /**
     * Sets last_activity_time
     *
     * @param string $last_activity_time A date timestamp in the ISO format, eg:\"2018-01-01T00:00:00.000Z\"
     *
     * @return self
     */
    public function setLastActivityTime($last_activity_time)
    {
        if (is_null($last_activity_time)) {
            array_push($this->openAPINullablesSetToNull, 'last_activity_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_activity_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_activity_time'] = $last_activity_time;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state [provisioned](/api/org-management-glossary#provisioned-user) | [deactivated](/api/org-management-glossary#deactivated-user)
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


