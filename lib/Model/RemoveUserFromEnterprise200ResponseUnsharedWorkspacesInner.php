<?php
/**
 * RemoveUserFromEnterprise200ResponseUnsharedWorkspacesInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ez128\Airtable\Model;

use \ArrayAccess;
use \Ez128\Airtable\ObjectSerializer;

/**
 * RemoveUserFromEnterprise200ResponseUnsharedWorkspacesInner Class Doc Comment
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RemoveUserFromEnterprise200ResponseUnsharedWorkspacesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'remove_user_from_enterprise_200_response_unshared_workspaces_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'deleted_time' => 'string',
        'enterprise_account_id' => 'string',
        'former_permission_level' => 'string',
        'user_id' => 'string',
        'workspace_id' => 'string',
        'workspace_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'deleted_time' => null,
        'enterprise_account_id' => null,
        'former_permission_level' => null,
        'user_id' => null,
        'workspace_id' => null,
        'workspace_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'deleted_time' => true,
        'enterprise_account_id' => false,
        'former_permission_level' => false,
        'user_id' => true,
        'workspace_id' => false,
        'workspace_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deleted_time' => 'deletedTime',
        'enterprise_account_id' => 'enterpriseAccountId',
        'former_permission_level' => 'formerPermissionLevel',
        'user_id' => 'userId',
        'workspace_id' => 'workspaceId',
        'workspace_name' => 'workspaceName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deleted_time' => 'setDeletedTime',
        'enterprise_account_id' => 'setEnterpriseAccountId',
        'former_permission_level' => 'setFormerPermissionLevel',
        'user_id' => 'setUserId',
        'workspace_id' => 'setWorkspaceId',
        'workspace_name' => 'setWorkspaceName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deleted_time' => 'getDeletedTime',
        'enterprise_account_id' => 'getEnterpriseAccountId',
        'former_permission_level' => 'getFormerPermissionLevel',
        'user_id' => 'getUserId',
        'workspace_id' => 'getWorkspaceId',
        'workspace_name' => 'getWorkspaceName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FORMER_PERMISSION_LEVEL_NONE = 'none';
    public const FORMER_PERMISSION_LEVEL_READ = 'read';
    public const FORMER_PERMISSION_LEVEL_COMMENT = 'comment';
    public const FORMER_PERMISSION_LEVEL_EDIT = 'edit';
    public const FORMER_PERMISSION_LEVEL_CREATE = 'create';
    public const FORMER_PERMISSION_LEVEL_OWNER = 'owner';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormerPermissionLevelAllowableValues()
    {
        return [
            self::FORMER_PERMISSION_LEVEL_NONE,
            self::FORMER_PERMISSION_LEVEL_READ,
            self::FORMER_PERMISSION_LEVEL_COMMENT,
            self::FORMER_PERMISSION_LEVEL_EDIT,
            self::FORMER_PERMISSION_LEVEL_CREATE,
            self::FORMER_PERMISSION_LEVEL_OWNER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('deleted_time', $data ?? [], null);
        $this->setIfExists('enterprise_account_id', $data ?? [], null);
        $this->setIfExists('former_permission_level', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('workspace_id', $data ?? [], null);
        $this->setIfExists('workspace_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['deleted_time'] === null) {
            $invalidProperties[] = "'deleted_time' can't be null";
        }
        if ($this->container['former_permission_level'] === null) {
            $invalidProperties[] = "'former_permission_level' can't be null";
        }
        $allowedValues = $this->getFormerPermissionLevelAllowableValues();
        if (!is_null($this->container['former_permission_level']) && !in_array($this->container['former_permission_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'former_permission_level', must be one of '%s'",
                $this->container['former_permission_level'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['workspace_id'] === null) {
            $invalidProperties[] = "'workspace_id' can't be null";
        }
        if ($this->container['workspace_name'] === null) {
            $invalidProperties[] = "'workspace_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deleted_time
     *
     * @return string
     */
    public function getDeletedTime()
    {
        return $this->container['deleted_time'];
    }

    /**
     * Sets deleted_time
     *
     * @param string $deleted_time A date timestamp in the ISO format, eg:\"2018-01-01T00:00:00.000Z\"
     *
     * @return self
     */
    public function setDeletedTime($deleted_time)
    {
        if (is_null($deleted_time)) {
            array_push($this->openAPINullablesSetToNull, 'deleted_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted_time'] = $deleted_time;

        return $this;
    }

    /**
     * Gets enterprise_account_id
     *
     * @return string|null
     */
    public function getEnterpriseAccountId()
    {
        return $this->container['enterprise_account_id'];
    }

    /**
     * Sets enterprise_account_id
     *
     * @param string|null $enterprise_account_id Only returned when removeFromDescendants is true
     *
     * @return self
     */
    public function setEnterpriseAccountId($enterprise_account_id)
    {
        if (is_null($enterprise_account_id)) {
            throw new \InvalidArgumentException('non-nullable enterprise_account_id cannot be null');
        }
        $this->container['enterprise_account_id'] = $enterprise_account_id;

        return $this;
    }

    /**
     * Gets former_permission_level
     *
     * @return string
     */
    public function getFormerPermissionLevel()
    {
        return $this->container['former_permission_level'];
    }

    /**
     * Sets former_permission_level
     *
     * @param string $former_permission_level former_permission_level
     *
     * @return self
     */
    public function setFormerPermissionLevel($former_permission_level)
    {
        if (is_null($former_permission_level)) {
            throw new \InvalidArgumentException('non-nullable former_permission_level cannot be null');
        }
        $allowedValues = $this->getFormerPermissionLevelAllowableValues();
        if (!in_array($former_permission_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'former_permission_level', must be one of '%s'",
                    $former_permission_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['former_permission_level'] = $former_permission_level;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id A user ID
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets workspace_id
     *
     * @return string
     */
    public function getWorkspaceId()
    {
        return $this->container['workspace_id'];
    }

    /**
     * Sets workspace_id
     *
     * @param string $workspace_id workspace_id
     *
     * @return self
     */
    public function setWorkspaceId($workspace_id)
    {
        if (is_null($workspace_id)) {
            throw new \InvalidArgumentException('non-nullable workspace_id cannot be null');
        }
        $this->container['workspace_id'] = $workspace_id;

        return $this;
    }

    /**
     * Gets workspace_name
     *
     * @return string
     */
    public function getWorkspaceName()
    {
        return $this->container['workspace_name'];
    }

    /**
     * Sets workspace_name
     *
     * @param string $workspace_name workspace_name
     *
     * @return self
     */
    public function setWorkspaceName($workspace_name)
    {
        if (is_null($workspace_name)) {
            throw new \InvalidArgumentException('non-nullable workspace_name cannot be null');
        }
        $this->container['workspace_name'] = $workspace_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


