<?php
/**
 * CollaboratorsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ez128\Airtable\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Ez128\Airtable\ApiException;
use Ez128\Airtable\Configuration;
use Ez128\Airtable\FormDataProcessor;
use Ez128\Airtable\HeaderSelector;
use Ez128\Airtable\ObjectSerializer;

/**
 * CollaboratorsApi Class Doc Comment
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CollaboratorsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addBaseCollaborator' => [
            'application/json',
        ],
        'addInterfaceCollaborator' => [
            'application/json',
        ],
        'addWorkspaceCollaborator' => [
            'application/json',
        ],
        'deleteBaseCollaborator' => [
            'application/json',
        ],
        'deleteInterfaceCollaborator' => [
            'application/json',
        ],
        'deleteWorkspaceCollaborator' => [
            'application/json',
        ],
        'getBaseCollaborators' => [
            'application/json',
        ],
        'getInterface' => [
            'application/json',
        ],
        'getWorkspaceCollaborators' => [
            'application/json',
        ],
        'updateCollaboratorBasePermission' => [
            'application/json',
        ],
        'updateInterfaceCollaborator' => [
            'application/json',
        ],
        'updateWorkspaceCollaborator' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addBaseCollaborator
     *
     * Add base collaborator
     *
     * @param  string $base_id base_id (required)
     * @param  \Ez128\Airtable\Model\AddBaseCollaboratorRequest|null $add_base_collaborator_request add_base_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBaseCollaborator'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addBaseCollaborator($base_id, $add_base_collaborator_request = null, string $contentType = self::contentTypes['addBaseCollaborator'][0])
    {
        $this->addBaseCollaboratorWithHttpInfo($base_id, $add_base_collaborator_request, $contentType);
    }

    /**
     * Operation addBaseCollaboratorWithHttpInfo
     *
     * Add base collaborator
     *
     * @param  string $base_id (required)
     * @param  \Ez128\Airtable\Model\AddBaseCollaboratorRequest|null $add_base_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBaseCollaborator'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addBaseCollaboratorWithHttpInfo($base_id, $add_base_collaborator_request = null, string $contentType = self::contentTypes['addBaseCollaborator'][0])
    {
        $request = $this->addBaseCollaboratorRequest($base_id, $add_base_collaborator_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation addBaseCollaboratorAsync
     *
     * Add base collaborator
     *
     * @param  string $base_id (required)
     * @param  \Ez128\Airtable\Model\AddBaseCollaboratorRequest|null $add_base_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBaseCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addBaseCollaboratorAsync($base_id, $add_base_collaborator_request = null, string $contentType = self::contentTypes['addBaseCollaborator'][0])
    {
        return $this->addBaseCollaboratorAsyncWithHttpInfo($base_id, $add_base_collaborator_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addBaseCollaboratorAsyncWithHttpInfo
     *
     * Add base collaborator
     *
     * @param  string $base_id (required)
     * @param  \Ez128\Airtable\Model\AddBaseCollaboratorRequest|null $add_base_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBaseCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addBaseCollaboratorAsyncWithHttpInfo($base_id, $add_base_collaborator_request = null, string $contentType = self::contentTypes['addBaseCollaborator'][0])
    {
        $returnType = '';
        $request = $this->addBaseCollaboratorRequest($base_id, $add_base_collaborator_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addBaseCollaborator'
     *
     * @param  string $base_id (required)
     * @param  \Ez128\Airtable\Model\AddBaseCollaboratorRequest|null $add_base_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBaseCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addBaseCollaboratorRequest($base_id, $add_base_collaborator_request = null, string $contentType = self::contentTypes['addBaseCollaborator'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling addBaseCollaborator'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling CollaboratorsApi.addBaseCollaborator, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/bases/{baseId}/collaborators';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_base_collaborator_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_base_collaborator_request));
            } else {
                $httpBody = $add_base_collaborator_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addInterfaceCollaborator
     *
     * Add interface collaborator
     *
     * @param  string $base_id base_id (required)
     * @param  string $page_bundle_id page_bundle_id (required)
     * @param  \Ez128\Airtable\Model\AddInterfaceCollaboratorRequest|null $add_interface_collaborator_request add_interface_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addInterfaceCollaborator'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addInterfaceCollaborator($base_id, $page_bundle_id, $add_interface_collaborator_request = null, string $contentType = self::contentTypes['addInterfaceCollaborator'][0])
    {
        $this->addInterfaceCollaboratorWithHttpInfo($base_id, $page_bundle_id, $add_interface_collaborator_request, $contentType);
    }

    /**
     * Operation addInterfaceCollaboratorWithHttpInfo
     *
     * Add interface collaborator
     *
     * @param  string $base_id (required)
     * @param  string $page_bundle_id (required)
     * @param  \Ez128\Airtable\Model\AddInterfaceCollaboratorRequest|null $add_interface_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addInterfaceCollaborator'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addInterfaceCollaboratorWithHttpInfo($base_id, $page_bundle_id, $add_interface_collaborator_request = null, string $contentType = self::contentTypes['addInterfaceCollaborator'][0])
    {
        $request = $this->addInterfaceCollaboratorRequest($base_id, $page_bundle_id, $add_interface_collaborator_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation addInterfaceCollaboratorAsync
     *
     * Add interface collaborator
     *
     * @param  string $base_id (required)
     * @param  string $page_bundle_id (required)
     * @param  \Ez128\Airtable\Model\AddInterfaceCollaboratorRequest|null $add_interface_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addInterfaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInterfaceCollaboratorAsync($base_id, $page_bundle_id, $add_interface_collaborator_request = null, string $contentType = self::contentTypes['addInterfaceCollaborator'][0])
    {
        return $this->addInterfaceCollaboratorAsyncWithHttpInfo($base_id, $page_bundle_id, $add_interface_collaborator_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addInterfaceCollaboratorAsyncWithHttpInfo
     *
     * Add interface collaborator
     *
     * @param  string $base_id (required)
     * @param  string $page_bundle_id (required)
     * @param  \Ez128\Airtable\Model\AddInterfaceCollaboratorRequest|null $add_interface_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addInterfaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInterfaceCollaboratorAsyncWithHttpInfo($base_id, $page_bundle_id, $add_interface_collaborator_request = null, string $contentType = self::contentTypes['addInterfaceCollaborator'][0])
    {
        $returnType = '';
        $request = $this->addInterfaceCollaboratorRequest($base_id, $page_bundle_id, $add_interface_collaborator_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addInterfaceCollaborator'
     *
     * @param  string $base_id (required)
     * @param  string $page_bundle_id (required)
     * @param  \Ez128\Airtable\Model\AddInterfaceCollaboratorRequest|null $add_interface_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addInterfaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addInterfaceCollaboratorRequest($base_id, $page_bundle_id, $add_interface_collaborator_request = null, string $contentType = self::contentTypes['addInterfaceCollaborator'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling addInterfaceCollaborator'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling CollaboratorsApi.addInterfaceCollaborator, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'page_bundle_id' is set
        if ($page_bundle_id === null || (is_array($page_bundle_id) && count($page_bundle_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_bundle_id when calling addInterfaceCollaborator'
            );
        }
        if (!preg_match("/pbd[0-9a-zA-Z]{14}$/", $page_bundle_id)) {
            throw new \InvalidArgumentException("invalid value for \"page_bundle_id\" when calling CollaboratorsApi.addInterfaceCollaborator, must conform to the pattern /pbd[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/bases/{baseId}/interfaces/{pageBundleId}/collaborators';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }
        // path params
        if ($page_bundle_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pageBundleId' . '}',
                ObjectSerializer::toPathValue($page_bundle_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_interface_collaborator_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_interface_collaborator_request));
            } else {
                $httpBody = $add_interface_collaborator_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addWorkspaceCollaborator
     *
     * Add workspace collaborator
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  \Ez128\Airtable\Model\AddWorkspaceCollaboratorRequest|null $add_workspace_collaborator_request add_workspace_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addWorkspaceCollaborator'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addWorkspaceCollaborator($workspace_id, $add_workspace_collaborator_request = null, string $contentType = self::contentTypes['addWorkspaceCollaborator'][0])
    {
        $this->addWorkspaceCollaboratorWithHttpInfo($workspace_id, $add_workspace_collaborator_request, $contentType);
    }

    /**
     * Operation addWorkspaceCollaboratorWithHttpInfo
     *
     * Add workspace collaborator
     *
     * @param  string $workspace_id (required)
     * @param  \Ez128\Airtable\Model\AddWorkspaceCollaboratorRequest|null $add_workspace_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addWorkspaceCollaborator'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addWorkspaceCollaboratorWithHttpInfo($workspace_id, $add_workspace_collaborator_request = null, string $contentType = self::contentTypes['addWorkspaceCollaborator'][0])
    {
        $request = $this->addWorkspaceCollaboratorRequest($workspace_id, $add_workspace_collaborator_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation addWorkspaceCollaboratorAsync
     *
     * Add workspace collaborator
     *
     * @param  string $workspace_id (required)
     * @param  \Ez128\Airtable\Model\AddWorkspaceCollaboratorRequest|null $add_workspace_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addWorkspaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addWorkspaceCollaboratorAsync($workspace_id, $add_workspace_collaborator_request = null, string $contentType = self::contentTypes['addWorkspaceCollaborator'][0])
    {
        return $this->addWorkspaceCollaboratorAsyncWithHttpInfo($workspace_id, $add_workspace_collaborator_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addWorkspaceCollaboratorAsyncWithHttpInfo
     *
     * Add workspace collaborator
     *
     * @param  string $workspace_id (required)
     * @param  \Ez128\Airtable\Model\AddWorkspaceCollaboratorRequest|null $add_workspace_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addWorkspaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addWorkspaceCollaboratorAsyncWithHttpInfo($workspace_id, $add_workspace_collaborator_request = null, string $contentType = self::contentTypes['addWorkspaceCollaborator'][0])
    {
        $returnType = '';
        $request = $this->addWorkspaceCollaboratorRequest($workspace_id, $add_workspace_collaborator_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addWorkspaceCollaborator'
     *
     * @param  string $workspace_id (required)
     * @param  \Ez128\Airtable\Model\AddWorkspaceCollaboratorRequest|null $add_workspace_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addWorkspaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addWorkspaceCollaboratorRequest($workspace_id, $add_workspace_collaborator_request = null, string $contentType = self::contentTypes['addWorkspaceCollaborator'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling addWorkspaceCollaborator'
            );
        }
        if (!preg_match("/wsp[0-9a-zA-Z]{14}$/", $workspace_id)) {
            throw new \InvalidArgumentException("invalid value for \"workspace_id\" when calling CollaboratorsApi.addWorkspaceCollaborator, must conform to the pattern /wsp[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/workspaces/{workspaceId}/collaborators';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_workspace_collaborator_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_workspace_collaborator_request));
            } else {
                $httpBody = $add_workspace_collaborator_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBaseCollaborator
     *
     * Delete base collaborator
     *
     * @param  string $base_id base_id (required)
     * @param  string $user_or_group_id user_or_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBaseCollaborator'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteBaseCollaborator($base_id, $user_or_group_id, string $contentType = self::contentTypes['deleteBaseCollaborator'][0])
    {
        $this->deleteBaseCollaboratorWithHttpInfo($base_id, $user_or_group_id, $contentType);
    }

    /**
     * Operation deleteBaseCollaboratorWithHttpInfo
     *
     * Delete base collaborator
     *
     * @param  string $base_id (required)
     * @param  string $user_or_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBaseCollaborator'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBaseCollaboratorWithHttpInfo($base_id, $user_or_group_id, string $contentType = self::contentTypes['deleteBaseCollaborator'][0])
    {
        $request = $this->deleteBaseCollaboratorRequest($base_id, $user_or_group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteBaseCollaboratorAsync
     *
     * Delete base collaborator
     *
     * @param  string $base_id (required)
     * @param  string $user_or_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBaseCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBaseCollaboratorAsync($base_id, $user_or_group_id, string $contentType = self::contentTypes['deleteBaseCollaborator'][0])
    {
        return $this->deleteBaseCollaboratorAsyncWithHttpInfo($base_id, $user_or_group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBaseCollaboratorAsyncWithHttpInfo
     *
     * Delete base collaborator
     *
     * @param  string $base_id (required)
     * @param  string $user_or_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBaseCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBaseCollaboratorAsyncWithHttpInfo($base_id, $user_or_group_id, string $contentType = self::contentTypes['deleteBaseCollaborator'][0])
    {
        $returnType = '';
        $request = $this->deleteBaseCollaboratorRequest($base_id, $user_or_group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBaseCollaborator'
     *
     * @param  string $base_id (required)
     * @param  string $user_or_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBaseCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBaseCollaboratorRequest($base_id, $user_or_group_id, string $contentType = self::contentTypes['deleteBaseCollaborator'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling deleteBaseCollaborator'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling CollaboratorsApi.deleteBaseCollaborator, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'user_or_group_id' is set
        if ($user_or_group_id === null || (is_array($user_or_group_id) && count($user_or_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_or_group_id when calling deleteBaseCollaborator'
            );
        }
        if (!preg_match("/usr[0-9a-zA-Z]{14}|ugp[0-9a-zA-Z]{14}$/", $user_or_group_id)) {
            throw new \InvalidArgumentException("invalid value for \"user_or_group_id\" when calling CollaboratorsApi.deleteBaseCollaborator, must conform to the pattern /usr[0-9a-zA-Z]{14}|ugp[0-9a-zA-Z]{14}$/.");
        }
        

        $resourcePath = '/v0/meta/bases/{baseId}/collaborators/{userOrGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }
        // path params
        if ($user_or_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userOrGroupId' . '}',
                ObjectSerializer::toPathValue($user_or_group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteInterfaceCollaborator
     *
     * Delete interface collaborator
     *
     * @param  string $base_id base_id (required)
     * @param  string $page_bundle_id page_bundle_id (required)
     * @param  string $user_or_group_id user_or_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteInterfaceCollaborator'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteInterfaceCollaborator($base_id, $page_bundle_id, $user_or_group_id, string $contentType = self::contentTypes['deleteInterfaceCollaborator'][0])
    {
        $this->deleteInterfaceCollaboratorWithHttpInfo($base_id, $page_bundle_id, $user_or_group_id, $contentType);
    }

    /**
     * Operation deleteInterfaceCollaboratorWithHttpInfo
     *
     * Delete interface collaborator
     *
     * @param  string $base_id (required)
     * @param  string $page_bundle_id (required)
     * @param  string $user_or_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteInterfaceCollaborator'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteInterfaceCollaboratorWithHttpInfo($base_id, $page_bundle_id, $user_or_group_id, string $contentType = self::contentTypes['deleteInterfaceCollaborator'][0])
    {
        $request = $this->deleteInterfaceCollaboratorRequest($base_id, $page_bundle_id, $user_or_group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteInterfaceCollaboratorAsync
     *
     * Delete interface collaborator
     *
     * @param  string $base_id (required)
     * @param  string $page_bundle_id (required)
     * @param  string $user_or_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteInterfaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInterfaceCollaboratorAsync($base_id, $page_bundle_id, $user_or_group_id, string $contentType = self::contentTypes['deleteInterfaceCollaborator'][0])
    {
        return $this->deleteInterfaceCollaboratorAsyncWithHttpInfo($base_id, $page_bundle_id, $user_or_group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteInterfaceCollaboratorAsyncWithHttpInfo
     *
     * Delete interface collaborator
     *
     * @param  string $base_id (required)
     * @param  string $page_bundle_id (required)
     * @param  string $user_or_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteInterfaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInterfaceCollaboratorAsyncWithHttpInfo($base_id, $page_bundle_id, $user_or_group_id, string $contentType = self::contentTypes['deleteInterfaceCollaborator'][0])
    {
        $returnType = '';
        $request = $this->deleteInterfaceCollaboratorRequest($base_id, $page_bundle_id, $user_or_group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteInterfaceCollaborator'
     *
     * @param  string $base_id (required)
     * @param  string $page_bundle_id (required)
     * @param  string $user_or_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteInterfaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteInterfaceCollaboratorRequest($base_id, $page_bundle_id, $user_or_group_id, string $contentType = self::contentTypes['deleteInterfaceCollaborator'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling deleteInterfaceCollaborator'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling CollaboratorsApi.deleteInterfaceCollaborator, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'page_bundle_id' is set
        if ($page_bundle_id === null || (is_array($page_bundle_id) && count($page_bundle_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_bundle_id when calling deleteInterfaceCollaborator'
            );
        }
        if (!preg_match("/pbd[0-9a-zA-Z]{14}$/", $page_bundle_id)) {
            throw new \InvalidArgumentException("invalid value for \"page_bundle_id\" when calling CollaboratorsApi.deleteInterfaceCollaborator, must conform to the pattern /pbd[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'user_or_group_id' is set
        if ($user_or_group_id === null || (is_array($user_or_group_id) && count($user_or_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_or_group_id when calling deleteInterfaceCollaborator'
            );
        }
        if (!preg_match("/usr[0-9a-zA-Z]{14}|ugp[0-9a-zA-Z]{14}$/", $user_or_group_id)) {
            throw new \InvalidArgumentException("invalid value for \"user_or_group_id\" when calling CollaboratorsApi.deleteInterfaceCollaborator, must conform to the pattern /usr[0-9a-zA-Z]{14}|ugp[0-9a-zA-Z]{14}$/.");
        }
        

        $resourcePath = '/v0/meta/bases/{baseId}/interfaces/{pageBundleId}/collaborators/{userOrGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }
        // path params
        if ($page_bundle_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pageBundleId' . '}',
                ObjectSerializer::toPathValue($page_bundle_id),
                $resourcePath
            );
        }
        // path params
        if ($user_or_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userOrGroupId' . '}',
                ObjectSerializer::toPathValue($user_or_group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkspaceCollaborator
     *
     * Delete workspace collaborator
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  string $user_or_group_id user_or_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkspaceCollaborator'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteWorkspaceCollaborator($workspace_id, $user_or_group_id, string $contentType = self::contentTypes['deleteWorkspaceCollaborator'][0])
    {
        $this->deleteWorkspaceCollaboratorWithHttpInfo($workspace_id, $user_or_group_id, $contentType);
    }

    /**
     * Operation deleteWorkspaceCollaboratorWithHttpInfo
     *
     * Delete workspace collaborator
     *
     * @param  string $workspace_id (required)
     * @param  string $user_or_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkspaceCollaborator'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkspaceCollaboratorWithHttpInfo($workspace_id, $user_or_group_id, string $contentType = self::contentTypes['deleteWorkspaceCollaborator'][0])
    {
        $request = $this->deleteWorkspaceCollaboratorRequest($workspace_id, $user_or_group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteWorkspaceCollaboratorAsync
     *
     * Delete workspace collaborator
     *
     * @param  string $workspace_id (required)
     * @param  string $user_or_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkspaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkspaceCollaboratorAsync($workspace_id, $user_or_group_id, string $contentType = self::contentTypes['deleteWorkspaceCollaborator'][0])
    {
        return $this->deleteWorkspaceCollaboratorAsyncWithHttpInfo($workspace_id, $user_or_group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWorkspaceCollaboratorAsyncWithHttpInfo
     *
     * Delete workspace collaborator
     *
     * @param  string $workspace_id (required)
     * @param  string $user_or_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkspaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkspaceCollaboratorAsyncWithHttpInfo($workspace_id, $user_or_group_id, string $contentType = self::contentTypes['deleteWorkspaceCollaborator'][0])
    {
        $returnType = '';
        $request = $this->deleteWorkspaceCollaboratorRequest($workspace_id, $user_or_group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWorkspaceCollaborator'
     *
     * @param  string $workspace_id (required)
     * @param  string $user_or_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWorkspaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteWorkspaceCollaboratorRequest($workspace_id, $user_or_group_id, string $contentType = self::contentTypes['deleteWorkspaceCollaborator'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling deleteWorkspaceCollaborator'
            );
        }
        if (!preg_match("/wsp[0-9a-zA-Z]{14}$/", $workspace_id)) {
            throw new \InvalidArgumentException("invalid value for \"workspace_id\" when calling CollaboratorsApi.deleteWorkspaceCollaborator, must conform to the pattern /wsp[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'user_or_group_id' is set
        if ($user_or_group_id === null || (is_array($user_or_group_id) && count($user_or_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_or_group_id when calling deleteWorkspaceCollaborator'
            );
        }
        if (!preg_match("/usr[0-9a-zA-Z]{14}|ugp[0-9a-zA-Z]{14}$/", $user_or_group_id)) {
            throw new \InvalidArgumentException("invalid value for \"user_or_group_id\" when calling CollaboratorsApi.deleteWorkspaceCollaborator, must conform to the pattern /usr[0-9a-zA-Z]{14}|ugp[0-9a-zA-Z]{14}$/.");
        }
        

        $resourcePath = '/v0/meta/workspaces/{workspaceId}/collaborators/{userOrGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }
        // path params
        if ($user_or_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userOrGroupId' . '}',
                ObjectSerializer::toPathValue($user_or_group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBaseCollaborators
     *
     * Get base collaborators
     *
     * @param  string $base_id base_id (required)
     * @param  string[]|null $include include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBaseCollaborators'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\GetBaseCollaborators200Response
     */
    public function getBaseCollaborators($base_id, $include = null, string $contentType = self::contentTypes['getBaseCollaborators'][0])
    {
        list($response) = $this->getBaseCollaboratorsWithHttpInfo($base_id, $include, $contentType);
        return $response;
    }

    /**
     * Operation getBaseCollaboratorsWithHttpInfo
     *
     * Get base collaborators
     *
     * @param  string $base_id (required)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBaseCollaborators'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\GetBaseCollaborators200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBaseCollaboratorsWithHttpInfo($base_id, $include = null, string $contentType = self::contentTypes['getBaseCollaborators'][0])
    {
        $request = $this->getBaseCollaboratorsRequest($base_id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\GetBaseCollaborators200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\GetBaseCollaborators200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\GetBaseCollaborators200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getBaseCollaboratorsAsync
     *
     * Get base collaborators
     *
     * @param  string $base_id (required)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBaseCollaborators'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBaseCollaboratorsAsync($base_id, $include = null, string $contentType = self::contentTypes['getBaseCollaborators'][0])
    {
        return $this->getBaseCollaboratorsAsyncWithHttpInfo($base_id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBaseCollaboratorsAsyncWithHttpInfo
     *
     * Get base collaborators
     *
     * @param  string $base_id (required)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBaseCollaborators'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBaseCollaboratorsAsyncWithHttpInfo($base_id, $include = null, string $contentType = self::contentTypes['getBaseCollaborators'][0])
    {
        $returnType = '\Ez128\Airtable\Model\GetBaseCollaborators200Response';
        $request = $this->getBaseCollaboratorsRequest($base_id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBaseCollaborators'
     *
     * @param  string $base_id (required)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBaseCollaborators'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBaseCollaboratorsRequest($base_id, $include = null, string $contentType = self::contentTypes['getBaseCollaborators'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling getBaseCollaborators'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling CollaboratorsApi.getBaseCollaborators, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/bases/{baseId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInterface
     *
     * Get interface
     *
     * @param  string $base_id base_id (required)
     * @param  string $page_bundle_id page_bundle_id (required)
     * @param  string[]|null $include include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInterface'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\GetInterface200Response
     */
    public function getInterface($base_id, $page_bundle_id, $include = null, string $contentType = self::contentTypes['getInterface'][0])
    {
        list($response) = $this->getInterfaceWithHttpInfo($base_id, $page_bundle_id, $include, $contentType);
        return $response;
    }

    /**
     * Operation getInterfaceWithHttpInfo
     *
     * Get interface
     *
     * @param  string $base_id (required)
     * @param  string $page_bundle_id (required)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInterface'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\GetInterface200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInterfaceWithHttpInfo($base_id, $page_bundle_id, $include = null, string $contentType = self::contentTypes['getInterface'][0])
    {
        $request = $this->getInterfaceRequest($base_id, $page_bundle_id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\GetInterface200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\GetInterface200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\GetInterface200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getInterfaceAsync
     *
     * Get interface
     *
     * @param  string $base_id (required)
     * @param  string $page_bundle_id (required)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInterfaceAsync($base_id, $page_bundle_id, $include = null, string $contentType = self::contentTypes['getInterface'][0])
    {
        return $this->getInterfaceAsyncWithHttpInfo($base_id, $page_bundle_id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInterfaceAsyncWithHttpInfo
     *
     * Get interface
     *
     * @param  string $base_id (required)
     * @param  string $page_bundle_id (required)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInterfaceAsyncWithHttpInfo($base_id, $page_bundle_id, $include = null, string $contentType = self::contentTypes['getInterface'][0])
    {
        $returnType = '\Ez128\Airtable\Model\GetInterface200Response';
        $request = $this->getInterfaceRequest($base_id, $page_bundle_id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInterface'
     *
     * @param  string $base_id (required)
     * @param  string $page_bundle_id (required)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInterfaceRequest($base_id, $page_bundle_id, $include = null, string $contentType = self::contentTypes['getInterface'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling getInterface'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling CollaboratorsApi.getInterface, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'page_bundle_id' is set
        if ($page_bundle_id === null || (is_array($page_bundle_id) && count($page_bundle_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_bundle_id when calling getInterface'
            );
        }
        if (!preg_match("/pbd[0-9a-zA-Z]{14}$/", $page_bundle_id)) {
            throw new \InvalidArgumentException("invalid value for \"page_bundle_id\" when calling CollaboratorsApi.getInterface, must conform to the pattern /pbd[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/bases/{baseId}/interfaces/{pageBundleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }
        // path params
        if ($page_bundle_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pageBundleId' . '}',
                ObjectSerializer::toPathValue($page_bundle_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkspaceCollaborators
     *
     * Get workspace collaborators
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  string[]|null $include include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWorkspaceCollaborators'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\GetWorkspaceCollaborators200Response
     */
    public function getWorkspaceCollaborators($workspace_id, $include = null, string $contentType = self::contentTypes['getWorkspaceCollaborators'][0])
    {
        list($response) = $this->getWorkspaceCollaboratorsWithHttpInfo($workspace_id, $include, $contentType);
        return $response;
    }

    /**
     * Operation getWorkspaceCollaboratorsWithHttpInfo
     *
     * Get workspace collaborators
     *
     * @param  string $workspace_id (required)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWorkspaceCollaborators'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\GetWorkspaceCollaborators200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkspaceCollaboratorsWithHttpInfo($workspace_id, $include = null, string $contentType = self::contentTypes['getWorkspaceCollaborators'][0])
    {
        $request = $this->getWorkspaceCollaboratorsRequest($workspace_id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\GetWorkspaceCollaborators200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\GetWorkspaceCollaborators200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\GetWorkspaceCollaborators200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getWorkspaceCollaboratorsAsync
     *
     * Get workspace collaborators
     *
     * @param  string $workspace_id (required)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWorkspaceCollaborators'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkspaceCollaboratorsAsync($workspace_id, $include = null, string $contentType = self::contentTypes['getWorkspaceCollaborators'][0])
    {
        return $this->getWorkspaceCollaboratorsAsyncWithHttpInfo($workspace_id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWorkspaceCollaboratorsAsyncWithHttpInfo
     *
     * Get workspace collaborators
     *
     * @param  string $workspace_id (required)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWorkspaceCollaborators'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkspaceCollaboratorsAsyncWithHttpInfo($workspace_id, $include = null, string $contentType = self::contentTypes['getWorkspaceCollaborators'][0])
    {
        $returnType = '\Ez128\Airtable\Model\GetWorkspaceCollaborators200Response';
        $request = $this->getWorkspaceCollaboratorsRequest($workspace_id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWorkspaceCollaborators'
     *
     * @param  string $workspace_id (required)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWorkspaceCollaborators'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWorkspaceCollaboratorsRequest($workspace_id, $include = null, string $contentType = self::contentTypes['getWorkspaceCollaborators'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling getWorkspaceCollaborators'
            );
        }
        if (!preg_match("/wsp[0-9a-zA-Z]{14}$/", $workspace_id)) {
            throw new \InvalidArgumentException("invalid value for \"workspace_id\" when calling CollaboratorsApi.getWorkspaceCollaborators, must conform to the pattern /wsp[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/workspaces/{workspaceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCollaboratorBasePermission
     *
     * Update collaborator base permission
     *
     * @param  string $base_id base_id (required)
     * @param  string $user_or_group_id user_or_group_id (required)
     * @param  \Ez128\Airtable\Model\UpdateCollaboratorBasePermissionRequest|null $update_collaborator_base_permission_request update_collaborator_base_permission_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCollaboratorBasePermission'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateCollaboratorBasePermission($base_id, $user_or_group_id, $update_collaborator_base_permission_request = null, string $contentType = self::contentTypes['updateCollaboratorBasePermission'][0])
    {
        $this->updateCollaboratorBasePermissionWithHttpInfo($base_id, $user_or_group_id, $update_collaborator_base_permission_request, $contentType);
    }

    /**
     * Operation updateCollaboratorBasePermissionWithHttpInfo
     *
     * Update collaborator base permission
     *
     * @param  string $base_id (required)
     * @param  string $user_or_group_id (required)
     * @param  \Ez128\Airtable\Model\UpdateCollaboratorBasePermissionRequest|null $update_collaborator_base_permission_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCollaboratorBasePermission'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCollaboratorBasePermissionWithHttpInfo($base_id, $user_or_group_id, $update_collaborator_base_permission_request = null, string $contentType = self::contentTypes['updateCollaboratorBasePermission'][0])
    {
        $request = $this->updateCollaboratorBasePermissionRequest($base_id, $user_or_group_id, $update_collaborator_base_permission_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateCollaboratorBasePermissionAsync
     *
     * Update collaborator base permission
     *
     * @param  string $base_id (required)
     * @param  string $user_or_group_id (required)
     * @param  \Ez128\Airtable\Model\UpdateCollaboratorBasePermissionRequest|null $update_collaborator_base_permission_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCollaboratorBasePermission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCollaboratorBasePermissionAsync($base_id, $user_or_group_id, $update_collaborator_base_permission_request = null, string $contentType = self::contentTypes['updateCollaboratorBasePermission'][0])
    {
        return $this->updateCollaboratorBasePermissionAsyncWithHttpInfo($base_id, $user_or_group_id, $update_collaborator_base_permission_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCollaboratorBasePermissionAsyncWithHttpInfo
     *
     * Update collaborator base permission
     *
     * @param  string $base_id (required)
     * @param  string $user_or_group_id (required)
     * @param  \Ez128\Airtable\Model\UpdateCollaboratorBasePermissionRequest|null $update_collaborator_base_permission_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCollaboratorBasePermission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCollaboratorBasePermissionAsyncWithHttpInfo($base_id, $user_or_group_id, $update_collaborator_base_permission_request = null, string $contentType = self::contentTypes['updateCollaboratorBasePermission'][0])
    {
        $returnType = '';
        $request = $this->updateCollaboratorBasePermissionRequest($base_id, $user_or_group_id, $update_collaborator_base_permission_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCollaboratorBasePermission'
     *
     * @param  string $base_id (required)
     * @param  string $user_or_group_id (required)
     * @param  \Ez128\Airtable\Model\UpdateCollaboratorBasePermissionRequest|null $update_collaborator_base_permission_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCollaboratorBasePermission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCollaboratorBasePermissionRequest($base_id, $user_or_group_id, $update_collaborator_base_permission_request = null, string $contentType = self::contentTypes['updateCollaboratorBasePermission'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling updateCollaboratorBasePermission'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling CollaboratorsApi.updateCollaboratorBasePermission, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'user_or_group_id' is set
        if ($user_or_group_id === null || (is_array($user_or_group_id) && count($user_or_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_or_group_id when calling updateCollaboratorBasePermission'
            );
        }
        if (!preg_match("/usr[0-9a-zA-Z]{14}|ugp[0-9a-zA-Z]{14}$/", $user_or_group_id)) {
            throw new \InvalidArgumentException("invalid value for \"user_or_group_id\" when calling CollaboratorsApi.updateCollaboratorBasePermission, must conform to the pattern /usr[0-9a-zA-Z]{14}|ugp[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/bases/{baseId}/collaborators/{userOrGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }
        // path params
        if ($user_or_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userOrGroupId' . '}',
                ObjectSerializer::toPathValue($user_or_group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_collaborator_base_permission_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_collaborator_base_permission_request));
            } else {
                $httpBody = $update_collaborator_base_permission_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateInterfaceCollaborator
     *
     * Update interface collaborator
     *
     * @param  string $base_id base_id (required)
     * @param  string $page_bundle_id page_bundle_id (required)
     * @param  string $user_or_group_id user_or_group_id (required)
     * @param  \Ez128\Airtable\Model\UpdateInterfaceCollaboratorRequest|null $update_interface_collaborator_request update_interface_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInterfaceCollaborator'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateInterfaceCollaborator($base_id, $page_bundle_id, $user_or_group_id, $update_interface_collaborator_request = null, string $contentType = self::contentTypes['updateInterfaceCollaborator'][0])
    {
        $this->updateInterfaceCollaboratorWithHttpInfo($base_id, $page_bundle_id, $user_or_group_id, $update_interface_collaborator_request, $contentType);
    }

    /**
     * Operation updateInterfaceCollaboratorWithHttpInfo
     *
     * Update interface collaborator
     *
     * @param  string $base_id (required)
     * @param  string $page_bundle_id (required)
     * @param  string $user_or_group_id (required)
     * @param  \Ez128\Airtable\Model\UpdateInterfaceCollaboratorRequest|null $update_interface_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInterfaceCollaborator'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInterfaceCollaboratorWithHttpInfo($base_id, $page_bundle_id, $user_or_group_id, $update_interface_collaborator_request = null, string $contentType = self::contentTypes['updateInterfaceCollaborator'][0])
    {
        $request = $this->updateInterfaceCollaboratorRequest($base_id, $page_bundle_id, $user_or_group_id, $update_interface_collaborator_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateInterfaceCollaboratorAsync
     *
     * Update interface collaborator
     *
     * @param  string $base_id (required)
     * @param  string $page_bundle_id (required)
     * @param  string $user_or_group_id (required)
     * @param  \Ez128\Airtable\Model\UpdateInterfaceCollaboratorRequest|null $update_interface_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInterfaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInterfaceCollaboratorAsync($base_id, $page_bundle_id, $user_or_group_id, $update_interface_collaborator_request = null, string $contentType = self::contentTypes['updateInterfaceCollaborator'][0])
    {
        return $this->updateInterfaceCollaboratorAsyncWithHttpInfo($base_id, $page_bundle_id, $user_or_group_id, $update_interface_collaborator_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInterfaceCollaboratorAsyncWithHttpInfo
     *
     * Update interface collaborator
     *
     * @param  string $base_id (required)
     * @param  string $page_bundle_id (required)
     * @param  string $user_or_group_id (required)
     * @param  \Ez128\Airtable\Model\UpdateInterfaceCollaboratorRequest|null $update_interface_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInterfaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInterfaceCollaboratorAsyncWithHttpInfo($base_id, $page_bundle_id, $user_or_group_id, $update_interface_collaborator_request = null, string $contentType = self::contentTypes['updateInterfaceCollaborator'][0])
    {
        $returnType = '';
        $request = $this->updateInterfaceCollaboratorRequest($base_id, $page_bundle_id, $user_or_group_id, $update_interface_collaborator_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInterfaceCollaborator'
     *
     * @param  string $base_id (required)
     * @param  string $page_bundle_id (required)
     * @param  string $user_or_group_id (required)
     * @param  \Ez128\Airtable\Model\UpdateInterfaceCollaboratorRequest|null $update_interface_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInterfaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateInterfaceCollaboratorRequest($base_id, $page_bundle_id, $user_or_group_id, $update_interface_collaborator_request = null, string $contentType = self::contentTypes['updateInterfaceCollaborator'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling updateInterfaceCollaborator'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling CollaboratorsApi.updateInterfaceCollaborator, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'page_bundle_id' is set
        if ($page_bundle_id === null || (is_array($page_bundle_id) && count($page_bundle_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_bundle_id when calling updateInterfaceCollaborator'
            );
        }
        if (!preg_match("/pbd[0-9a-zA-Z]{14}$/", $page_bundle_id)) {
            throw new \InvalidArgumentException("invalid value for \"page_bundle_id\" when calling CollaboratorsApi.updateInterfaceCollaborator, must conform to the pattern /pbd[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'user_or_group_id' is set
        if ($user_or_group_id === null || (is_array($user_or_group_id) && count($user_or_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_or_group_id when calling updateInterfaceCollaborator'
            );
        }
        if (!preg_match("/usr[0-9a-zA-Z]{14}|ugp[0-9a-zA-Z]{14}$/", $user_or_group_id)) {
            throw new \InvalidArgumentException("invalid value for \"user_or_group_id\" when calling CollaboratorsApi.updateInterfaceCollaborator, must conform to the pattern /usr[0-9a-zA-Z]{14}|ugp[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/bases/{baseId}/interfaces/{pageBundleId}/collaborators/{userOrGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }
        // path params
        if ($page_bundle_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pageBundleId' . '}',
                ObjectSerializer::toPathValue($page_bundle_id),
                $resourcePath
            );
        }
        // path params
        if ($user_or_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userOrGroupId' . '}',
                ObjectSerializer::toPathValue($user_or_group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_interface_collaborator_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_interface_collaborator_request));
            } else {
                $httpBody = $update_interface_collaborator_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWorkspaceCollaborator
     *
     * Update workspace collaborator
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  string $user_or_group_id user_or_group_id (required)
     * @param  \Ez128\Airtable\Model\UpdateWorkspaceCollaboratorRequest|null $update_workspace_collaborator_request update_workspace_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkspaceCollaborator'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateWorkspaceCollaborator($workspace_id, $user_or_group_id, $update_workspace_collaborator_request = null, string $contentType = self::contentTypes['updateWorkspaceCollaborator'][0])
    {
        $this->updateWorkspaceCollaboratorWithHttpInfo($workspace_id, $user_or_group_id, $update_workspace_collaborator_request, $contentType);
    }

    /**
     * Operation updateWorkspaceCollaboratorWithHttpInfo
     *
     * Update workspace collaborator
     *
     * @param  string $workspace_id (required)
     * @param  string $user_or_group_id (required)
     * @param  \Ez128\Airtable\Model\UpdateWorkspaceCollaboratorRequest|null $update_workspace_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkspaceCollaborator'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkspaceCollaboratorWithHttpInfo($workspace_id, $user_or_group_id, $update_workspace_collaborator_request = null, string $contentType = self::contentTypes['updateWorkspaceCollaborator'][0])
    {
        $request = $this->updateWorkspaceCollaboratorRequest($workspace_id, $user_or_group_id, $update_workspace_collaborator_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateWorkspaceCollaboratorAsync
     *
     * Update workspace collaborator
     *
     * @param  string $workspace_id (required)
     * @param  string $user_or_group_id (required)
     * @param  \Ez128\Airtable\Model\UpdateWorkspaceCollaboratorRequest|null $update_workspace_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkspaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkspaceCollaboratorAsync($workspace_id, $user_or_group_id, $update_workspace_collaborator_request = null, string $contentType = self::contentTypes['updateWorkspaceCollaborator'][0])
    {
        return $this->updateWorkspaceCollaboratorAsyncWithHttpInfo($workspace_id, $user_or_group_id, $update_workspace_collaborator_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateWorkspaceCollaboratorAsyncWithHttpInfo
     *
     * Update workspace collaborator
     *
     * @param  string $workspace_id (required)
     * @param  string $user_or_group_id (required)
     * @param  \Ez128\Airtable\Model\UpdateWorkspaceCollaboratorRequest|null $update_workspace_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkspaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWorkspaceCollaboratorAsyncWithHttpInfo($workspace_id, $user_or_group_id, $update_workspace_collaborator_request = null, string $contentType = self::contentTypes['updateWorkspaceCollaborator'][0])
    {
        $returnType = '';
        $request = $this->updateWorkspaceCollaboratorRequest($workspace_id, $user_or_group_id, $update_workspace_collaborator_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWorkspaceCollaborator'
     *
     * @param  string $workspace_id (required)
     * @param  string $user_or_group_id (required)
     * @param  \Ez128\Airtable\Model\UpdateWorkspaceCollaboratorRequest|null $update_workspace_collaborator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWorkspaceCollaborator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateWorkspaceCollaboratorRequest($workspace_id, $user_or_group_id, $update_workspace_collaborator_request = null, string $contentType = self::contentTypes['updateWorkspaceCollaborator'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling updateWorkspaceCollaborator'
            );
        }
        if (!preg_match("/wsp[0-9a-zA-Z]{14}$/", $workspace_id)) {
            throw new \InvalidArgumentException("invalid value for \"workspace_id\" when calling CollaboratorsApi.updateWorkspaceCollaborator, must conform to the pattern /wsp[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'user_or_group_id' is set
        if ($user_or_group_id === null || (is_array($user_or_group_id) && count($user_or_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_or_group_id when calling updateWorkspaceCollaborator'
            );
        }
        if (!preg_match("/usr[0-9a-zA-Z]{14}|ugp[0-9a-zA-Z]{14}$/", $user_or_group_id)) {
            throw new \InvalidArgumentException("invalid value for \"user_or_group_id\" when calling CollaboratorsApi.updateWorkspaceCollaborator, must conform to the pattern /usr[0-9a-zA-Z]{14}|ugp[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/workspaces/{workspaceId}/collaborators/{userOrGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($workspace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspace_id),
                $resourcePath
            );
        }
        // path params
        if ($user_or_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userOrGroupId' . '}',
                ObjectSerializer::toPathValue($user_or_group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_workspace_collaborator_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_workspace_collaborator_request));
            } else {
                $httpBody = $update_workspace_collaborator_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
