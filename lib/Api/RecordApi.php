<?php
/**
 * RecordApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ez128\Airtable\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Ez128\Airtable\ApiException;
use Ez128\Airtable\Configuration;
use Ez128\Airtable\FormDataProcessor;
use Ez128\Airtable\HeaderSelector;
use Ez128\Airtable\ObjectSerializer;

/**
 * RecordApi Class Doc Comment
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RecordApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createRecords' => [
            'application/json',
        ],
        'deleteMultipleRecords' => [
            'application/json',
        ],
        'deleteRecord' => [
            'application/json',
        ],
        'getRecord' => [
            'application/json',
        ],
        'listRecords' => [
            'application/json',
        ],
        'postSyncApiEndpoint' => [
            'text/csv',
        ],
        'updateMultipleRecords' => [
            'application/json',
        ],
        'updateRecord' => [
            'application/json',
        ],
        'uploadAttachment' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createRecords
     *
     * Create records
     *
     * @param  string $base_id base_id (required)
     * @param  string $table_id_or_name table_id_or_name (required)
     * @param  \Ez128\Airtable\Model\CreateRecordsRequest|null $create_records_request create_records_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRecords'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\CreateRecords200Response
     */
    public function createRecords($base_id, $table_id_or_name, $create_records_request = null, string $contentType = self::contentTypes['createRecords'][0])
    {
        list($response) = $this->createRecordsWithHttpInfo($base_id, $table_id_or_name, $create_records_request, $contentType);
        return $response;
    }

    /**
     * Operation createRecordsWithHttpInfo
     *
     * Create records
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  \Ez128\Airtable\Model\CreateRecordsRequest|null $create_records_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRecords'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\CreateRecords200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRecordsWithHttpInfo($base_id, $table_id_or_name, $create_records_request = null, string $contentType = self::contentTypes['createRecords'][0])
    {
        $request = $this->createRecordsRequest($base_id, $table_id_or_name, $create_records_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\CreateRecords200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\CreateRecords200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\CreateRecords200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createRecordsAsync
     *
     * Create records
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  \Ez128\Airtable\Model\CreateRecordsRequest|null $create_records_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRecordsAsync($base_id, $table_id_or_name, $create_records_request = null, string $contentType = self::contentTypes['createRecords'][0])
    {
        return $this->createRecordsAsyncWithHttpInfo($base_id, $table_id_or_name, $create_records_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRecordsAsyncWithHttpInfo
     *
     * Create records
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  \Ez128\Airtable\Model\CreateRecordsRequest|null $create_records_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRecordsAsyncWithHttpInfo($base_id, $table_id_or_name, $create_records_request = null, string $contentType = self::contentTypes['createRecords'][0])
    {
        $returnType = '\Ez128\Airtable\Model\CreateRecords200Response';
        $request = $this->createRecordsRequest($base_id, $table_id_or_name, $create_records_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRecords'
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  \Ez128\Airtable\Model\CreateRecordsRequest|null $create_records_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRecordsRequest($base_id, $table_id_or_name, $create_records_request = null, string $contentType = self::contentTypes['createRecords'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling createRecords'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling RecordApi.createRecords, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'table_id_or_name' is set
        if ($table_id_or_name === null || (is_array($table_id_or_name) && count($table_id_or_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table_id_or_name when calling createRecords'
            );
        }
        if (!preg_match("/[^\/]+$/", $table_id_or_name)) {
            throw new \InvalidArgumentException("invalid value for \"table_id_or_name\" when calling RecordApi.createRecords, must conform to the pattern /[^\/]+$/.");
        }
        


        $resourcePath = '/v0/{baseId}/{tableIdOrName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }
        // path params
        if ($table_id_or_name !== null) {
            $resourcePath = str_replace(
                '{' . 'tableIdOrName' . '}',
                ObjectSerializer::toPathValue($table_id_or_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_records_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_records_request));
            } else {
                $httpBody = $create_records_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMultipleRecords
     *
     * Delete multiple records
     *
     * @param  string $base_id base_id (required)
     * @param  string $table_id_or_name table_id_or_name (required)
     * @param  string[]|null $records records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMultipleRecords'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\DeleteMultipleRecords200Response
     */
    public function deleteMultipleRecords($base_id, $table_id_or_name, $records = null, string $contentType = self::contentTypes['deleteMultipleRecords'][0])
    {
        list($response) = $this->deleteMultipleRecordsWithHttpInfo($base_id, $table_id_or_name, $records, $contentType);
        return $response;
    }

    /**
     * Operation deleteMultipleRecordsWithHttpInfo
     *
     * Delete multiple records
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string[]|null $records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMultipleRecords'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\DeleteMultipleRecords200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMultipleRecordsWithHttpInfo($base_id, $table_id_or_name, $records = null, string $contentType = self::contentTypes['deleteMultipleRecords'][0])
    {
        $request = $this->deleteMultipleRecordsRequest($base_id, $table_id_or_name, $records, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\DeleteMultipleRecords200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\DeleteMultipleRecords200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\DeleteMultipleRecords200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteMultipleRecordsAsync
     *
     * Delete multiple records
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string[]|null $records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMultipleRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMultipleRecordsAsync($base_id, $table_id_or_name, $records = null, string $contentType = self::contentTypes['deleteMultipleRecords'][0])
    {
        return $this->deleteMultipleRecordsAsyncWithHttpInfo($base_id, $table_id_or_name, $records, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMultipleRecordsAsyncWithHttpInfo
     *
     * Delete multiple records
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string[]|null $records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMultipleRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMultipleRecordsAsyncWithHttpInfo($base_id, $table_id_or_name, $records = null, string $contentType = self::contentTypes['deleteMultipleRecords'][0])
    {
        $returnType = '\Ez128\Airtable\Model\DeleteMultipleRecords200Response';
        $request = $this->deleteMultipleRecordsRequest($base_id, $table_id_or_name, $records, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMultipleRecords'
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string[]|null $records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMultipleRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteMultipleRecordsRequest($base_id, $table_id_or_name, $records = null, string $contentType = self::contentTypes['deleteMultipleRecords'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling deleteMultipleRecords'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling RecordApi.deleteMultipleRecords, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'table_id_or_name' is set
        if ($table_id_or_name === null || (is_array($table_id_or_name) && count($table_id_or_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table_id_or_name when calling deleteMultipleRecords'
            );
        }
        if (!preg_match("/[^\/]+$/", $table_id_or_name)) {
            throw new \InvalidArgumentException("invalid value for \"table_id_or_name\" when calling RecordApi.deleteMultipleRecords, must conform to the pattern /[^\/]+$/.");
        }
        


        $resourcePath = '/v0/{baseId}/{tableIdOrName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $records,
            'records', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }
        // path params
        if ($table_id_or_name !== null) {
            $resourcePath = str_replace(
                '{' . 'tableIdOrName' . '}',
                ObjectSerializer::toPathValue($table_id_or_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRecord
     *
     * Delete record
     *
     * @param  string $base_id base_id (required)
     * @param  string $table_id_or_name table_id_or_name (required)
     * @param  string $record_id record_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRecord'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\DeleteMultipleRecords200ResponseRecordsInner
     */
    public function deleteRecord($base_id, $table_id_or_name, $record_id, string $contentType = self::contentTypes['deleteRecord'][0])
    {
        list($response) = $this->deleteRecordWithHttpInfo($base_id, $table_id_or_name, $record_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteRecordWithHttpInfo
     *
     * Delete record
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string $record_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRecord'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\DeleteMultipleRecords200ResponseRecordsInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRecordWithHttpInfo($base_id, $table_id_or_name, $record_id, string $contentType = self::contentTypes['deleteRecord'][0])
    {
        $request = $this->deleteRecordRequest($base_id, $table_id_or_name, $record_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\DeleteMultipleRecords200ResponseRecordsInner',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\DeleteMultipleRecords200ResponseRecordsInner',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\DeleteMultipleRecords200ResponseRecordsInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteRecordAsync
     *
     * Delete record
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string $record_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRecordAsync($base_id, $table_id_or_name, $record_id, string $contentType = self::contentTypes['deleteRecord'][0])
    {
        return $this->deleteRecordAsyncWithHttpInfo($base_id, $table_id_or_name, $record_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRecordAsyncWithHttpInfo
     *
     * Delete record
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string $record_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRecordAsyncWithHttpInfo($base_id, $table_id_or_name, $record_id, string $contentType = self::contentTypes['deleteRecord'][0])
    {
        $returnType = '\Ez128\Airtable\Model\DeleteMultipleRecords200ResponseRecordsInner';
        $request = $this->deleteRecordRequest($base_id, $table_id_or_name, $record_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRecord'
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string $record_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRecordRequest($base_id, $table_id_or_name, $record_id, string $contentType = self::contentTypes['deleteRecord'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling deleteRecord'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling RecordApi.deleteRecord, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'table_id_or_name' is set
        if ($table_id_or_name === null || (is_array($table_id_or_name) && count($table_id_or_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table_id_or_name when calling deleteRecord'
            );
        }
        if (!preg_match("/[^\/]+$/", $table_id_or_name)) {
            throw new \InvalidArgumentException("invalid value for \"table_id_or_name\" when calling RecordApi.deleteRecord, must conform to the pattern /[^\/]+$/.");
        }
        
        // verify the required parameter 'record_id' is set
        if ($record_id === null || (is_array($record_id) && count($record_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_id when calling deleteRecord'
            );
        }
        if (!preg_match("/rec[0-9a-zA-Z]{14}$/", $record_id)) {
            throw new \InvalidArgumentException("invalid value for \"record_id\" when calling RecordApi.deleteRecord, must conform to the pattern /rec[0-9a-zA-Z]{14}$/.");
        }
        

        $resourcePath = '/v0/{baseId}/{tableIdOrName}/{recordId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }
        // path params
        if ($table_id_or_name !== null) {
            $resourcePath = str_replace(
                '{' . 'tableIdOrName' . '}',
                ObjectSerializer::toPathValue($table_id_or_name),
                $resourcePath
            );
        }
        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recordId' . '}',
                ObjectSerializer::toPathValue($record_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRecord
     *
     * Get record
     *
     * @param  string $base_id base_id (required)
     * @param  string $table_id_or_name table_id_or_name (required)
     * @param  string $record_id record_id (required)
     * @param  string|null $cell_format cell_format (optional)
     * @param  bool|null $return_fields_by_field_id return_fields_by_field_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecord'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\UpdateMultipleRecordsPut200ResponseAnyOf1RecordsInner
     */
    public function getRecord($base_id, $table_id_or_name, $record_id, $cell_format = null, $return_fields_by_field_id = null, string $contentType = self::contentTypes['getRecord'][0])
    {
        list($response) = $this->getRecordWithHttpInfo($base_id, $table_id_or_name, $record_id, $cell_format, $return_fields_by_field_id, $contentType);
        return $response;
    }

    /**
     * Operation getRecordWithHttpInfo
     *
     * Get record
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string $record_id (required)
     * @param  string|null $cell_format (optional)
     * @param  bool|null $return_fields_by_field_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecord'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\UpdateMultipleRecordsPut200ResponseAnyOf1RecordsInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRecordWithHttpInfo($base_id, $table_id_or_name, $record_id, $cell_format = null, $return_fields_by_field_id = null, string $contentType = self::contentTypes['getRecord'][0])
    {
        $request = $this->getRecordRequest($base_id, $table_id_or_name, $record_id, $cell_format, $return_fields_by_field_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\UpdateMultipleRecordsPut200ResponseAnyOf1RecordsInner',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\UpdateMultipleRecordsPut200ResponseAnyOf1RecordsInner',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\UpdateMultipleRecordsPut200ResponseAnyOf1RecordsInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRecordAsync
     *
     * Get record
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string $record_id (required)
     * @param  string|null $cell_format (optional)
     * @param  bool|null $return_fields_by_field_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecordAsync($base_id, $table_id_or_name, $record_id, $cell_format = null, $return_fields_by_field_id = null, string $contentType = self::contentTypes['getRecord'][0])
    {
        return $this->getRecordAsyncWithHttpInfo($base_id, $table_id_or_name, $record_id, $cell_format, $return_fields_by_field_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRecordAsyncWithHttpInfo
     *
     * Get record
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string $record_id (required)
     * @param  string|null $cell_format (optional)
     * @param  bool|null $return_fields_by_field_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecordAsyncWithHttpInfo($base_id, $table_id_or_name, $record_id, $cell_format = null, $return_fields_by_field_id = null, string $contentType = self::contentTypes['getRecord'][0])
    {
        $returnType = '\Ez128\Airtable\Model\UpdateMultipleRecordsPut200ResponseAnyOf1RecordsInner';
        $request = $this->getRecordRequest($base_id, $table_id_or_name, $record_id, $cell_format, $return_fields_by_field_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRecord'
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string $record_id (required)
     * @param  string|null $cell_format (optional)
     * @param  bool|null $return_fields_by_field_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRecordRequest($base_id, $table_id_or_name, $record_id, $cell_format = null, $return_fields_by_field_id = null, string $contentType = self::contentTypes['getRecord'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling getRecord'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling RecordApi.getRecord, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'table_id_or_name' is set
        if ($table_id_or_name === null || (is_array($table_id_or_name) && count($table_id_or_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table_id_or_name when calling getRecord'
            );
        }
        if (!preg_match("/[^\/]+$/", $table_id_or_name)) {
            throw new \InvalidArgumentException("invalid value for \"table_id_or_name\" when calling RecordApi.getRecord, must conform to the pattern /[^\/]+$/.");
        }
        
        // verify the required parameter 'record_id' is set
        if ($record_id === null || (is_array($record_id) && count($record_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_id when calling getRecord'
            );
        }
        if (!preg_match("/rec[0-9a-zA-Z]{14}$/", $record_id)) {
            throw new \InvalidArgumentException("invalid value for \"record_id\" when calling RecordApi.getRecord, must conform to the pattern /rec[0-9a-zA-Z]{14}$/.");
        }
        



        $resourcePath = '/v0/{baseId}/{tableIdOrName}/{recordId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cell_format,
            'cellFormat', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $return_fields_by_field_id,
            'returnFieldsByFieldId', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }
        // path params
        if ($table_id_or_name !== null) {
            $resourcePath = str_replace(
                '{' . 'tableIdOrName' . '}',
                ObjectSerializer::toPathValue($table_id_or_name),
                $resourcePath
            );
        }
        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recordId' . '}',
                ObjectSerializer::toPathValue($record_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listRecords
     *
     * List records
     *
     * @param  string $base_id base_id (required)
     * @param  string $table_id_or_name table_id_or_name (required)
     * @param  \Ez128\Airtable\Model\Timezone|null $time_zone time_zone (optional)
     * @param  string|null $user_locale user_locale (optional)
     * @param  float|null $page_size page_size (optional)
     * @param  float|null $max_records max_records (optional)
     * @param  string|null $offset offset (optional)
     * @param  \Ez128\Airtable\Model\ListRecordsViewParameter|null $view view (optional)
     * @param  \Ez128\Airtable\Model\ListRecordsSortParameterInner[]|null $sort sort (optional)
     * @param  string|null $filter_by_formula filter_by_formula (optional)
     * @param  string|null $cell_format cell_format (optional)
     * @param  string[]|null $fields fields (optional)
     * @param  bool|null $return_fields_by_field_id return_fields_by_field_id (optional)
     * @param  string[]|null $record_metadata record_metadata (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRecords'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\ListRecords200Response
     */
    public function listRecords($base_id, $table_id_or_name, $time_zone = null, $user_locale = null, $page_size = null, $max_records = null, $offset = null, $view = null, $sort = null, $filter_by_formula = null, $cell_format = null, $fields = null, $return_fields_by_field_id = null, $record_metadata = null, string $contentType = self::contentTypes['listRecords'][0])
    {
        list($response) = $this->listRecordsWithHttpInfo($base_id, $table_id_or_name, $time_zone, $user_locale, $page_size, $max_records, $offset, $view, $sort, $filter_by_formula, $cell_format, $fields, $return_fields_by_field_id, $record_metadata, $contentType);
        return $response;
    }

    /**
     * Operation listRecordsWithHttpInfo
     *
     * List records
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  \Ez128\Airtable\Model\Timezone|null $time_zone (optional)
     * @param  string|null $user_locale (optional)
     * @param  float|null $page_size (optional)
     * @param  float|null $max_records (optional)
     * @param  string|null $offset (optional)
     * @param  \Ez128\Airtable\Model\ListRecordsViewParameter|null $view (optional)
     * @param  \Ez128\Airtable\Model\ListRecordsSortParameterInner[]|null $sort (optional)
     * @param  string|null $filter_by_formula (optional)
     * @param  string|null $cell_format (optional)
     * @param  string[]|null $fields (optional)
     * @param  bool|null $return_fields_by_field_id (optional)
     * @param  string[]|null $record_metadata (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRecords'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\ListRecords200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function listRecordsWithHttpInfo($base_id, $table_id_or_name, $time_zone = null, $user_locale = null, $page_size = null, $max_records = null, $offset = null, $view = null, $sort = null, $filter_by_formula = null, $cell_format = null, $fields = null, $return_fields_by_field_id = null, $record_metadata = null, string $contentType = self::contentTypes['listRecords'][0])
    {
        $request = $this->listRecordsRequest($base_id, $table_id_or_name, $time_zone, $user_locale, $page_size, $max_records, $offset, $view, $sort, $filter_by_formula, $cell_format, $fields, $return_fields_by_field_id, $record_metadata, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\ListRecords200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\ListRecords200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\ListRecords200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listRecordsAsync
     *
     * List records
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  \Ez128\Airtable\Model\Timezone|null $time_zone (optional)
     * @param  string|null $user_locale (optional)
     * @param  float|null $page_size (optional)
     * @param  float|null $max_records (optional)
     * @param  string|null $offset (optional)
     * @param  \Ez128\Airtable\Model\ListRecordsViewParameter|null $view (optional)
     * @param  \Ez128\Airtable\Model\ListRecordsSortParameterInner[]|null $sort (optional)
     * @param  string|null $filter_by_formula (optional)
     * @param  string|null $cell_format (optional)
     * @param  string[]|null $fields (optional)
     * @param  bool|null $return_fields_by_field_id (optional)
     * @param  string[]|null $record_metadata (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRecordsAsync($base_id, $table_id_or_name, $time_zone = null, $user_locale = null, $page_size = null, $max_records = null, $offset = null, $view = null, $sort = null, $filter_by_formula = null, $cell_format = null, $fields = null, $return_fields_by_field_id = null, $record_metadata = null, string $contentType = self::contentTypes['listRecords'][0])
    {
        return $this->listRecordsAsyncWithHttpInfo($base_id, $table_id_or_name, $time_zone, $user_locale, $page_size, $max_records, $offset, $view, $sort, $filter_by_formula, $cell_format, $fields, $return_fields_by_field_id, $record_metadata, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listRecordsAsyncWithHttpInfo
     *
     * List records
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  \Ez128\Airtable\Model\Timezone|null $time_zone (optional)
     * @param  string|null $user_locale (optional)
     * @param  float|null $page_size (optional)
     * @param  float|null $max_records (optional)
     * @param  string|null $offset (optional)
     * @param  \Ez128\Airtable\Model\ListRecordsViewParameter|null $view (optional)
     * @param  \Ez128\Airtable\Model\ListRecordsSortParameterInner[]|null $sort (optional)
     * @param  string|null $filter_by_formula (optional)
     * @param  string|null $cell_format (optional)
     * @param  string[]|null $fields (optional)
     * @param  bool|null $return_fields_by_field_id (optional)
     * @param  string[]|null $record_metadata (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRecordsAsyncWithHttpInfo($base_id, $table_id_or_name, $time_zone = null, $user_locale = null, $page_size = null, $max_records = null, $offset = null, $view = null, $sort = null, $filter_by_formula = null, $cell_format = null, $fields = null, $return_fields_by_field_id = null, $record_metadata = null, string $contentType = self::contentTypes['listRecords'][0])
    {
        $returnType = '\Ez128\Airtable\Model\ListRecords200Response';
        $request = $this->listRecordsRequest($base_id, $table_id_or_name, $time_zone, $user_locale, $page_size, $max_records, $offset, $view, $sort, $filter_by_formula, $cell_format, $fields, $return_fields_by_field_id, $record_metadata, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listRecords'
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  \Ez128\Airtable\Model\Timezone|null $time_zone (optional)
     * @param  string|null $user_locale (optional)
     * @param  float|null $page_size (optional)
     * @param  float|null $max_records (optional)
     * @param  string|null $offset (optional)
     * @param  \Ez128\Airtable\Model\ListRecordsViewParameter|null $view (optional)
     * @param  \Ez128\Airtable\Model\ListRecordsSortParameterInner[]|null $sort (optional)
     * @param  string|null $filter_by_formula (optional)
     * @param  string|null $cell_format (optional)
     * @param  string[]|null $fields (optional)
     * @param  bool|null $return_fields_by_field_id (optional)
     * @param  string[]|null $record_metadata (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listRecordsRequest($base_id, $table_id_or_name, $time_zone = null, $user_locale = null, $page_size = null, $max_records = null, $offset = null, $view = null, $sort = null, $filter_by_formula = null, $cell_format = null, $fields = null, $return_fields_by_field_id = null, $record_metadata = null, string $contentType = self::contentTypes['listRecords'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling listRecords'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling RecordApi.listRecords, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'table_id_or_name' is set
        if ($table_id_or_name === null || (is_array($table_id_or_name) && count($table_id_or_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table_id_or_name when calling listRecords'
            );
        }
        if (!preg_match("/[^\/]+$/", $table_id_or_name)) {
            throw new \InvalidArgumentException("invalid value for \"table_id_or_name\" when calling RecordApi.listRecords, must conform to the pattern /[^\/]+$/.");
        }
        













        $resourcePath = '/v0/{baseId}/{tableIdOrName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $time_zone,
            'timeZone', // param base name
            'anyOf&lt;string,string&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_locale,
            'userLocale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_records,
            'maxRecords', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $view,
            'view', // param base name
            'anyOf&lt;string,string&gt;', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_by_formula,
            'filterByFormula', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cell_format,
            'cellFormat', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $return_fields_by_field_id,
            'returnFieldsByFieldId', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $record_metadata,
            'recordMetadata', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }
        // path params
        if ($table_id_or_name !== null) {
            $resourcePath = str_replace(
                '{' . 'tableIdOrName' . '}',
                ObjectSerializer::toPathValue($table_id_or_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postSyncApiEndpoint
     *
     * Sync CSV data
     *
     * @param  string $base_id base_id (required)
     * @param  string $table_id_or_name table_id_or_name (required)
     * @param  string $api_endpoint_sync_id api_endpoint_sync_id (required)
     * @param  object|null $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSyncApiEndpoint'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\PostSyncApiEndpoint200Response
     */
    public function postSyncApiEndpoint($base_id, $table_id_or_name, $api_endpoint_sync_id, $body = null, string $contentType = self::contentTypes['postSyncApiEndpoint'][0])
    {
        list($response) = $this->postSyncApiEndpointWithHttpInfo($base_id, $table_id_or_name, $api_endpoint_sync_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation postSyncApiEndpointWithHttpInfo
     *
     * Sync CSV data
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string $api_endpoint_sync_id (required)
     * @param  object|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSyncApiEndpoint'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\PostSyncApiEndpoint200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSyncApiEndpointWithHttpInfo($base_id, $table_id_or_name, $api_endpoint_sync_id, $body = null, string $contentType = self::contentTypes['postSyncApiEndpoint'][0])
    {
        $request = $this->postSyncApiEndpointRequest($base_id, $table_id_or_name, $api_endpoint_sync_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\PostSyncApiEndpoint200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\PostSyncApiEndpoint200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\PostSyncApiEndpoint200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postSyncApiEndpointAsync
     *
     * Sync CSV data
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string $api_endpoint_sync_id (required)
     * @param  object|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSyncApiEndpoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSyncApiEndpointAsync($base_id, $table_id_or_name, $api_endpoint_sync_id, $body = null, string $contentType = self::contentTypes['postSyncApiEndpoint'][0])
    {
        return $this->postSyncApiEndpointAsyncWithHttpInfo($base_id, $table_id_or_name, $api_endpoint_sync_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postSyncApiEndpointAsyncWithHttpInfo
     *
     * Sync CSV data
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string $api_endpoint_sync_id (required)
     * @param  object|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSyncApiEndpoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSyncApiEndpointAsyncWithHttpInfo($base_id, $table_id_or_name, $api_endpoint_sync_id, $body = null, string $contentType = self::contentTypes['postSyncApiEndpoint'][0])
    {
        $returnType = '\Ez128\Airtable\Model\PostSyncApiEndpoint200Response';
        $request = $this->postSyncApiEndpointRequest($base_id, $table_id_or_name, $api_endpoint_sync_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postSyncApiEndpoint'
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string $api_endpoint_sync_id (required)
     * @param  object|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSyncApiEndpoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postSyncApiEndpointRequest($base_id, $table_id_or_name, $api_endpoint_sync_id, $body = null, string $contentType = self::contentTypes['postSyncApiEndpoint'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling postSyncApiEndpoint'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling RecordApi.postSyncApiEndpoint, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'table_id_or_name' is set
        if ($table_id_or_name === null || (is_array($table_id_or_name) && count($table_id_or_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table_id_or_name when calling postSyncApiEndpoint'
            );
        }
        if (!preg_match("/[^\/]+$/", $table_id_or_name)) {
            throw new \InvalidArgumentException("invalid value for \"table_id_or_name\" when calling RecordApi.postSyncApiEndpoint, must conform to the pattern /[^\/]+$/.");
        }
        
        // verify the required parameter 'api_endpoint_sync_id' is set
        if ($api_endpoint_sync_id === null || (is_array($api_endpoint_sync_id) && count($api_endpoint_sync_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_endpoint_sync_id when calling postSyncApiEndpoint'
            );
        }
        if (!preg_match("/[0-9a-zA-Z]{8}$/", $api_endpoint_sync_id)) {
            throw new \InvalidArgumentException("invalid value for \"api_endpoint_sync_id\" when calling RecordApi.postSyncApiEndpoint, must conform to the pattern /[0-9a-zA-Z]{8}$/.");
        }
        


        $resourcePath = '/v0/{baseId}/{tableIdOrName}/sync/{apiEndpointSyncId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }
        // path params
        if ($table_id_or_name !== null) {
            $resourcePath = str_replace(
                '{' . 'tableIdOrName' . '}',
                ObjectSerializer::toPathValue($table_id_or_name),
                $resourcePath
            );
        }
        // path params
        if ($api_endpoint_sync_id !== null) {
            $resourcePath = str_replace(
                '{' . 'apiEndpointSyncId' . '}',
                ObjectSerializer::toPathValue($api_endpoint_sync_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMultipleRecords
     *
     * Update multiple records
     *
     * @param  string $base_id base_id (required)
     * @param  string $table_id_or_name table_id_or_name (required)
     * @param  \Ez128\Airtable\Model\UpdateMultipleRecordsPutRequest|null $update_multiple_records_put_request update_multiple_records_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultipleRecords'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\UpdateMultipleRecords200Response
     */
    public function updateMultipleRecords($base_id, $table_id_or_name, $update_multiple_records_put_request = null, string $contentType = self::contentTypes['updateMultipleRecords'][0])
    {
        list($response) = $this->updateMultipleRecordsWithHttpInfo($base_id, $table_id_or_name, $update_multiple_records_put_request, $contentType);
        return $response;
    }

    /**
     * Operation updateMultipleRecordsWithHttpInfo
     *
     * Update multiple records
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  \Ez128\Airtable\Model\UpdateMultipleRecordsPutRequest|null $update_multiple_records_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultipleRecords'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\UpdateMultipleRecords200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMultipleRecordsWithHttpInfo($base_id, $table_id_or_name, $update_multiple_records_put_request = null, string $contentType = self::contentTypes['updateMultipleRecords'][0])
    {
        $request = $this->updateMultipleRecordsRequest($base_id, $table_id_or_name, $update_multiple_records_put_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\UpdateMultipleRecords200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\UpdateMultipleRecords200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\UpdateMultipleRecords200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateMultipleRecordsAsync
     *
     * Update multiple records
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  \Ez128\Airtable\Model\UpdateMultipleRecordsPutRequest|null $update_multiple_records_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultipleRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMultipleRecordsAsync($base_id, $table_id_or_name, $update_multiple_records_put_request = null, string $contentType = self::contentTypes['updateMultipleRecords'][0])
    {
        return $this->updateMultipleRecordsAsyncWithHttpInfo($base_id, $table_id_or_name, $update_multiple_records_put_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMultipleRecordsAsyncWithHttpInfo
     *
     * Update multiple records
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  \Ez128\Airtable\Model\UpdateMultipleRecordsPutRequest|null $update_multiple_records_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultipleRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMultipleRecordsAsyncWithHttpInfo($base_id, $table_id_or_name, $update_multiple_records_put_request = null, string $contentType = self::contentTypes['updateMultipleRecords'][0])
    {
        $returnType = '\Ez128\Airtable\Model\UpdateMultipleRecords200Response';
        $request = $this->updateMultipleRecordsRequest($base_id, $table_id_or_name, $update_multiple_records_put_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMultipleRecords'
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  \Ez128\Airtable\Model\UpdateMultipleRecordsPutRequest|null $update_multiple_records_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultipleRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateMultipleRecordsRequest($base_id, $table_id_or_name, $update_multiple_records_put_request = null, string $contentType = self::contentTypes['updateMultipleRecords'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling updateMultipleRecords'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling RecordApi.updateMultipleRecords, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'table_id_or_name' is set
        if ($table_id_or_name === null || (is_array($table_id_or_name) && count($table_id_or_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table_id_or_name when calling updateMultipleRecords'
            );
        }
        if (!preg_match("/[^\/]+$/", $table_id_or_name)) {
            throw new \InvalidArgumentException("invalid value for \"table_id_or_name\" when calling RecordApi.updateMultipleRecords, must conform to the pattern /[^\/]+$/.");
        }
        


        $resourcePath = '/v0/{baseId}/{tableIdOrName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }
        // path params
        if ($table_id_or_name !== null) {
            $resourcePath = str_replace(
                '{' . 'tableIdOrName' . '}',
                ObjectSerializer::toPathValue($table_id_or_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_multiple_records_put_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_multiple_records_put_request));
            } else {
                $httpBody = $update_multiple_records_put_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRecord
     *
     * Update record
     *
     * @param  string $base_id base_id (required)
     * @param  string $table_id_or_name table_id_or_name (required)
     * @param  string $record_id record_id (required)
     * @param  \Ez128\Airtable\Model\UpdateRecordPutRequest|null $update_record_put_request update_record_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRecord'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\UpdateRecordPut200Response
     */
    public function updateRecord($base_id, $table_id_or_name, $record_id, $update_record_put_request = null, string $contentType = self::contentTypes['updateRecord'][0])
    {
        list($response) = $this->updateRecordWithHttpInfo($base_id, $table_id_or_name, $record_id, $update_record_put_request, $contentType);
        return $response;
    }

    /**
     * Operation updateRecordWithHttpInfo
     *
     * Update record
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string $record_id (required)
     * @param  \Ez128\Airtable\Model\UpdateRecordPutRequest|null $update_record_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRecord'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\UpdateRecordPut200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRecordWithHttpInfo($base_id, $table_id_or_name, $record_id, $update_record_put_request = null, string $contentType = self::contentTypes['updateRecord'][0])
    {
        $request = $this->updateRecordRequest($base_id, $table_id_or_name, $record_id, $update_record_put_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\UpdateRecordPut200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\UpdateRecordPut200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\UpdateRecordPut200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateRecordAsync
     *
     * Update record
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string $record_id (required)
     * @param  \Ez128\Airtable\Model\UpdateRecordPutRequest|null $update_record_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRecordAsync($base_id, $table_id_or_name, $record_id, $update_record_put_request = null, string $contentType = self::contentTypes['updateRecord'][0])
    {
        return $this->updateRecordAsyncWithHttpInfo($base_id, $table_id_or_name, $record_id, $update_record_put_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRecordAsyncWithHttpInfo
     *
     * Update record
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string $record_id (required)
     * @param  \Ez128\Airtable\Model\UpdateRecordPutRequest|null $update_record_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRecordAsyncWithHttpInfo($base_id, $table_id_or_name, $record_id, $update_record_put_request = null, string $contentType = self::contentTypes['updateRecord'][0])
    {
        $returnType = '\Ez128\Airtable\Model\UpdateRecordPut200Response';
        $request = $this->updateRecordRequest($base_id, $table_id_or_name, $record_id, $update_record_put_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRecord'
     *
     * @param  string $base_id (required)
     * @param  string $table_id_or_name (required)
     * @param  string $record_id (required)
     * @param  \Ez128\Airtable\Model\UpdateRecordPutRequest|null $update_record_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRecordRequest($base_id, $table_id_or_name, $record_id, $update_record_put_request = null, string $contentType = self::contentTypes['updateRecord'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling updateRecord'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling RecordApi.updateRecord, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'table_id_or_name' is set
        if ($table_id_or_name === null || (is_array($table_id_or_name) && count($table_id_or_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table_id_or_name when calling updateRecord'
            );
        }
        if (!preg_match("/[^\/]+$/", $table_id_or_name)) {
            throw new \InvalidArgumentException("invalid value for \"table_id_or_name\" when calling RecordApi.updateRecord, must conform to the pattern /[^\/]+$/.");
        }
        
        // verify the required parameter 'record_id' is set
        if ($record_id === null || (is_array($record_id) && count($record_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_id when calling updateRecord'
            );
        }
        if (!preg_match("/rec[0-9a-zA-Z]{14}$/", $record_id)) {
            throw new \InvalidArgumentException("invalid value for \"record_id\" when calling RecordApi.updateRecord, must conform to the pattern /rec[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/{baseId}/{tableIdOrName}/{recordId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }
        // path params
        if ($table_id_or_name !== null) {
            $resourcePath = str_replace(
                '{' . 'tableIdOrName' . '}',
                ObjectSerializer::toPathValue($table_id_or_name),
                $resourcePath
            );
        }
        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recordId' . '}',
                ObjectSerializer::toPathValue($record_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_record_put_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_record_put_request));
            } else {
                $httpBody = $update_record_put_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadAttachment
     *
     * Upload attachment
     *
     * @param  string $base_id base_id (required)
     * @param  string $record_id record_id (required)
     * @param  string $attachment_field_id_or_name attachment_field_id_or_name (required)
     * @param  \Ez128\Airtable\Model\UploadAttachmentRequest|null $upload_attachment_request upload_attachment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadAttachment'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\UploadAttachment200Response
     */
    public function uploadAttachment($base_id, $record_id, $attachment_field_id_or_name, $upload_attachment_request = null, string $contentType = self::contentTypes['uploadAttachment'][0])
    {
        list($response) = $this->uploadAttachmentWithHttpInfo($base_id, $record_id, $attachment_field_id_or_name, $upload_attachment_request, $contentType);
        return $response;
    }

    /**
     * Operation uploadAttachmentWithHttpInfo
     *
     * Upload attachment
     *
     * @param  string $base_id (required)
     * @param  string $record_id (required)
     * @param  string $attachment_field_id_or_name (required)
     * @param  \Ez128\Airtable\Model\UploadAttachmentRequest|null $upload_attachment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadAttachment'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\UploadAttachment200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadAttachmentWithHttpInfo($base_id, $record_id, $attachment_field_id_or_name, $upload_attachment_request = null, string $contentType = self::contentTypes['uploadAttachment'][0])
    {
        $request = $this->uploadAttachmentRequest($base_id, $record_id, $attachment_field_id_or_name, $upload_attachment_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\UploadAttachment200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\UploadAttachment200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\UploadAttachment200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation uploadAttachmentAsync
     *
     * Upload attachment
     *
     * @param  string $base_id (required)
     * @param  string $record_id (required)
     * @param  string $attachment_field_id_or_name (required)
     * @param  \Ez128\Airtable\Model\UploadAttachmentRequest|null $upload_attachment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadAttachmentAsync($base_id, $record_id, $attachment_field_id_or_name, $upload_attachment_request = null, string $contentType = self::contentTypes['uploadAttachment'][0])
    {
        return $this->uploadAttachmentAsyncWithHttpInfo($base_id, $record_id, $attachment_field_id_or_name, $upload_attachment_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadAttachmentAsyncWithHttpInfo
     *
     * Upload attachment
     *
     * @param  string $base_id (required)
     * @param  string $record_id (required)
     * @param  string $attachment_field_id_or_name (required)
     * @param  \Ez128\Airtable\Model\UploadAttachmentRequest|null $upload_attachment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadAttachmentAsyncWithHttpInfo($base_id, $record_id, $attachment_field_id_or_name, $upload_attachment_request = null, string $contentType = self::contentTypes['uploadAttachment'][0])
    {
        $returnType = '\Ez128\Airtable\Model\UploadAttachment200Response';
        $request = $this->uploadAttachmentRequest($base_id, $record_id, $attachment_field_id_or_name, $upload_attachment_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadAttachment'
     *
     * @param  string $base_id (required)
     * @param  string $record_id (required)
     * @param  string $attachment_field_id_or_name (required)
     * @param  \Ez128\Airtable\Model\UploadAttachmentRequest|null $upload_attachment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadAttachmentRequest($base_id, $record_id, $attachment_field_id_or_name, $upload_attachment_request = null, string $contentType = self::contentTypes['uploadAttachment'][0])
    {

        // verify the required parameter 'base_id' is set
        if ($base_id === null || (is_array($base_id) && count($base_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_id when calling uploadAttachment'
            );
        }
        if (!preg_match("/app[0-9a-zA-Z]{14}$/", $base_id)) {
            throw new \InvalidArgumentException("invalid value for \"base_id\" when calling RecordApi.uploadAttachment, must conform to the pattern /app[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'record_id' is set
        if ($record_id === null || (is_array($record_id) && count($record_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_id when calling uploadAttachment'
            );
        }
        if (!preg_match("/rec[0-9a-zA-Z]{14}$/", $record_id)) {
            throw new \InvalidArgumentException("invalid value for \"record_id\" when calling RecordApi.uploadAttachment, must conform to the pattern /rec[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'attachment_field_id_or_name' is set
        if ($attachment_field_id_or_name === null || (is_array($attachment_field_id_or_name) && count($attachment_field_id_or_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_field_id_or_name when calling uploadAttachment'
            );
        }
        if (!preg_match("/[^\/]+$/", $attachment_field_id_or_name)) {
            throw new \InvalidArgumentException("invalid value for \"attachment_field_id_or_name\" when calling RecordApi.uploadAttachment, must conform to the pattern /[^\/]+$/.");
        }
        


        $resourcePath = '/v0/{baseId}/{recordId}/{attachmentFieldIdOrName}/uploadAttachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($base_id !== null) {
            $resourcePath = str_replace(
                '{' . 'baseId' . '}',
                ObjectSerializer::toPathValue($base_id),
                $resourcePath
            );
        }
        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recordId' . '}',
                ObjectSerializer::toPathValue($record_id),
                $resourcePath
            );
        }
        // path params
        if ($attachment_field_id_or_name !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentFieldIdOrName' . '}',
                ObjectSerializer::toPathValue($attachment_field_id_or_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($upload_attachment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($upload_attachment_request));
            } else {
                $httpBody = $upload_attachment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
