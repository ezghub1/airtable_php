<?php
/**
 * UserApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ez128\Airtable\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Ez128\Airtable\ApiException;
use Ez128\Airtable\Configuration;
use Ez128\Airtable\FormDataProcessor;
use Ez128\Airtable\HeaderSelector;
use Ez128\Airtable\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteUserById' => [
            'application/json',
        ],
        'deleteUsersByEmail' => [
            'application/json',
        ],
        'getUserById' => [
            'application/json',
        ],
        'getUsersByIdOrEmail' => [
            'application/json',
        ],
        'grantAdminAccess' => [
            'application/json',
        ],
        'logoutUser' => [
            'application/json',
        ],
        'manageUser' => [
            'application/json',
        ],
        'manageUserBatched' => [
            'application/json',
        ],
        'manageUserMembership' => [
            'application/json',
        ],
        'revokeAdminAccess' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteUserById
     *
     * Delete user by id
     *
     * @param  string $enterprise_account_id enterprise_account_id (required)
     * @param  string $user_id user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUserById'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function deleteUserById($enterprise_account_id, $user_id, string $contentType = self::contentTypes['deleteUserById'][0])
    {
        list($response) = $this->deleteUserByIdWithHttpInfo($enterprise_account_id, $user_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteUserByIdWithHttpInfo
     *
     * Delete user by id
     *
     * @param  string $enterprise_account_id (required)
     * @param  string $user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUserById'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUserByIdWithHttpInfo($enterprise_account_id, $user_id, string $contentType = self::contentTypes['deleteUserById'][0])
    {
        $request = $this->deleteUserByIdRequest($enterprise_account_id, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteUserByIdAsync
     *
     * Delete user by id
     *
     * @param  string $enterprise_account_id (required)
     * @param  string $user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUserById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUserByIdAsync($enterprise_account_id, $user_id, string $contentType = self::contentTypes['deleteUserById'][0])
    {
        return $this->deleteUserByIdAsyncWithHttpInfo($enterprise_account_id, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteUserByIdAsyncWithHttpInfo
     *
     * Delete user by id
     *
     * @param  string $enterprise_account_id (required)
     * @param  string $user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUserById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUserByIdAsyncWithHttpInfo($enterprise_account_id, $user_id, string $contentType = self::contentTypes['deleteUserById'][0])
    {
        $returnType = 'mixed';
        $request = $this->deleteUserByIdRequest($enterprise_account_id, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteUserById'
     *
     * @param  string $enterprise_account_id (required)
     * @param  string $user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUserById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteUserByIdRequest($enterprise_account_id, $user_id, string $contentType = self::contentTypes['deleteUserById'][0])
    {

        // verify the required parameter 'enterprise_account_id' is set
        if ($enterprise_account_id === null || (is_array($enterprise_account_id) && count($enterprise_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise_account_id when calling deleteUserById'
            );
        }
        if (!preg_match("/ent[0-9a-zA-Z]{14}$/", $enterprise_account_id)) {
            throw new \InvalidArgumentException("invalid value for \"enterprise_account_id\" when calling UserApi.deleteUserById, must conform to the pattern /ent[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling deleteUserById'
            );
        }
        if (!preg_match("/usr[0-9a-zA-Z]{14}$/", $user_id)) {
            throw new \InvalidArgumentException("invalid value for \"user_id\" when calling UserApi.deleteUserById, must conform to the pattern /usr[0-9a-zA-Z]{14}$/.");
        }
        

        $resourcePath = '/v0/meta/enterpriseAccounts/{enterpriseAccountId}/users/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($enterprise_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'enterpriseAccountId' . '}',
                ObjectSerializer::toPathValue($enterprise_account_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteUsersByEmail
     *
     * Delete users by email
     *
     * @param  string $enterprise_account_id enterprise_account_id (required)
     * @param  string[]|null $email email (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUsersByEmail'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\DeleteUsersByEmail200Response
     */
    public function deleteUsersByEmail($enterprise_account_id, $email = null, string $contentType = self::contentTypes['deleteUsersByEmail'][0])
    {
        list($response) = $this->deleteUsersByEmailWithHttpInfo($enterprise_account_id, $email, $contentType);
        return $response;
    }

    /**
     * Operation deleteUsersByEmailWithHttpInfo
     *
     * Delete users by email
     *
     * @param  string $enterprise_account_id (required)
     * @param  string[]|null $email (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUsersByEmail'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\DeleteUsersByEmail200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUsersByEmailWithHttpInfo($enterprise_account_id, $email = null, string $contentType = self::contentTypes['deleteUsersByEmail'][0])
    {
        $request = $this->deleteUsersByEmailRequest($enterprise_account_id, $email, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\DeleteUsersByEmail200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\DeleteUsersByEmail200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\DeleteUsersByEmail200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteUsersByEmailAsync
     *
     * Delete users by email
     *
     * @param  string $enterprise_account_id (required)
     * @param  string[]|null $email (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUsersByEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUsersByEmailAsync($enterprise_account_id, $email = null, string $contentType = self::contentTypes['deleteUsersByEmail'][0])
    {
        return $this->deleteUsersByEmailAsyncWithHttpInfo($enterprise_account_id, $email, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteUsersByEmailAsyncWithHttpInfo
     *
     * Delete users by email
     *
     * @param  string $enterprise_account_id (required)
     * @param  string[]|null $email (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUsersByEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUsersByEmailAsyncWithHttpInfo($enterprise_account_id, $email = null, string $contentType = self::contentTypes['deleteUsersByEmail'][0])
    {
        $returnType = '\Ez128\Airtable\Model\DeleteUsersByEmail200Response';
        $request = $this->deleteUsersByEmailRequest($enterprise_account_id, $email, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteUsersByEmail'
     *
     * @param  string $enterprise_account_id (required)
     * @param  string[]|null $email (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUsersByEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteUsersByEmailRequest($enterprise_account_id, $email = null, string $contentType = self::contentTypes['deleteUsersByEmail'][0])
    {

        // verify the required parameter 'enterprise_account_id' is set
        if ($enterprise_account_id === null || (is_array($enterprise_account_id) && count($enterprise_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise_account_id when calling deleteUsersByEmail'
            );
        }
        if (!preg_match("/ent[0-9a-zA-Z]{14}$/", $enterprise_account_id)) {
            throw new \InvalidArgumentException("invalid value for \"enterprise_account_id\" when calling UserApi.deleteUsersByEmail, must conform to the pattern /ent[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/enterpriseAccounts/{enterpriseAccountId}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($enterprise_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'enterpriseAccountId' . '}',
                ObjectSerializer::toPathValue($enterprise_account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserById
     *
     * Get user by id
     *
     * @param  string $enterprise_account_id enterprise_account_id (required)
     * @param  string $user_id user_id (required)
     * @param  string[]|null $include include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserById'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\GetUserById200Response
     */
    public function getUserById($enterprise_account_id, $user_id, $include = null, string $contentType = self::contentTypes['getUserById'][0])
    {
        list($response) = $this->getUserByIdWithHttpInfo($enterprise_account_id, $user_id, $include, $contentType);
        return $response;
    }

    /**
     * Operation getUserByIdWithHttpInfo
     *
     * Get user by id
     *
     * @param  string $enterprise_account_id (required)
     * @param  string $user_id (required)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserById'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\GetUserById200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserByIdWithHttpInfo($enterprise_account_id, $user_id, $include = null, string $contentType = self::contentTypes['getUserById'][0])
    {
        $request = $this->getUserByIdRequest($enterprise_account_id, $user_id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\GetUserById200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\GetUserById200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\GetUserById200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUserByIdAsync
     *
     * Get user by id
     *
     * @param  string $enterprise_account_id (required)
     * @param  string $user_id (required)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserByIdAsync($enterprise_account_id, $user_id, $include = null, string $contentType = self::contentTypes['getUserById'][0])
    {
        return $this->getUserByIdAsyncWithHttpInfo($enterprise_account_id, $user_id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserByIdAsyncWithHttpInfo
     *
     * Get user by id
     *
     * @param  string $enterprise_account_id (required)
     * @param  string $user_id (required)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserByIdAsyncWithHttpInfo($enterprise_account_id, $user_id, $include = null, string $contentType = self::contentTypes['getUserById'][0])
    {
        $returnType = '\Ez128\Airtable\Model\GetUserById200Response';
        $request = $this->getUserByIdRequest($enterprise_account_id, $user_id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserById'
     *
     * @param  string $enterprise_account_id (required)
     * @param  string $user_id (required)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserByIdRequest($enterprise_account_id, $user_id, $include = null, string $contentType = self::contentTypes['getUserById'][0])
    {

        // verify the required parameter 'enterprise_account_id' is set
        if ($enterprise_account_id === null || (is_array($enterprise_account_id) && count($enterprise_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise_account_id when calling getUserById'
            );
        }
        if (!preg_match("/ent[0-9a-zA-Z]{14}$/", $enterprise_account_id)) {
            throw new \InvalidArgumentException("invalid value for \"enterprise_account_id\" when calling UserApi.getUserById, must conform to the pattern /ent[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getUserById'
            );
        }
        if (!preg_match("/usr[0-9a-zA-Z]{14}$/", $user_id)) {
            throw new \InvalidArgumentException("invalid value for \"user_id\" when calling UserApi.getUserById, must conform to the pattern /usr[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/enterpriseAccounts/{enterpriseAccountId}/users/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($enterprise_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'enterpriseAccountId' . '}',
                ObjectSerializer::toPathValue($enterprise_account_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUsersByIdOrEmail
     *
     * Get users by id or email
     *
     * @param  string $enterprise_account_id enterprise_account_id (required)
     * @param  string[]|null $email email (optional)
     * @param  string[]|null $id id (optional)
     * @param  string[]|null $include include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUsersByIdOrEmail'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\GetUsersByIdOrEmail200Response
     */
    public function getUsersByIdOrEmail($enterprise_account_id, $email = null, $id = null, $include = null, string $contentType = self::contentTypes['getUsersByIdOrEmail'][0])
    {
        list($response) = $this->getUsersByIdOrEmailWithHttpInfo($enterprise_account_id, $email, $id, $include, $contentType);
        return $response;
    }

    /**
     * Operation getUsersByIdOrEmailWithHttpInfo
     *
     * Get users by id or email
     *
     * @param  string $enterprise_account_id (required)
     * @param  string[]|null $email (optional)
     * @param  string[]|null $id (optional)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUsersByIdOrEmail'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\GetUsersByIdOrEmail200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsersByIdOrEmailWithHttpInfo($enterprise_account_id, $email = null, $id = null, $include = null, string $contentType = self::contentTypes['getUsersByIdOrEmail'][0])
    {
        $request = $this->getUsersByIdOrEmailRequest($enterprise_account_id, $email, $id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\GetUsersByIdOrEmail200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\GetUsersByIdOrEmail200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\GetUsersByIdOrEmail200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUsersByIdOrEmailAsync
     *
     * Get users by id or email
     *
     * @param  string $enterprise_account_id (required)
     * @param  string[]|null $email (optional)
     * @param  string[]|null $id (optional)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUsersByIdOrEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsersByIdOrEmailAsync($enterprise_account_id, $email = null, $id = null, $include = null, string $contentType = self::contentTypes['getUsersByIdOrEmail'][0])
    {
        return $this->getUsersByIdOrEmailAsyncWithHttpInfo($enterprise_account_id, $email, $id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUsersByIdOrEmailAsyncWithHttpInfo
     *
     * Get users by id or email
     *
     * @param  string $enterprise_account_id (required)
     * @param  string[]|null $email (optional)
     * @param  string[]|null $id (optional)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUsersByIdOrEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsersByIdOrEmailAsyncWithHttpInfo($enterprise_account_id, $email = null, $id = null, $include = null, string $contentType = self::contentTypes['getUsersByIdOrEmail'][0])
    {
        $returnType = '\Ez128\Airtable\Model\GetUsersByIdOrEmail200Response';
        $request = $this->getUsersByIdOrEmailRequest($enterprise_account_id, $email, $id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUsersByIdOrEmail'
     *
     * @param  string $enterprise_account_id (required)
     * @param  string[]|null $email (optional)
     * @param  string[]|null $id (optional)
     * @param  string[]|null $include (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUsersByIdOrEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUsersByIdOrEmailRequest($enterprise_account_id, $email = null, $id = null, $include = null, string $contentType = self::contentTypes['getUsersByIdOrEmail'][0])
    {

        // verify the required parameter 'enterprise_account_id' is set
        if ($enterprise_account_id === null || (is_array($enterprise_account_id) && count($enterprise_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise_account_id when calling getUsersByIdOrEmail'
            );
        }
        if (!preg_match("/ent[0-9a-zA-Z]{14}$/", $enterprise_account_id)) {
            throw new \InvalidArgumentException("invalid value for \"enterprise_account_id\" when calling UserApi.getUsersByIdOrEmail, must conform to the pattern /ent[0-9a-zA-Z]{14}$/.");
        }
        




        $resourcePath = '/v0/meta/enterpriseAccounts/{enterpriseAccountId}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($enterprise_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'enterpriseAccountId' . '}',
                ObjectSerializer::toPathValue($enterprise_account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation grantAdminAccess
     *
     * Grant admin access
     *
     * @param  string $enterprise_account_id enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\GrantAdminAccessRequest|null $grant_admin_access_request grant_admin_access_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['grantAdminAccess'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\GrantAdminAccess200Response
     */
    public function grantAdminAccess($enterprise_account_id, $grant_admin_access_request = null, string $contentType = self::contentTypes['grantAdminAccess'][0])
    {
        list($response) = $this->grantAdminAccessWithHttpInfo($enterprise_account_id, $grant_admin_access_request, $contentType);
        return $response;
    }

    /**
     * Operation grantAdminAccessWithHttpInfo
     *
     * Grant admin access
     *
     * @param  string $enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\GrantAdminAccessRequest|null $grant_admin_access_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['grantAdminAccess'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\GrantAdminAccess200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function grantAdminAccessWithHttpInfo($enterprise_account_id, $grant_admin_access_request = null, string $contentType = self::contentTypes['grantAdminAccess'][0])
    {
        $request = $this->grantAdminAccessRequest($enterprise_account_id, $grant_admin_access_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\GrantAdminAccess200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\GrantAdminAccess200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\GrantAdminAccess200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation grantAdminAccessAsync
     *
     * Grant admin access
     *
     * @param  string $enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\GrantAdminAccessRequest|null $grant_admin_access_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['grantAdminAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function grantAdminAccessAsync($enterprise_account_id, $grant_admin_access_request = null, string $contentType = self::contentTypes['grantAdminAccess'][0])
    {
        return $this->grantAdminAccessAsyncWithHttpInfo($enterprise_account_id, $grant_admin_access_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation grantAdminAccessAsyncWithHttpInfo
     *
     * Grant admin access
     *
     * @param  string $enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\GrantAdminAccessRequest|null $grant_admin_access_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['grantAdminAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function grantAdminAccessAsyncWithHttpInfo($enterprise_account_id, $grant_admin_access_request = null, string $contentType = self::contentTypes['grantAdminAccess'][0])
    {
        $returnType = '\Ez128\Airtable\Model\GrantAdminAccess200Response';
        $request = $this->grantAdminAccessRequest($enterprise_account_id, $grant_admin_access_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'grantAdminAccess'
     *
     * @param  string $enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\GrantAdminAccessRequest|null $grant_admin_access_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['grantAdminAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function grantAdminAccessRequest($enterprise_account_id, $grant_admin_access_request = null, string $contentType = self::contentTypes['grantAdminAccess'][0])
    {

        // verify the required parameter 'enterprise_account_id' is set
        if ($enterprise_account_id === null || (is_array($enterprise_account_id) && count($enterprise_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise_account_id when calling grantAdminAccess'
            );
        }
        if (!preg_match("/ent[0-9a-zA-Z]{14}$/", $enterprise_account_id)) {
            throw new \InvalidArgumentException("invalid value for \"enterprise_account_id\" when calling UserApi.grantAdminAccess, must conform to the pattern /ent[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/enterpriseAccounts/{enterpriseAccountId}/users/grantAdminAccess';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($enterprise_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'enterpriseAccountId' . '}',
                ObjectSerializer::toPathValue($enterprise_account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($grant_admin_access_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($grant_admin_access_request));
            } else {
                $httpBody = $grant_admin_access_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation logoutUser
     *
     * Logout user
     *
     * @param  string $enterprise_account_id enterprise_account_id (required)
     * @param  string $user_id user_id (required)
     * @param  object|null $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['logoutUser'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function logoutUser($enterprise_account_id, $user_id, $body = null, string $contentType = self::contentTypes['logoutUser'][0])
    {
        $this->logoutUserWithHttpInfo($enterprise_account_id, $user_id, $body, $contentType);
    }

    /**
     * Operation logoutUserWithHttpInfo
     *
     * Logout user
     *
     * @param  string $enterprise_account_id (required)
     * @param  string $user_id (required)
     * @param  object|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['logoutUser'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function logoutUserWithHttpInfo($enterprise_account_id, $user_id, $body = null, string $contentType = self::contentTypes['logoutUser'][0])
    {
        $request = $this->logoutUserRequest($enterprise_account_id, $user_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation logoutUserAsync
     *
     * Logout user
     *
     * @param  string $enterprise_account_id (required)
     * @param  string $user_id (required)
     * @param  object|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['logoutUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function logoutUserAsync($enterprise_account_id, $user_id, $body = null, string $contentType = self::contentTypes['logoutUser'][0])
    {
        return $this->logoutUserAsyncWithHttpInfo($enterprise_account_id, $user_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation logoutUserAsyncWithHttpInfo
     *
     * Logout user
     *
     * @param  string $enterprise_account_id (required)
     * @param  string $user_id (required)
     * @param  object|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['logoutUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function logoutUserAsyncWithHttpInfo($enterprise_account_id, $user_id, $body = null, string $contentType = self::contentTypes['logoutUser'][0])
    {
        $returnType = '';
        $request = $this->logoutUserRequest($enterprise_account_id, $user_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'logoutUser'
     *
     * @param  string $enterprise_account_id (required)
     * @param  string $user_id (required)
     * @param  object|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['logoutUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function logoutUserRequest($enterprise_account_id, $user_id, $body = null, string $contentType = self::contentTypes['logoutUser'][0])
    {

        // verify the required parameter 'enterprise_account_id' is set
        if ($enterprise_account_id === null || (is_array($enterprise_account_id) && count($enterprise_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise_account_id when calling logoutUser'
            );
        }
        if (!preg_match("/ent[0-9a-zA-Z]{14}$/", $enterprise_account_id)) {
            throw new \InvalidArgumentException("invalid value for \"enterprise_account_id\" when calling UserApi.logoutUser, must conform to the pattern /ent[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling logoutUser'
            );
        }
        if (!preg_match("/usr[0-9a-zA-Z]{14}$/", $user_id)) {
            throw new \InvalidArgumentException("invalid value for \"user_id\" when calling UserApi.logoutUser, must conform to the pattern /usr[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/enterpriseAccounts/{enterpriseAccountId}/users/{userId}/logout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($enterprise_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'enterpriseAccountId' . '}',
                ObjectSerializer::toPathValue($enterprise_account_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation manageUser
     *
     * Manage user
     *
     * @param  string $enterprise_account_id enterprise_account_id (required)
     * @param  string $user_id user_id (required)
     * @param  \Ez128\Airtable\Model\ManageUserRequest|null $manage_user_request manage_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manageUser'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function manageUser($enterprise_account_id, $user_id, $manage_user_request = null, string $contentType = self::contentTypes['manageUser'][0])
    {
        list($response) = $this->manageUserWithHttpInfo($enterprise_account_id, $user_id, $manage_user_request, $contentType);
        return $response;
    }

    /**
     * Operation manageUserWithHttpInfo
     *
     * Manage user
     *
     * @param  string $enterprise_account_id (required)
     * @param  string $user_id (required)
     * @param  \Ez128\Airtable\Model\ManageUserRequest|null $manage_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manageUser'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function manageUserWithHttpInfo($enterprise_account_id, $user_id, $manage_user_request = null, string $contentType = self::contentTypes['manageUser'][0])
    {
        $request = $this->manageUserRequest($enterprise_account_id, $user_id, $manage_user_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation manageUserAsync
     *
     * Manage user
     *
     * @param  string $enterprise_account_id (required)
     * @param  string $user_id (required)
     * @param  \Ez128\Airtable\Model\ManageUserRequest|null $manage_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manageUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function manageUserAsync($enterprise_account_id, $user_id, $manage_user_request = null, string $contentType = self::contentTypes['manageUser'][0])
    {
        return $this->manageUserAsyncWithHttpInfo($enterprise_account_id, $user_id, $manage_user_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation manageUserAsyncWithHttpInfo
     *
     * Manage user
     *
     * @param  string $enterprise_account_id (required)
     * @param  string $user_id (required)
     * @param  \Ez128\Airtable\Model\ManageUserRequest|null $manage_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manageUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function manageUserAsyncWithHttpInfo($enterprise_account_id, $user_id, $manage_user_request = null, string $contentType = self::contentTypes['manageUser'][0])
    {
        $returnType = 'mixed';
        $request = $this->manageUserRequest($enterprise_account_id, $user_id, $manage_user_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'manageUser'
     *
     * @param  string $enterprise_account_id (required)
     * @param  string $user_id (required)
     * @param  \Ez128\Airtable\Model\ManageUserRequest|null $manage_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manageUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function manageUserRequest($enterprise_account_id, $user_id, $manage_user_request = null, string $contentType = self::contentTypes['manageUser'][0])
    {

        // verify the required parameter 'enterprise_account_id' is set
        if ($enterprise_account_id === null || (is_array($enterprise_account_id) && count($enterprise_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise_account_id when calling manageUser'
            );
        }
        if (!preg_match("/ent[0-9a-zA-Z]{14}$/", $enterprise_account_id)) {
            throw new \InvalidArgumentException("invalid value for \"enterprise_account_id\" when calling UserApi.manageUser, must conform to the pattern /ent[0-9a-zA-Z]{14}$/.");
        }
        
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling manageUser'
            );
        }
        if (!preg_match("/usr[0-9a-zA-Z]{14}$/", $user_id)) {
            throw new \InvalidArgumentException("invalid value for \"user_id\" when calling UserApi.manageUser, must conform to the pattern /usr[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/enterpriseAccounts/{enterpriseAccountId}/users/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($enterprise_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'enterpriseAccountId' . '}',
                ObjectSerializer::toPathValue($enterprise_account_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($manage_user_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($manage_user_request));
            } else {
                $httpBody = $manage_user_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation manageUserBatched
     *
     * Manage user batched
     *
     * @param  string $enterprise_account_id enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\ManageUserBatchedRequest|null $manage_user_batched_request manage_user_batched_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manageUserBatched'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\ManageUserBatched200Response
     */
    public function manageUserBatched($enterprise_account_id, $manage_user_batched_request = null, string $contentType = self::contentTypes['manageUserBatched'][0])
    {
        list($response) = $this->manageUserBatchedWithHttpInfo($enterprise_account_id, $manage_user_batched_request, $contentType);
        return $response;
    }

    /**
     * Operation manageUserBatchedWithHttpInfo
     *
     * Manage user batched
     *
     * @param  string $enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\ManageUserBatchedRequest|null $manage_user_batched_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manageUserBatched'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\ManageUserBatched200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function manageUserBatchedWithHttpInfo($enterprise_account_id, $manage_user_batched_request = null, string $contentType = self::contentTypes['manageUserBatched'][0])
    {
        $request = $this->manageUserBatchedRequest($enterprise_account_id, $manage_user_batched_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\ManageUserBatched200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\ManageUserBatched200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\ManageUserBatched200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation manageUserBatchedAsync
     *
     * Manage user batched
     *
     * @param  string $enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\ManageUserBatchedRequest|null $manage_user_batched_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manageUserBatched'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function manageUserBatchedAsync($enterprise_account_id, $manage_user_batched_request = null, string $contentType = self::contentTypes['manageUserBatched'][0])
    {
        return $this->manageUserBatchedAsyncWithHttpInfo($enterprise_account_id, $manage_user_batched_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation manageUserBatchedAsyncWithHttpInfo
     *
     * Manage user batched
     *
     * @param  string $enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\ManageUserBatchedRequest|null $manage_user_batched_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manageUserBatched'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function manageUserBatchedAsyncWithHttpInfo($enterprise_account_id, $manage_user_batched_request = null, string $contentType = self::contentTypes['manageUserBatched'][0])
    {
        $returnType = '\Ez128\Airtable\Model\ManageUserBatched200Response';
        $request = $this->manageUserBatchedRequest($enterprise_account_id, $manage_user_batched_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'manageUserBatched'
     *
     * @param  string $enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\ManageUserBatchedRequest|null $manage_user_batched_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manageUserBatched'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function manageUserBatchedRequest($enterprise_account_id, $manage_user_batched_request = null, string $contentType = self::contentTypes['manageUserBatched'][0])
    {

        // verify the required parameter 'enterprise_account_id' is set
        if ($enterprise_account_id === null || (is_array($enterprise_account_id) && count($enterprise_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise_account_id when calling manageUserBatched'
            );
        }
        if (!preg_match("/ent[0-9a-zA-Z]{14}$/", $enterprise_account_id)) {
            throw new \InvalidArgumentException("invalid value for \"enterprise_account_id\" when calling UserApi.manageUserBatched, must conform to the pattern /ent[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/enterpriseAccounts/{enterpriseAccountId}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($enterprise_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'enterpriseAccountId' . '}',
                ObjectSerializer::toPathValue($enterprise_account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($manage_user_batched_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($manage_user_batched_request));
            } else {
                $httpBody = $manage_user_batched_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation manageUserMembership
     *
     * Manage user membership
     *
     * @param  string $enterprise_account_id enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\ManageUserMembershipRequest|null $manage_user_membership_request manage_user_membership_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manageUserMembership'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\ManageUserMembership200Response
     */
    public function manageUserMembership($enterprise_account_id, $manage_user_membership_request = null, string $contentType = self::contentTypes['manageUserMembership'][0])
    {
        list($response) = $this->manageUserMembershipWithHttpInfo($enterprise_account_id, $manage_user_membership_request, $contentType);
        return $response;
    }

    /**
     * Operation manageUserMembershipWithHttpInfo
     *
     * Manage user membership
     *
     * @param  string $enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\ManageUserMembershipRequest|null $manage_user_membership_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manageUserMembership'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\ManageUserMembership200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function manageUserMembershipWithHttpInfo($enterprise_account_id, $manage_user_membership_request = null, string $contentType = self::contentTypes['manageUserMembership'][0])
    {
        $request = $this->manageUserMembershipRequest($enterprise_account_id, $manage_user_membership_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\ManageUserMembership200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\ManageUserMembership200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\ManageUserMembership200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation manageUserMembershipAsync
     *
     * Manage user membership
     *
     * @param  string $enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\ManageUserMembershipRequest|null $manage_user_membership_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manageUserMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function manageUserMembershipAsync($enterprise_account_id, $manage_user_membership_request = null, string $contentType = self::contentTypes['manageUserMembership'][0])
    {
        return $this->manageUserMembershipAsyncWithHttpInfo($enterprise_account_id, $manage_user_membership_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation manageUserMembershipAsyncWithHttpInfo
     *
     * Manage user membership
     *
     * @param  string $enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\ManageUserMembershipRequest|null $manage_user_membership_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manageUserMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function manageUserMembershipAsyncWithHttpInfo($enterprise_account_id, $manage_user_membership_request = null, string $contentType = self::contentTypes['manageUserMembership'][0])
    {
        $returnType = '\Ez128\Airtable\Model\ManageUserMembership200Response';
        $request = $this->manageUserMembershipRequest($enterprise_account_id, $manage_user_membership_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'manageUserMembership'
     *
     * @param  string $enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\ManageUserMembershipRequest|null $manage_user_membership_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manageUserMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function manageUserMembershipRequest($enterprise_account_id, $manage_user_membership_request = null, string $contentType = self::contentTypes['manageUserMembership'][0])
    {

        // verify the required parameter 'enterprise_account_id' is set
        if ($enterprise_account_id === null || (is_array($enterprise_account_id) && count($enterprise_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise_account_id when calling manageUserMembership'
            );
        }
        if (!preg_match("/ent[0-9a-zA-Z]{14}$/", $enterprise_account_id)) {
            throw new \InvalidArgumentException("invalid value for \"enterprise_account_id\" when calling UserApi.manageUserMembership, must conform to the pattern /ent[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/enterpriseAccounts/{enterpriseAccountId}/users/claim';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($enterprise_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'enterpriseAccountId' . '}',
                ObjectSerializer::toPathValue($enterprise_account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($manage_user_membership_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($manage_user_membership_request));
            } else {
                $httpBody = $manage_user_membership_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation revokeAdminAccess
     *
     * Revoke admin access
     *
     * @param  string $enterprise_account_id enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\RevokeAdminAccessRequest|null $revoke_admin_access_request revoke_admin_access_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeAdminAccess'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ez128\Airtable\Model\RevokeAdminAccess200Response
     */
    public function revokeAdminAccess($enterprise_account_id, $revoke_admin_access_request = null, string $contentType = self::contentTypes['revokeAdminAccess'][0])
    {
        list($response) = $this->revokeAdminAccessWithHttpInfo($enterprise_account_id, $revoke_admin_access_request, $contentType);
        return $response;
    }

    /**
     * Operation revokeAdminAccessWithHttpInfo
     *
     * Revoke admin access
     *
     * @param  string $enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\RevokeAdminAccessRequest|null $revoke_admin_access_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeAdminAccess'] to see the possible values for this operation
     *
     * @throws \Ez128\Airtable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ez128\Airtable\Model\RevokeAdminAccess200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeAdminAccessWithHttpInfo($enterprise_account_id, $revoke_admin_access_request = null, string $contentType = self::contentTypes['revokeAdminAccess'][0])
    {
        $request = $this->revokeAdminAccessRequest($enterprise_account_id, $revoke_admin_access_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ez128\Airtable\Model\RevokeAdminAccess200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ez128\Airtable\Model\RevokeAdminAccess200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ez128\Airtable\Model\RevokeAdminAccess200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation revokeAdminAccessAsync
     *
     * Revoke admin access
     *
     * @param  string $enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\RevokeAdminAccessRequest|null $revoke_admin_access_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeAdminAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeAdminAccessAsync($enterprise_account_id, $revoke_admin_access_request = null, string $contentType = self::contentTypes['revokeAdminAccess'][0])
    {
        return $this->revokeAdminAccessAsyncWithHttpInfo($enterprise_account_id, $revoke_admin_access_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation revokeAdminAccessAsyncWithHttpInfo
     *
     * Revoke admin access
     *
     * @param  string $enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\RevokeAdminAccessRequest|null $revoke_admin_access_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeAdminAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeAdminAccessAsyncWithHttpInfo($enterprise_account_id, $revoke_admin_access_request = null, string $contentType = self::contentTypes['revokeAdminAccess'][0])
    {
        $returnType = '\Ez128\Airtable\Model\RevokeAdminAccess200Response';
        $request = $this->revokeAdminAccessRequest($enterprise_account_id, $revoke_admin_access_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'revokeAdminAccess'
     *
     * @param  string $enterprise_account_id (required)
     * @param  \Ez128\Airtable\Model\RevokeAdminAccessRequest|null $revoke_admin_access_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeAdminAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function revokeAdminAccessRequest($enterprise_account_id, $revoke_admin_access_request = null, string $contentType = self::contentTypes['revokeAdminAccess'][0])
    {

        // verify the required parameter 'enterprise_account_id' is set
        if ($enterprise_account_id === null || (is_array($enterprise_account_id) && count($enterprise_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise_account_id when calling revokeAdminAccess'
            );
        }
        if (!preg_match("/ent[0-9a-zA-Z]{14}$/", $enterprise_account_id)) {
            throw new \InvalidArgumentException("invalid value for \"enterprise_account_id\" when calling UserApi.revokeAdminAccess, must conform to the pattern /ent[0-9a-zA-Z]{14}$/.");
        }
        


        $resourcePath = '/v0/meta/enterpriseAccounts/{enterpriseAccountId}/users/revokeAdminAccess';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($enterprise_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'enterpriseAccountId' . '}',
                ObjectSerializer::toPathValue($enterprise_account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($revoke_admin_access_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($revoke_admin_access_request));
            } else {
                $httpBody = $revoke_admin_access_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
