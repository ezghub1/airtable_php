<?php
/**
 * WebhooksSpecificationTest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Ez128\Airtable\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * WebhooksSpecificationTest Class Doc Comment
 *
 * @category    Class
 * @description A single webhook may watch changes in a table, view, or base. The specification defines the types of the changes that are included in the webhook&#39;s payloads.  Note that tables, fields, and views in the specification must be specified by ID rather than by name. You may find the IDs for each of these with the manage fields UI.
 * @package     Ez128\Airtable
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class WebhooksSpecificationTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "WebhooksSpecification"
     */
    public function testWebhooksSpecification()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "filters"
     */
    public function testPropertyFilters()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "includes"
     */
    public function testPropertyIncludes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
