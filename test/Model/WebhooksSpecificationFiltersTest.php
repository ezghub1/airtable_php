<?php
/**
 * WebhooksSpecificationFiltersTest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ez128\Airtable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Airtable API
 *
 * The Airtable REST API. Please see https://airtable.com/developers/ for more details.
 *
 * The version of the OpenAPI document: 0
 * Contact: help@airtable.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Ez128\Airtable\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * WebhooksSpecificationFiltersTest Class Doc Comment
 *
 * @category    Class
 * @description A webhook specification can contain a filters object. For example, the specification for a webhook watching the data in a table is as follows: &#x60;&#x60;&#x60; {   \&quot;options\&quot;: {     \&quot;filters\&quot;: {       \&quot;dataTypes\&quot;: [         \&quot;tableData\&quot;       ],       \&quot;recordChangeScope\&quot;: \&quot;tbl00000000000000\&quot;     }   } } &#x60;&#x60;&#x60; The table events can be filtered down even more to cover just record data changes for certain fields from specific sources. &#x60;&#x60;&#x60; {   \&quot;options\&quot;: {     \&quot;filters\&quot;: {       \&quot;fromSources\&quot;: [         \&quot;client\&quot;       ],       \&quot;dataTypes\&quot;: [         \&quot;tableData\&quot;       ],       \&quot;recordChangeScope\&quot;: \&quot;tbl00000000000000\&quot;,       \&quot;watchDataInFieldIds\&quot;: [         \&quot;fld00000000000000\&quot;,         \&quot;fld00000000000001\&quot;,         \&quot;fld00000000000002\&quot;       ]     }   } } &#x60;&#x60;&#x60;  Aside from dataTypes, the keys in a filters object are optional. By default, a webhook will generate payloads across an entire base according to the specified dataTypes. We strongly recommend that your integration specify a filters object with a subset of the filter keys to ensure that your integration is notified for only the most relevant events.
 * @package     Ez128\Airtable
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class WebhooksSpecificationFiltersTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "WebhooksSpecificationFilters"
     */
    public function testWebhooksSpecificationFilters()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "change_types"
     */
    public function testPropertyChangeTypes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "data_types"
     */
    public function testPropertyDataTypes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "from_sources"
     */
    public function testPropertyFromSources()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "record_change_scope"
     */
    public function testPropertyRecordChangeScope()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "source_options"
     */
    public function testPropertySourceOptions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "watch_data_in_field_ids"
     */
    public function testPropertyWatchDataInFieldIds()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "watch_schemas_of_field_ids"
     */
    public function testPropertyWatchSchemasOfFieldIds()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
